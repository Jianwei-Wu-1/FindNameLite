Project: zxcvbn-java
 Class: BasicMatchTest
 Method: testGetToken
 Body: {
    System.out.println("Test of getToken method, of class BasicMatch");
    BasicMatch instance = new BasicMatchImpl("dummyToken");
    String result = instance.getToken();
    Assert.assertEquals("dummyToken", result);
  }
 Pattern Name: NormalPattern_AnyLOC - Action: println (Alternative Action: println=1 ) - Predicate: N/A - Scenario: instance (Alternative Scenario: result=1 )

Project: zwave
 Class: NodeManagerTest
 Method: testNotifications
 Body: {
        nodeManager.registerNode(new ZWaveNodeImpl(1).setNodeStatus(NodeStatus.IDENTIFIED).setAvailability(NodeAvailability.AVAILABLE));

        ArgumentCaptor<NodeRegisteredEvent> newDeviceEventCaptor = ArgumentCaptor.forClass(NodeRegisteredEvent.class);
        verify(bus, times(1)).publish(newDeviceEventCaptor.capture());

        NodeRegisteredEvent event = newDeviceEventCaptor.getValue();
        assertThat(event.getNodeId(), is(1));
        assertThat(event.getNode().getAvailability(), is(NodeAvailability.AVAILABLE));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: publish (Alternative Action: is=2 ) - Predicate: getNodeId - Scenario: event (Alternative Scenario: newDeviceEventCaptor=1 )

Project: xmlsoccer
 Class: XmlSoccerServiceImplTest
 Method: testGetMatchLineupsEventsByFixtureMatchId
 Body: {

        List<GetMatchLineupsDto> test = xmlSoccerService.getMatchLineupsByFixtureMatchId(380477).
                stream().
                collect(Collectors.toList());

        Assert.notNull(test);

        log.info(test.toString());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: info (Alternative Action: getMatchLineupsByFixtureMatchId=1 ) - Predicate: notNull - Scenario: test (Alternative Scenario: test=1 )

Project: xmlsoccer
 Class: XmlSoccerServiceImplTest
 Method: testGetLiveScoreByLeague
 Body: {
        Collection<GetLiveScoreResultDto> test =
                xmlSoccerService.getLiveScoreByLeague(Leagues.SCOTTISH_PREMIER_LEAGUE.getParam());

        Assert.notNull(test);
        log.info(test.toString());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: info (Alternative Action: getParam=1 ) - Predicate: notNull - Scenario: test (Alternative Scenario: test=1 )

Project: ytapi
 Class: CurrentAPITest
 Method: signsIn
 Body: {
    YouTrack youTrack = new CurrentAPI(url);
    assert !youTrack.signedIn();
    youTrack.signIn(properties.getProperty("ytLogin"), properties.getProperty("ytPassword"));
    assert youTrack.signedIn();
  }
 Pattern Name: NormalPattern_AnyLOC - Action: signIn (Alternative Action: getProperty=2 ) - Predicate: N/A (No Invocation in assertion) - Scenario: youTrack (Alternative Scenario: youTrack=1 )

Project: wheels
 Class: RandomProviderTest
 Method: testEquals
 Body: {
        List<RandomProvider> xs = Arrays.asList(
                RandomProvider.example(),
                Q.withScale(3).withSecondaryScale(0).withTertiaryScale(-1),
                R.withScale(0).withSecondaryScale(10).withTertiaryScale(5)
        );
        List<RandomProvider> ys = Arrays.asList(
                RandomProvider.example(),
                Q.withScale(3).withSecondaryScale(0).withTertiaryScale(-1),
                R.withScale(0).withSecondaryScale(10).withTertiaryScale(5)
        );
        testEqualsHelper(xs, ys);
        //noinspection EqualsBetweenInconvertibleTypes
        assertFalse(P.equals("hello"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testEqualsHelper (Alternative Action: withScale=4 ) - Predicate: equals - Scenario: ys (Alternative Scenario: ys=1 )

Project: wheels
 Class: RandomProviderTest
 Method: testDeepCopy
 Body: {
        RandomProvider copy = P.deepCopy();
        copy.validate();
        assertEquals(P, copy);
        head(P.integers());
        assertNotEquals(P, copy);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: validate (Alternative Action: head=1 ) - Predicate: N/A - Scenario: copy (Alternative Scenario: copy=1 )

Project: wheels
 Class: RandomProviderTest
 Method: testCopy
 Body: {
        RandomProvider copy = P.copy();
        copy.validate();
        assertEquals(P, copy);
        head(P.integers());
        assertEquals(P, copy);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: validate (Alternative Action: head=1 ) - Predicate: N/A - Scenario: copy (Alternative Scenario: copy=1 )

Project: wheels
 Class: RandomProviderTest
 Method: testReset
 Body: {
        RandomProvider PDependent = P.withScale(10);
        RandomProvider original = P.deepCopy();
        RandomProvider dependent = original.withScale(10);
        assertEquals(PDependent, dependent);
        head(P.integers());
        assertNotEquals(P, original);
        assertNotEquals(PDependent, dependent);
        P.reset();
        P.validate();
        assertEquals(P, original);
        assertEquals(PDependent, dependent);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: head (Alternative Action: withScale=2 ) - Predicate: N/A - Scenario: PDependent (Alternative Scenario: original=1 )

Project: xodus
 Class: BTreeCursorDupConcurrentModificationTest
 Method: testConcurrentDeleteAfter
 Body: {
        Cursor c = tm.openCursor();
        assertTrue(c.getSearchBoth(key(5), value("v51")));
        deleteImpl(key(6));
        assertTrue(c.getNext());
        assertEquals(key(5), c.getKey());
        assertEquals(value("v52"), c.getValue());

        assertTrue(c.getNext());
        assertEquals(key(7), c.getKey());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: deleteImpl (Alternative Action: key=4 ) - Predicate: getSearchBoth - Scenario: c (Alternative Scenario: c=1 )

Project: xodus
 Class: BTreeCursorDupConcurrentModificationTest
 Method: testConcurrentDeleteBefore1
 Body: {
        Cursor c = tm.openCursor();
        assertTrue(c.getSearchBoth(key(5), value("v51")));
        deleteImpl(key(1));
        assertTrue(c.getNext());
        assertEquals(key(5), c.getKey());
        assertEquals(value("v52"), c.getValue());

        assertTrue(c.getNext());
        assertEquals(key(6), c.getKey());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: deleteImpl (Alternative Action: key=4 ) - Predicate: getSearchBoth - Scenario: c (Alternative Scenario: c=1 )

Project: xodus
 Class: BTreeCursorDupConcurrentModificationTest
 Method: testConcurrentDeleteCurrent
 Body: {
        Cursor c = tm.openCursor();
        final ByteIterable value = value("v51");
        assertTrue(c.getSearchBoth(key(5), value));
        deleteImpl(key(5), value);
        assertTrue(c.getNext());
        assertEquals(key(5), c.getKey());
        assertEquals(value("v52"), c.getValue());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: deleteImpl (Alternative Action: key=3 ) - Predicate: getSearchBoth - Scenario: c (Alternative Scenario: c=1 )

Project: xodus
 Class: LogLockingTests
 Method: testLockContents
 Body: {
        initLog(1);
        final DataWriter writer = log.getConfig().getWriter();
        closeLog();
        Assert.assertTrue(writer.lockInfo().contains("org.junit."));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: closeLog (Alternative Action: lockInfo=1 ) - Predicate: contains - Scenario: writer (Alternative Scenario: writer=1 )

Project: xodus
 Class: LogLockingTests
 Method: testLock
 Body: {
        initLog(1);
        File xdLockFile = new File(getLogDirectory(), "xd.lck");
        Assert.assertTrue(xdLockFile.exists());
        Assert.assertFalse(canWrite(xdLockFile));
        closeLog();
        Assert.assertTrue(canWrite(xdLockFile));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: initLog (Alternative Action: canWrite=2 ) - Predicate: exists - Scenario: xdLockFile (Alternative Scenario: xdLockFile=1 )

Project: xodus
 Class: EntityTests
 Method: testIntProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("size", 100);
        entity.setProperty("minus_size", -100);
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertEquals(100, entity.getProperty("size"));
        Assert.assertEquals(-100, entity.getProperty("minus_size"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getType=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testBooleanProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("ready", true);
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertTrue((Boolean) entity.getProperty("ready"));
        entity.setProperty("ready", false);
        txn.flush();
        sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertNotNull(entity.getProperty("ready"));
        Assert.assertEquals(false, entity.getProperty("ready"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getId=6 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testComparableSetRemove
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");

        final ComparableSet<String> subsystems = newComparableSet("Search Parser", "Agile Board");
        entity.setProperty("subsystems", subsystems);
        txn.flush();

        Comparable propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        ComparableSet<String> updateSet = (ComparableSet) propValue;
        updateSet.removeItem("Agile Board");
        Assert.assertTrue(updateSet.isDirty());
        entity.setProperty("subsystems", updateSet);
        txn.flush();

        propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        updateSet = (ComparableSet) propValue;
        Assert.assertFalse(updateSet.isEmpty());
        Assert.assertFalse(updateSet.isDirty());
        Assert.assertEquals(newComparableSet("Search Parser"), propValue);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: isDirty=2 ) - Predicate: N/A - Scenario: propValue (Alternative Scenario: updateSet=1 )

Project: xodus
 Class: EntityTests
 Method: testLongProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("length", 0x10000ffffL);
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertEquals(0x10000ffffL, entity.getProperty("length"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getType=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testHeterogeneousProperties
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "This is a test issue");
        entity.setProperty("size", 100);
        entity.setProperty("rank", 0.5);
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertEquals("This is a test issue", entity.getProperty("description"));
        Assert.assertEquals(100, entity.getProperty("size"));
        Assert.assertEquals(0.5, entity.getProperty("rank"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getProperty=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testOverwriteProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "This is a test issue");
        txn.flush();
        Assert.assertEquals("This is a test issue", entity.getProperty("description"));
        entity.setProperty("description", "This is overriden test issue");
        txn.flush();
        Assert.assertEquals("This is overriden test issue", entity.getProperty("description"));
        entity.deleteProperty("description"); // for XD-262 I optimized this to prohibit such stuff
        entity.setProperty("description", 100);
        txn.flush();
        Assert.assertEquals(100, entity.getProperty("description"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getProperty=3 ) - Predicate: getProperty - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testDeleteProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity issue = txn.newEntity("Issue");
        issue.setProperty("description", "This is a test issue");
        txn.flush();
        Assert.assertEquals("This is a test issue", issue.getProperty("description"));
        issue.deleteProperty("description");
        txn.flush();
        Assert.assertNull(issue.getProperty("description"));
        final EntityIterable issues = txn.find("Issue", "description", "This is a test issue");
        Assert.assertFalse(issues.iterator().hasNext());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getProperty=2 ) - Predicate: getProperty - Scenario: issue (Alternative Scenario: issue=1 )

Project: xodus
 Class: EntityTests
 Method: testConcurrentSerializableChanges
 Body: {
        final Entity e1 = getEntityStore().computeInTransaction(new StoreTransactionalComputable<Entity>() {
            @Override
            public Entity compute(@NotNull final StoreTransaction txn) {
                return txn.newEntity("E");
            }
        });
        final int count = 100;
        final Runnable target = new Runnable() {
            @Override
            public void run() {
                final StoreTransaction txn = getEntityStore().beginTransaction();
                try {
                    for (int i = 0; i <= count; ++i) {
                        do {
                            e1.setProperty("i", i);
                            e1.setProperty("s", Integer.toString(i));
                        } while (!txn.flush());
                    }
                } finally {
                    txn.abort();
                }
            }
        };
        final Thread t1 = new Thread(target);
        final Thread t2 = new Thread(target);
        t1.start();
        t2.start();
        t1.join();
        t2.join();
        getEntityStore().executeInReadonlyTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull final StoreTransaction txn) {
                Assert.assertEquals(count, e1.getProperty("i"));
                Assert.assertEquals(Integer.toString(count), e1.getProperty("s"));
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: start (Alternative Action: getEntityStore=3 ) - Predicate: N/A - Scenario: t2 (Alternative Scenario: count=1 )

Project: xodus
 Class: EntityTests
 Method: testCreateTwoEntitiesInTransaction
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity1 = txn.newEntity("Issue");
        final Entity entity2 = txn.newEntity("Issue");
        txn.flush();
        Assert.assertNotNull(entity1);
        Assert.assertTrue(entity1.getId().getTypeId() >= 0);
        Assert.assertTrue(entity1.getId().getLocalId() >= 0);
        Assert.assertNotNull(entity2);
        Assert.assertTrue(entity2.getId().getLocalId() > 0);
        Assert.assertTrue(entity2.getId().getLocalId() > entity1.getId().getLocalId());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getId=5 ) - Predicate: N/A - Scenario: entity2 (Alternative Scenario: entity1=1 )

Project: xodus
 Class: EntityTests
 Method: testDateProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        final Date date = new Date();
        entity.setProperty("date", date.getTime());
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        final Comparable dateProp = entity.getProperty("date");
        Assert.assertNotNull(dateProp);
        Assert.assertEquals(date.getTime(), dateProp);
        Assert.assertTrue(new Date().getTime() >= (Long) dateProp);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getType=3 ) - Predicate: getType - Scenario: date (Alternative Scenario: date=1 )

Project: xodus
 Class: EntityTests
 Method: testEntityStoreClear
 Body: {
        final PersistentEntityStoreImpl store = getEntityStore();
        final Entity user = store.computeInTransaction(new StoreTransactionalComputable<Entity>() {
            @Override
            public Entity compute(@NotNull StoreTransaction txn) {
                final Entity result = txn.newEntity("User");
                result.setProperty("login", "penemue");
                return result;
            }
        });
        store.executeInReadonlyTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                Assert.assertEquals("penemue", user.getProperty("login"));
            }
        });
        store.clear();
        store.executeInReadonlyTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                Assert.assertEquals(null, user.getProperty("login"));
            }
        });
        store.executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                txn.newEntity("UserProfile");
            }
        });
        store.executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                txn.getSequence("qwerty").increment();
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: clear (Alternative Action: getProperty=2 ) - Predicate: N/A - Scenario: store (Alternative Scenario: result=1 )

Project: xodus
 Class: EntityTests
 Method: testClearingProperties
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        final PersistentEntity issue = txn.newEntity("Issue");
        issue.setProperty("description", "This is a test issue");
        issue.setProperty("size", 0);
        issue.setProperty("rank", 0.5);
        txn.flush();
        Assert.assertNotNull(issue.getProperty("description"));
        Assert.assertNotNull(issue.getProperty("size"));
        Assert.assertNotNull(issue.getProperty("rank"));
        getEntityStore().clearProperties(txn, issue);
        txn.flush();
        Assert.assertNull(issue.getProperty("description"));
        Assert.assertNull(issue.getProperty("size"));
        Assert.assertNull(issue.getProperty("rank"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getProperty=6 ) - Predicate: getProperty - Scenario: issue (Alternative Scenario: issue=1 )

Project: xodus
 Class: EntityTests
 Method: testStringProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "This is a test issue");
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertEquals("This is a test issue", entity.getProperty("description"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getType=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testEntityIdToString
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        txn.flush();
        final String representation = entity.getId().toString();
        Assert.assertEquals(entity, txn.getEntity(txn.toEntityId(representation)));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: flush=1 ) - Predicate: getEntity - Scenario: representation (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testRawProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "it doesn't work");
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        ByteIterable rawValue = entity.getRawProperty("description");
        Assert.assertNotNull(rawValue);
        Assert.assertEquals("it doesn't work", getEntityStore().getPropertyTypes().entryToPropertyValue(rawValue).getData());
        entity.setProperty("description", "it works");
        txn.flush();
        sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        rawValue = entity.getRawProperty("description");
        Assert.assertNotNull(rawValue);
        Assert.assertEquals("it works", getEntityStore().getPropertyTypes().entryToPropertyValue(rawValue).getData());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getId=6 ) - Predicate: getType - Scenario: entity (Alternative Scenario: rawValue=1 )

Project: xodus
 Class: EntityTests
 Method: testDoubleProperty
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("hitRate", 0.123456789);
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
        Assert.assertEquals(0.123456789, entity.getProperty("hitRate"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getType=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testTxnCachesIsolation
 Body: {
        final Entity issue = getEntityStore().computeInTransaction(new StoreTransactionalComputable<Entity>() {
            @Override
            public Entity compute(@NotNull StoreTransaction txn) {
                final Entity issue = txn.newEntity("Issue");
                issue.setProperty("description", "1");
                return issue;
            }
        });
        final PersistentStoreTransaction txn = getStoreTransaction();
        txn.revert();
        Assert.assertEquals("1", issue.getProperty("description"));
        getEntityStore().executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                issue.setProperty("description", "2");
            }
        });
        txn.revert();
        Assert.assertEquals("2", issue.getProperty("description"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: revert (Alternative Action: getProperty=2 ) - Predicate: getProperty - Scenario: txn (Alternative Scenario: issue=2 )

Project: xodus
 Class: EntityTests
 Method: testComparableSetNew
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        final ComparableSet<String> subsystems = newComparableSet("Search Parser", "Agile Board", "Full Text Index", "REST API", "Workflow", "Agile Board");

        entity.setProperty("subsystems", subsystems);
        txn.flush();

        Comparable propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        ComparableSet<String> readSet = (ComparableSet) propValue;
        Assert.assertFalse(readSet.isEmpty());
        Assert.assertFalse(readSet.isDirty());
        Assert.assertEquals(subsystems, propValue);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: isDirty=1 ) - Predicate: N/A - Scenario: propValue (Alternative Scenario: readSet=1 )

Project: xodus
 Class: EntityTests
 Method: testComparableSetAddAll
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");

        entity.setProperty("subsystems", newComparableSet("Search Parser", "Agile Board"));
        txn.flush();

        entity.setProperty("subsystems", newComparableSet("Search Parser", "Agile Board", "Obsolete Subsystem"));
        txn.flush();

        Comparable propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        Assert.assertEquals(newComparableSet("Search Parser", "Agile Board", "Obsolete Subsystem"), propValue);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: newComparableSet=3 ) - Predicate: N/A - Scenario: propValue (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testConcurrentCreationTypeIdsAreOk
 Body: {
        final int count = 100;
        final boolean[] itsOk = {true};
        final Runnable target = new Runnable() {
            @Override
            public void run() {
                for (final int[] i = {0}; i[0] <= count; ++i[0]) {
                    if (!getEntityStore().computeInTransaction(new StoreTransactionalComputable<Boolean>() {
                        @Override
                        public Boolean compute(@NotNull StoreTransaction txn) {
                            final Entity e = txn.newEntity("Entity" + i[0]);
                            if (e.getId().getTypeId() != i[0]) {
                                itsOk[0] = false;
                                return false;
                            }
                            return true;
                        }
                    })) {
                        break;
                    }
                }
            }
        };
        final Thread t1 = new Thread(target);
        final Thread t2 = new Thread(target);
        t1.start();
        t2.start();
        t1.join();
        t2.join();
        Assert.assertTrue(itsOk[0]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: start (Alternative Action: start=2 ) - Predicate: N/A - Scenario: t2 (Alternative Scenario: e=1 )

Project: xodus
 Class: EntityTests
 Method: testTxnCachesIsolation2
 Body: {
        final Entity issue = getEntityStore().computeInTransaction(new StoreTransactionalComputable<Entity>() {
            @Override
            public Entity compute(@NotNull StoreTransaction txn) {
                final Entity issue = txn.newEntity("Issue");
                issue.setProperty("description", "1");
                return issue;
            }
        });
        final PersistentStoreTransaction txn = getStoreTransaction();
        txn.revert();
        Assert.assertEquals("1", issue.getProperty("description"));
        issue.setProperty("description", "2");
        getEntityStore().executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                issue.setProperty("description", "3");
            }
        });
        Assert.assertFalse(txn.flush());
        Assert.assertEquals("3", issue.getProperty("description"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: revert (Alternative Action: setProperty=3 ) - Predicate: getProperty - Scenario: txn (Alternative Scenario: issue=2 )

Project: xodus
 Class: EntityTests
 Method: testCreateAndGetSingleEntity
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        txn.flush();
        Assert.assertEquals("Issue", entity.getType());
        final Entity sameEntity = txn.getEntity(entity.getId());
        Assert.assertNotNull(sameEntity);
        Assert.assertEquals(entity.getType(), sameEntity.getType());
        Assert.assertEquals(entity.getId(), sameEntity.getId());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getType=3 ) - Predicate: getType - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testComparableSetClear
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");

        final ComparableSet<String> subsystems = newComparableSet("Search Parser", "Agile Board");
        entity.setProperty("subsystems", subsystems);
        txn.flush();

        entity.setProperty("subsystems", newComparableSet());
        txn.flush();

        Assert.assertNull(entity.getProperty("subsystems"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: flush=2 ) - Predicate: getProperty - Scenario: subsystems (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityTests
 Method: testCreateTwoEntitiesInTwoTransactions
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity1 = txn.newEntity("Issue");
        txn.flush();
        final Entity entity2 = txn.newEntity("Issue");
        txn.flush();
        Assert.assertNotNull(entity1);
        Assert.assertTrue(entity1.getId().getTypeId() >= 0);
        Assert.assertTrue(entity1.getId().getLocalId() >= 0);
        Assert.assertNotNull(entity2);
        Assert.assertTrue(entity2.getId().getLocalId() > 0);
        Assert.assertTrue(entity2.getId().getLocalId() > entity1.getId().getLocalId());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getId=5 ) - Predicate: N/A - Scenario: entity2 (Alternative Scenario: entity1=1 )

Project: xodus
 Class: EntityTests
 Method: testComparableSetAdd
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");

        final ComparableSet<String> subsystems = newComparableSet("Search Parser", "Agile Board");
        entity.setProperty("subsystems", subsystems);
        txn.flush();

        Comparable propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        ComparableSet<String> updateSet = (ComparableSet) propValue;
        updateSet.addItem("Obsolete Subsystem");
        Assert.assertTrue(updateSet.isDirty());
        entity.setProperty("subsystems", updateSet);
        txn.flush();

        propValue = entity.getProperty("subsystems");
        Assert.assertTrue(propValue instanceof ComparableSet);
        updateSet = (ComparableSet) propValue;
        Assert.assertFalse(updateSet.isEmpty());
        Assert.assertFalse(updateSet.isDirty());
        Assert.assertEquals(newComparableSet("Search Parser", "Agile Board", "Obsolete Subsystem"), propValue);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: isDirty=2 ) - Predicate: N/A - Scenario: propValue (Alternative Scenario: updateSet=1 )

Project: xodus
 Class: CompressBackupUtilTest
 Method: testFileArchived
 Body: {
        File src = new File(randName + ".txt");
        FileWriter fw = new FileWriter(src);
        fw.write("12345");
        fw.close();
        CompressBackupUtil.tar(src, dest);
        Assert.assertTrue("No destination archive created", dest.exists());
        TarArchiveInputStream tai = new TarArchiveInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(dest))));
        ArchiveEntry entry = tai.getNextEntry();
        Assert.assertNotNull("No entry found in destination archive", entry);
        Assert.assertEquals("Entry has wrong size", 5, entry.getSize());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: write (Alternative Action: getNextEntry=1 ) - Predicate: exists - Scenario: fw (Alternative Scenario: entry=1 )

Project: xodus
 Class: BTreeLeafNodeTest
 Method: testSet
 Body: {
        Set<INode> set = new HashSet<>();

        set.add(kv(1, "v11"));
        set.add(kv(1, "v12"));

        assertEquals(1, set.size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=2 ) - Predicate: size - Scenario: set (Alternative Scenario: set=1 )

Project: xodus
 Class: BTreeLeafNodeTest
 Method: testSet2
 Body: {
        Set<INode> set = new LinkedHashSet<>();

        set.add(kv(1, "v11"));
        set.add(kv(1, "v12"));

        assertEquals(1, set.size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=2 ) - Predicate: size - Scenario: set (Alternative Scenario: set=1 )

Project: xodus
 Class: BTreeDeleteSpecificTest
 Method: testGetNextEmpty
 Body: {
        BTreeMutable copy = new BTreeEmpty(log, true, 1).getMutableCopy();
        log.beginWrite();
        long address = copy.save();
        log.flush();
        log.endWrite();
        tm = new BTree(log, address, true, 1).getMutableCopy();
        assertTrue(tm.isEmpty());
        assertEquals(0, tm.getSize());
        assertFalse(tm.openCursor().getNext());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getMutableCopy=2 ) - Predicate: isEmpty - Scenario: address (Alternative Scenario: address=1 )

Project: xodus
 Class: GarbageCollectorTestPrefixing
 Method: reclaimTreeWithRootInLastFile
 Body: {
        set1KbFileWithoutGC();
        final Log log = env.getLog();
        final long startAddress = createStore("store", 100);
        Assert.assertEquals(2, log.getNumberOfFiles());
        createStore("corrupted", 160);
        Assert.assertEquals(4, log.getNumberOfFiles());
        final long fileAddress = 2 * log.getFileLengthBound();
        log.forgetFile(fileAddress);
        log.removeFile(fileAddress);
        final StoreImpl store = openStoreAutoCommit("store");
        final Iterator<RandomAccessLoggable> itr = log.getLoggableIterator(startAddress);
        final TransactionBase txn = env.beginTransaction();
        Assert.assertTrue(txn.getTree(store).getMutableCopy().reclaim(itr.next(), itr));
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: set1KbFileWithoutGC (Alternative Action: getNumberOfFiles=2 ) - Predicate: getNumberOfFiles - Scenario: log (Alternative Scenario: log=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRead3
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.writeFile(txn, file0);
        outputStream.write(0);
        outputStream.close();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(0, inputStream.read());
        inputStream.close();
        txn.commit();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: close (Alternative Action: close=2 ) - Predicate: read - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRead2
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write(HOEGAARDEN.getBytes(UTF_8));
        outputStream.close();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        txn.commit();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: close (Alternative Action: close=2 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: testWriteAndSeek3
 Body: {
        Transaction txn = env.beginTransaction();
        vfs.getConfig().setClusteringStrategy(new ClusteringStrategy.LinearClusteringStrategy(8));
        final File file = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.writeFile(txn, file);
        final byte[] bytes = HOEGAARDEN.getBytes(UTF_8);
        outputStream.write(bytes);
        outputStream.close();
        outputStream = vfs.appendFile(txn, file);
        outputStream.write(bytes);
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN, streamAsString(inputStream));
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=2 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: file=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRead
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write(HOEGAARDEN.getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=2 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRandomAccessOverwriteRead
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write((HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        Assert.assertEquals(40, vfs.getFileLength(txn, file0));
        outputStream = vfs.writeFile(txn, file0, 0);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        Assert.assertEquals(40, vfs.getFileLength(txn, file0));
        outputStream = vfs.writeFile(txn, file0, 10);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        Assert.assertEquals(40, vfs.getFileLength(txn, file0));
        outputStream = vfs.writeFile(txn, file0, 20);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        Assert.assertEquals(40, vfs.getFileLength(txn, file0));
        outputStream = vfs.writeFile(txn, file0, 30);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        Assert.assertEquals(40, vfs.getFileLength(txn, file0));
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals('x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1) + 'x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1), streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: write (Alternative Action: close=6 ) - Predicate: getFileLength - Scenario: outputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: testWriteAndSeek2
 Body: {
        Transaction txn = env.beginTransaction();
        vfs.getConfig().setClusteringStrategy(new ClusteringStrategy.LinearClusteringStrategy(8));
        final File file = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.writeFile(txn, file);
        final byte[] bytes = HOEGAARDEN.getBytes(UTF_8);
        outputStream.write(bytes);
        outputStream.close();
        outputStream = vfs.writeFile(txn, file, bytes.length);
        outputStream.write(bytes);
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN, streamAsString(inputStream));
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=2 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: file=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeReadTrivial
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.writeFile(txn, file0);
        outputStream.close();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(-1, inputStream.read());
        inputStream.close();
        txn.commit();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: close (Alternative Action: close=2 ) - Predicate: read - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeOverwriteAppendRead
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write((HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        outputStream = vfs.writeFile(txn, file0);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        outputStream = vfs.appendFile(txn, file0);
        outputStream.write(HOEGAARDEN.getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals('x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1) + 'x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1) + HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: write=10 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: testTimeFieldsOfFiles
 Body: {
        final long start = System.currentTimeMillis();
        Thread.sleep(20);
        final Transaction txn = env.beginTransaction();
        File file0 = vfs.createFile(txn, "file0");
        txn.flush();
        Thread.sleep(20);
        final OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write(RENAT_GILFANOV.getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        file0 = vfs.openFile(txn, "file0", false);
        Assert.assertNotNull(file0);
        Assert.assertTrue(file0.getCreated() > start);
        Assert.assertTrue(file0.getCreated() < file0.getLastModified());
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: write (Alternative Action: sleep=2 ) - Predicate: N/A - Scenario: outputStream (Alternative Scenario: start=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeOverwriteRead
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write(HOEGAARDEN.getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        outputStream = vfs.writeFile(txn, file0);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals('x' + HOEGAARDEN.substring(1), streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=3 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeOverwriteRead2
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write((HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        outputStream = vfs.writeFile(txn, file0);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.write("x".getBytes(UTF_8));
        outputStream.write(HOEGAARDEN.substring(1).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals('x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1) + 'x' + HOEGAARDEN.substring(1) +
            'x' + HOEGAARDEN.substring(1), streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: write=9 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRandomAccessOverwriteRead2
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write((HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        outputStream = vfs.writeFile(txn, file0, 1000000);
        outputStream.write("x".getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + 'x', streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=3 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRead5
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.writeFile(txn, file0);
        final int count = 0x10000;
        outputStream.write(new byte[count]);
        outputStream.close();
        final InputStream inputStream = vfs.readFile(txn, file0);
        Assert.assertEquals(count, inputStream.read(new byte[100000], 0, 100000));
        Assert.assertEquals(-1, inputStream.read());
        inputStream.close();
        txn.commit();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: close (Alternative Action: read=2 ) - Predicate: read - Scenario: inputStream (Alternative Scenario: count=1 )

Project: xodus
 Class: VfsStreamsTests
 Method: writeRandomAccessRead
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        final OutputStream outputStream = vfs.appendFile(txn, file0);
        outputStream.write((HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN).getBytes(UTF_8));
        outputStream.close();
        txn.flush();
        InputStream inputStream = vfs.readFile(txn, file0, 0);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN + HOEGAARDEN + HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        inputStream = vfs.readFile(txn, file0, 10);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN + HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        inputStream = vfs.readFile(txn, file0, 20);
        Assert.assertEquals(HOEGAARDEN + HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        inputStream = vfs.readFile(txn, file0, 30);
        Assert.assertEquals(HOEGAARDEN, streamAsString(inputStream));
        inputStream.close();
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: close=5 ) - Predicate: streamAsString - Scenario: inputStream (Alternative Scenario: inputStream=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectManyDistinct
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 10);
        txn.newEntity("Issue").addLink("assignee", txn.newEntity("User"));
        final Entity user = txn.newEntity("User");
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue").addLink("assignee", user);
        txn.flush();
        Assert.assertEquals(2, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: newEntity=5 ) - Predicate: N/A - Scenario: user (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectManyDistinct3
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 10);
        txn.newEntity("Issue").addLink("assignee", txn.newEntity("User"));
        final Entity user1 = txn.newEntity("User");
        final Entity user2 = txn.newEntity("User");
        final Entity issue1 = txn.newEntity("Issue");
        issue1.addLink("assignee", user1);
        issue1.addLink("assignee", user2);
        issue1.addLink("assignee", txn.newEntity("User"));
        final Entity issue2 = txn.newEntity("Issue");
        issue2.addLink("assignee", user1);
        issue2.addLink("assignee", user2);
        txn.newEntity("Issue");
        txn.flush();
        Assert.assertEquals(5, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: newEntity=8 ) - Predicate: N/A - Scenario: issue2 (Alternative Scenario: user1=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testEntityIterableCacheIsInvalidatedOnStoreClear
 Body: {
        final PersistentEntityStoreImpl entityStore = getEntityStore();
        entityStore.executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                createNUsers(txn, 10);
            }
        });
        entityStore.executeInReadonlyTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                Assert.assertEquals(9, txn.getAll("User").indexOf(new PersistentEntity(entityStore, new PersistentEntityId(0, 9))));
            }
        });
        entityStore.clear();
        entityStore.executeInTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                createNUsers(txn, 1);
            }
        });
        entityStore.executeInReadonlyTransaction(new StoreTransactionalExecutable() {
            @Override
            public void execute(@NotNull StoreTransaction txn) {
                Assert.assertEquals(-1, txn.getAll("User").indexOf(new PersistentEntity(entityStore, new PersistentEntityId(0, 9))));
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: executeInTransaction (Alternative Action: getAll=2 ) - Predicate: N/A - Scenario: entityStore (Alternative Scenario: entityStore=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testFindLinksSingular
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 1);
        final PersistentEntity issue = txn.newEntity("Issue");
        issue.addLink("author", txn.find("User", "login", "user0").getFirst());
        txn.flush();
        Assert.assertEquals(0L, EntityIterableBase.EMPTY.findLinks(txn.getAll("User"), "author").size());
        Assert.assertEquals(0L, ((EntityIterableBase) txn.getAll("Issue")).findLinks(EntityIterableBase.EMPTY, "author").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: findLinks=2 ) - Predicate: size - Scenario: issue (Alternative Scenario: issue=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectDistinctFromEmptySequence
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        txn.newEntity("Issue");
        txn.newEntity("User");
        txn.flush();
        Assert.assertEquals(0, (int) txn.getAll("Issue").intersect(txn.getAll("User")).selectDistinct("unknown_link").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: newEntity (Alternative Action: getAll=2 ) - Predicate: N/A - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testCachedInstanceIsEmpty
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        final int count = 10;
        createNUsers(txn, count);
        txn.flush();
        final PersistentEntityStoreImpl store = getEntityStore();
        Assert.assertEquals(0, txn.getAll("User").indexOf(new PersistentEntity(store, new PersistentEntityId(0, 0))));
        final EntityIterableBase cachedInstance =
            store.getEntityIterableCache().putIfNotCached((EntityIterableBase) txn.getAll("User"));
        Assert.assertFalse(cachedInstance.isEmpty());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getAll=2 ) - Predicate: indexOf - Scenario: store (Alternative Scenario: count=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectManyDistinctFromEmptySequence
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        txn.newEntity("Issue");
        txn.newEntity("User");
        txn.flush();
        Assert.assertEquals(0, (int) txn.getAll("Issue").intersect(txn.getAll("User")).selectManyDistinct("unknown_link").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: newEntity (Alternative Action: getAll=2 ) - Predicate: N/A - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testGetLastOfGetAll
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        final int count = 100000;
        createNUsers(txn, count);
        txn.flush();
        final long started = System.currentTimeMillis();
        final Entity lastUser = txn.getAll("User").getLast();
        System.out.println(System.currentTimeMillis() - started);
        Assert.assertNotNull(lastUser);
        Assert.assertEquals("user" + (count - 1), lastUser.getProperty("login"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: println (Alternative Action: currentTimeMillis=2 ) - Predicate: N/A - Scenario: lastUser (Alternative Scenario: lastUser=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectManyDistinct2
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 10);
        txn.newEntity("Issue").addLink("assignee", txn.newEntity("User"));
        final Entity user1 = txn.newEntity("User");
        final Entity user2 = txn.newEntity("User");
        final Entity issue1 = txn.newEntity("Issue");
        issue1.addLink("assignee", user1);
        issue1.addLink("assignee", user2);
        issue1.addLink("assignee", txn.newEntity("User"));
        final Entity issue2 = txn.newEntity("Issue");
        issue2.addLink("assignee", user1);
        issue2.addLink("assignee", user2);
        txn.flush();
        Assert.assertEquals(4, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: newEntity=7 ) - Predicate: N/A - Scenario: issue2 (Alternative Scenario: user1=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectDistinct2
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        txn.newEntity("Issue").addLink("assignee", txn.newEntity("User"));
        final Entity user = txn.newEntity("User");
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue");
        txn.flush();
        Assert.assertEquals(3, (int) txn.getAll("Issue").selectDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: newEntity=6 ) - Predicate: N/A - Scenario: user (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectDistinct
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        txn.newEntity("Issue").addLink("assignee", txn.newEntity("User"));
        final Entity user = txn.newEntity("User");
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue").addLink("assignee", user);
        txn.flush();
        Assert.assertEquals(2, (int) txn.getAll("Issue").selectDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLink (Alternative Action: newEntity=5 ) - Predicate: N/A - Scenario: user (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSingularGetAll
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("name", "noname");
        txn.flush();
        Assert.assertEquals(0, (int) txn.getAll("Comment").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: getAll=1 ) - Predicate: N/A - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectDistinctSingular
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        txn.newEntity("Issue");
        txn.flush();
        Assert.assertEquals(1, (int) txn.getAll("Issue").size());
        Assert.assertEquals(1, (int) txn.getAll("Issue").selectDistinct("assignee").size());
        final Entity user = txn.newEntity("User");
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue").addLink("assignee", user);
        txn.flush();
        Assert.assertEquals(3, (int) txn.getAll("Issue").size());
        Assert.assertEquals(2, (int) txn.getAll("Issue").selectDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: newEntity (Alternative Action: getAll=4 ) - Predicate: N/A - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testFindMultipleLinks
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 10);
        final PersistentEntity issue1 = txn.newEntity("Issue");
        issue1.addLink("author", txn.find("User", "login", "user0").getFirst());
        final Entity user1 = txn.find("User", "login", "user1").getFirst();
        issue1.addLink("author", user1);
        final PersistentEntity issue2 = txn.newEntity("Issue");
        issue2.addLink("author", txn.find("User", "login", "user2").getFirst());
        final Entity user3 = txn.find("User", "login", "user3").getFirst();
        issue2.addLink("author", user3);
        final PersistentEntity issue3 = txn.newEntity("Issue");
        txn.flush();
        assertEquals(2, ((EntityIterableBase) txn.getAll("Issue")).findLinks(
            txn.getSingletonIterable(user1).union(txn.getSingletonIterable(user3)), "author").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: find=4 ) - Predicate: size - Scenario: issue3 (Alternative Scenario: user1=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testSelectManyDistinctSingular
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        createNUsers(txn, 10);
        txn.newEntity("Issue");
        txn.flush();
        Assert.assertEquals(0, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
        getEntityStore().getLinkId(txn, "assignee", true);
        txn.flush();
        Assert.assertEquals(1, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
        final Entity user = txn.newEntity("User");
        txn.newEntity("Issue").addLink("assignee", user);
        txn.newEntity("Issue").addLink("assignee", user);
        txn.flush();
        Assert.assertEquals(2, (int) txn.getAll("Issue").selectManyDistinct("assignee").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: createNUsers (Alternative Action: newEntity=4 ) - Predicate: N/A - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: EntityIterableTests
 Method: testFindWithPropSortedCount
 Body: {
        final PersistentStoreTransaction txn = getStoreTransaction();
        Assert.assertEquals(0, txn.findWithPropSortedByValue("User", "login").countImpl(txn));
        final int count = 10;
        createNUsers(txn, count);
        txn.flush();
        Assert.assertEquals(count, txn.findWithPropSortedByValue("User", "login").countImpl(txn));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: createNUsers (Alternative Action: countImpl=2 ) - Predicate: countImpl - Scenario: txn (Alternative Scenario: count=1 )

Project: xodus
 Class: LatchTest
 Method: test3
 Body: {
        final Latch b = Latch.create();
        final boolean[] testPassed = {false};

        b.acquire();

        new Thread() {
            @Override
            public void run() {
                try {
                    b.acquire();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    e.printStackTrace();
                }
                testPassed[0] = true;
            }
        }.start();

        Thread.sleep(1000);

        Assert.assertEquals(false, testPassed[0]);

        b.release();

        Thread.sleep(1000);

        Assert.assertEquals(true, testPassed[0]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: acquire (Alternative Action: sleep=2 ) - Predicate: N/A - Scenario: testPassed (Alternative Scenario: b=1 )

Project: xodus
 Class: GarbageCollectorInterleavingTestPrefixing
 Method: testSimple
 Body: {
        set1KbFileWithoutGC();

        final Log log = env.getLog();
        final long fileSize = log.getFileLengthBound();

        fill("updateSameKey");
        Assert.assertEquals(1L, log.getNumberOfFiles());
        fill("updateSameKey");

        Assert.assertEquals(2L, log.getNumberOfFiles()); // but ends in second one

        fill("another");

        Assert.assertEquals(3L, log.getNumberOfFiles()); // make cleaning of second file possible

        env.getGC().doCleanFile(fileSize); // clean second file

        Thread.sleep(300);
        env.getGC().testDeletePendingFiles();

        Assert.assertEquals(3L, log.getNumberOfFiles()); // half of tree written out from second file

        env.getGC().doCleanFile(0); // clean first file

        Thread.sleep(300);
        env.getGC().testDeletePendingFiles();

        Assert.assertEquals(2L, log.getNumberOfFiles()); // first file contained only garbage

        check("updateSameKey");
        check("another");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: fill (Alternative Action: getNumberOfFiles=5 ) - Predicate: getNumberOfFiles - Scenario: fileSize (Alternative Scenario: fileSize=1 )

Project: xodus
 Class: GarbageCollectorTest
 Method: reclaimTreeWithRootInLastFile
 Body: {
        set1KbFileWithoutGC();
        final Log log = env.getLog();
        final long startAddress = createStore("store", 100);
        Assert.assertEquals(2, log.getNumberOfFiles());
        createStore("corrupted", 160);
        Assert.assertEquals(4, log.getNumberOfFiles());
        final long fileAddress = 2 * log.getFileLengthBound();
        log.forgetFile(fileAddress);
        log.removeFile(fileAddress);
        final StoreImpl store = openStoreAutoCommit("store");
        final Iterator<RandomAccessLoggable> itr = log.getLoggableIterator(startAddress);
        final TransactionBase txn = env.beginTransaction();
        Assert.assertTrue(txn.getTree(store).getMutableCopy().reclaim(itr.next(), itr));
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: set1KbFileWithoutGC (Alternative Action: getNumberOfFiles=2 ) - Predicate: getNumberOfFiles - Scenario: log (Alternative Scenario: log=1 )

Project: xodus
 Class: FindTests
 Method: testFindWithProp
 Body: {
        testFindSingleEntityByPropertyValue();
        final StoreTransaction txn = getStoreTransaction();
        Assert.assertEquals(100, txn.findWithProp("Issue", "description").size());
        Assert.assertEquals(100, txn.findWithProp("Issue", "size").size());
        Assert.assertEquals(0, txn.findWithProp("Issue", "no such property").size());
        Assert.assertEquals(0, txn.findWithProp("No such type", "size").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testFindSingleEntityByPropertyValue (Alternative Action: size=4 ) - Predicate: size - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testFindComparableSetCaseInsensitive
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity issue = txn.newEntity("Issue");
        final ComparableSet<String> set = new ComparableSet<>();
        set.addItem("Eugene");
        set.addItem("MAX");
        set.addItem("SlaVa");
        set.addItem("Pavel");
        set.addItem("AnnA");

        issue.setProperty("commenters", set);
        txn.flush();

        Assert.assertEquals(issue, txn.find("Issue", "commenters", "eugene").getFirst());
        Assert.assertEquals(issue, txn.find("Issue", "commenters", "Max").getFirst());
        Assert.assertEquals(issue, txn.find("Issue", "commenters", "slaVa").getFirst());
        Assert.assertEquals(issue, txn.findStartingWith("Issue", "commenters", "Pav").getFirst());
        Assert.assertEquals(issue, txn.findStartingWith("Issue", "commenters", "ann").getFirst());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addItem (Alternative Action: addItem=5 ) - Predicate: getFirst - Scenario: set (Alternative Scenario: set=1 )

Project: xodus
 Class: FindTests
 Method: testFindWithPropSorted
 Body: {
        testFindSingleEntityByPropertyValue();
        final PersistentStoreTransaction txn = getStoreTransaction();
        Assert.assertEquals(100, txn.findWithPropSortedByValue("Issue", "description").size());
        final PersistentEntity nonExistent = new PersistentEntity(getEntityStore(), new PersistentEntityId(111, 0));
        Assert.assertEquals(-1, txn.findWithPropSortedByValue("Issue", "description").indexOf(nonExistent));
        Assert.assertEquals(100, txn.findWithPropSortedByValue("Issue", "size").size());
        Assert.assertEquals(0, txn.findWithPropSortedByValue("Issue", "no such property").size());
        Assert.assertEquals(0, txn.findWithPropSortedByValue("No such type", "size").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testFindSingleEntityByPropertyValue (Alternative Action: findWithPropSortedByValue=5 ) - Predicate: size - Scenario: txn (Alternative Scenario: nonExistent=1 )

Project: xodus
 Class: FindTests
 Method: testFindRangeByStringsIgnoreCase
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "aaa");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "bbb");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "ccc");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "dddd");
        txn.flush();
        Assert.assertEquals(4, (int) txn.find("Issue", "description", "a", "E").size());
        Assert.assertEquals(3, (int) txn.find("Issue", "description", "B", "e").size());
        Assert.assertEquals(3, (int) txn.find("Issue", "description", "a", "D").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "A", "c").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "B", "D").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "C", "E").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "A", "B").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "D", "E").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "description", "a", "A").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: size=9 ) - Predicate: N/A - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testFindWithFloatProp
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity issue1 = txn.newEntity("Issue");
        issue1.setProperty("thefloat", 12f);
        final Entity issue2 = txn.newEntity("Issue");
        issue2.setProperty("thefloat", 10f);
        EntityIterator itr = ((PersistentStoreTransaction) txn).findWithPropSortedByValue("Issue", "thefloat").iterator();
        assertTrue(itr.hasNext());
        assertEquals(issue2, itr.next());
        assertTrue(itr.hasNext());
        assertEquals(issue1, itr.next());
        assertFalse(itr.hasNext());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: hasNext=3 ) - Predicate: hasNext - Scenario: itr (Alternative Scenario: itr=1 )

Project: xodus
 Class: FindTests
 Method: testFindRangeByStrings
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "aaa");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "bbb");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "ccc");
        entity = txn.newEntity("Issue");
        entity.setProperty("description", "dddd");
        txn.flush();
        Assert.assertEquals(4, (int) txn.find("Issue", "description", "a", "e").size());
        Assert.assertEquals(3, (int) txn.find("Issue", "description", "b", "e").size());
        Assert.assertEquals(3, (int) txn.find("Issue", "description", "a", "d").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "a", "c").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "b", "d").size());
        Assert.assertEquals(2, (int) txn.find("Issue", "description", "c", "e").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "a", "b").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "d", "e").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "description", "a", "a").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: size=9 ) - Predicate: N/A - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testFindWithPropSortedIsCached
 Body: {
        getEntityStore().getConfig().setCachingDisabled(false);
        testFindWithPropSorted();
        final PersistentStoreTransaction txn = getStoreTransaction();
        Assert.assertTrue(((EntityIteratorBase) txn.findWithPropSortedByValue("Issue", "description").iterator()).getIterable().isCachedInstance());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testFindWithPropSorted (Alternative Action: iterator=1 ) - Predicate: isCachedInstance - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testFindWithPropIsCached
 Body: {
        getEntityStore().getConfig().setCachingDisabled(false);
        testFindWithProp();
        final StoreTransaction txn = getStoreTransaction();
        Assert.assertTrue(((EntityIteratorBase) txn.findWithProp("Issue", "description").iterator()).getIterable().isCachedInstance());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testFindWithProp (Alternative Action: iterator=1 ) - Predicate: isCachedInstance - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testSingularFind
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity entity = txn.newEntity("Issue");
        entity.setProperty("name", "noname");
        entity.setProperty("size", 6);
        txn.flush();
        Assert.assertEquals(0, (int) txn.find("Issue", "name", "thename").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "name", 6).size());
        Assert.assertEquals(0, (int) txn.find("Issue", "size", "wtf").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "description", "Test Issue").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: size=4 ) - Predicate: N/A - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testSuccessiveInvalidationAndUpdateCachedResult
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        final Entity issue = txn.newEntity("Issue");
        issue.setProperty("summary", "summary");
        Assert.assertEquals(1L, txn.findStartingWith("Issue", "summary", "summary").size());
        issue.setProperty("summary", "no summary");
        Assert.assertEquals(0L, txn.findStartingWith("Issue", "summary", "summary").size());
        issue.setProperty("summary", "summary");
        Assert.assertEquals(1L, txn.findStartingWith("Issue", "summary", "summary").size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: findStartingWith=3 ) - Predicate: size - Scenario: issue (Alternative Scenario: issue=1 )

Project: xodus
 Class: FindTests
 Method: testSingularFindRangeByStrings
 Body: {
        final StoreTransaction txn = getStoreTransaction();
        Entity entity = txn.newEntity("Issue");
        entity.setProperty("description", "a");
        txn.flush();
        Assert.assertEquals(0, (int) txn.find("Issue", "description", "e", "a").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "a", "a").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "description", "E", "A").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "A", "A").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "a", "A").size());
        Assert.assertEquals(1, (int) txn.find("Issue", "description", "A", "a").size());
        Assert.assertEquals(0, (int) txn.find("Issue", "size", Integer.MIN_VALUE, Integer.MAX_VALUE).size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setProperty (Alternative Action: size=7 ) - Predicate: N/A - Scenario: entity (Alternative Scenario: txn=1 )

Project: xodus
 Class: FindTests
 Method: testComparableSetPropertiesIterable
 Body: {
        getEntityStore().getConfig().setCachingDisabled(true); // disable caching to avoid background exceptions
        testFindComparableSetCaseInsensitive();
        final PersistentStoreTransaction txn = getStoreTransaction();
        Assert.assertTrue(txn.findWithPropSortedByValue("Issue", "commenters").iterator().hasNext());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testFindComparableSetCaseInsensitive (Alternative Action: iterator=1 ) - Predicate: hasNext - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: GarbageCollectorInterleavingTest
 Method: testSimple
 Body: {
        set1KbFileWithoutGC();

        final Log log = env.getLog();
        final long fileSize = log.getFileLengthBound();

        fill("updateSameKey");
        Assert.assertEquals(1L, log.getNumberOfFiles());
        fill("updateSameKey");

        Assert.assertEquals(2L, log.getNumberOfFiles()); // but ends in second one

        fill("another");

        Assert.assertEquals(3L, log.getNumberOfFiles()); // make cleaning of second file possible

        env.getGC().doCleanFile(fileSize); // clean second file

        Thread.sleep(300);
        env.getGC().testDeletePendingFiles();

        Assert.assertEquals(3L, log.getNumberOfFiles()); // half of tree written out from second file

        env.getGC().doCleanFile(0); // clean first file

        Thread.sleep(300);
        env.getGC().testDeletePendingFiles();

        Assert.assertEquals(2L, log.getNumberOfFiles()); // first file contained only garbage

        check("updateSameKey");
        check("another");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: fill (Alternative Action: getNumberOfFiles=5 ) - Predicate: getNumberOfFiles - Scenario: fileSize (Alternative Scenario: fileSize=1 )

Project: xodus
 Class: LogTests
 Method: testSetHighAddress_XD_317
 Body: {
        getLog().beginWrite();
        getLog().write(DUMMY_LOGGABLE);
        getLog().setHighAddress(getLog().endWrite(), 0);
        Assert.assertFalse(getLog().getLoggableIterator(0).hasNext());
        getLog().beginWrite();
        getLog().write(NullLoggable.create());
        getLog().endWrite();
        final Iterator<RandomAccessLoggable> it = getLog().getLoggableIterator(0);
        Assert.assertTrue(it.hasNext());
        Assert.assertTrue(NullLoggable.isNullLoggable(it.next()));
        Assert.assertFalse(it.hasNext());
        Assert.assertNull(it.next());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: beginWrite (Alternative Action: getLog=9 ) - Predicate: hasNext - Scenario: it (Alternative Scenario: it=1 )

Project: xodus
 Class: BTreeDuplicatesExpiredAddressesTest
 Method: testDeleteDup
 Body: {
        tm = new BTreeEmpty(log, true, 1).getMutableCopy();
        getTreeMutable().put(kv(0, "v0"));
        getTreeMutable().put(kv(0, "v1"));
        long address = saveTree();

        //Expired: none
        checkExpiredAddress(tm, 0);

        saveTree();

        t = new BTree(log, address, true, 1);
        tm = getTree().getMutableCopy();
        //Expired: root
        checkExpiredAddress(tm, 1);
        Assert.assertFalse(getTreeMutable().delete(key(0), value("v2")));
        saveTree();
        //Expired: still root
        checkExpiredAddress(tm, 1);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: checkExpiredAddress (Alternative Action: checkExpiredAddress=3 ) - Predicate: delete - Scenario: address (Alternative Scenario: address=1 )

Project: xodus
 Class: GarbageCollectorTestInMemory
 Method: reclaimTreeWithRootInLastFile
 Body: {
        set1KbFileWithoutGC();
        final Log log = env.getLog();
        final long startAddress = createStore("store", 100);
        Assert.assertEquals(2, log.getNumberOfFiles());
        createStore("corrupted", 160);
        Assert.assertEquals(4, log.getNumberOfFiles());
        final long fileAddress = 2 * log.getFileLengthBound();
        log.forgetFile(fileAddress);
        log.removeFile(fileAddress);
        final StoreImpl store = openStoreAutoCommit("store");
        final Iterator<RandomAccessLoggable> itr = log.getLoggableIterator(startAddress);
        final TransactionBase txn = env.beginTransaction();
        Assert.assertTrue(txn.getTree(store).getMutableCopy().reclaim(itr.next(), itr));
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: set1KbFileWithoutGC (Alternative Action: getNumberOfFiles=2 ) - Predicate: getNumberOfFiles - Scenario: log (Alternative Scenario: log=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: testSetHighAddress
 Body: {
        final Store store = openStoreAutoCommit("new_store", StoreConfig.WITHOUT_DUPLICATES);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                store.put(txn, StringBinding.stringToEntry("key"), StringBinding.stringToEntry("value1"));
            }
        });
        final long highAddress = env.getLog().getHighAddress();
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                store.put(txn, StringBinding.stringToEntry("key"), StringBinding.stringToEntry("value2"));
            }
        });
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                Assert.assertEquals(StringBinding.stringToEntry("value2"), store.get(txn, StringBinding.stringToEntry("key")));
            }
        });
        env.setHighAddress(highAddress);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                Assert.assertEquals(StringBinding.stringToEntry("value1"), store.get(txn, StringBinding.stringToEntry("key")));
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: executeInTransaction (Alternative Action: stringToEntry=8 ) - Predicate: N/A - Scenario: highAddress (Alternative Scenario: highAddress=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: readCloseRace
 Body: {
        final Store store = openStoreAutoCommit("new_store", StoreConfig.WITHOUT_DUPLICATES);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                for (int i = 0; i < 10000; ++i) {
                    store.put(txn, IntegerBinding.intToEntry(i), StringBinding.stringToEntry(Integer.toString(i)));
                }
            }
        });
        env.getEnvironmentConfig().setEnvCloseForcedly(true);
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                try (Cursor cursor = store.openCursor(txn)) {
                    final Latch latch = Latch.create();
                    try {
                        latch.acquire();
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                env.close();
                                latch.release();
                            }
                        }).run();
                        latch.acquire();
                    } catch (InterruptedException ignore) {
                    }
                    while (cursor.getNext()) {
                        assertNotNull(cursor.getKey());
                        assertNotNull(cursor.getValue());
                    }
                }
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: executeInTransaction (Alternative Action: acquire=2 ) - Predicate: N/A - Scenario: store (Alternative Scenario: cursor=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: issueXD_590_reported
 Body: {
        // 1) open store
        final Store store = env.computeInTransaction(new TransactionalComputable<Store>() {
            @Override
            public Store compute(@NotNull final Transaction txn) {
                return env.openStore("store", StoreConfig.WITHOUT_DUPLICATES, txn);
            }
        });
        // 2) store(put) a key 1 , value A1
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                store.put(txn, StringBinding.stringToEntry("key1"), StringBinding.stringToEntry("A1"));
            }
        });
        // 3) using second transaction : store(put) key 2 value A2,  update key 1 with B1. inside transaction reload ke1 (value=B1 OK)
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                store.put(txn, StringBinding.stringToEntry("key2"), StringBinding.stringToEntry("A2"));
                store.put(txn, StringBinding.stringToEntry("key1"), StringBinding.stringToEntry("B1"));
                final ByteIterable value1 = store.get(txn, StringBinding.stringToEntry("key1"));
                assertNotNull(value1);
                Assert.assertEquals("B1", StringBinding.entryToString(value1));
            }
        });
        // 4) using third transaction : reload key 1 , value is A1 !=B1   !!!!! Error.
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                final ByteIterable value1 = store.get(txn, StringBinding.stringToEntry("key1"));
                assertNotNull(value1);
                Assert.assertEquals("B1", StringBinding.entryToString(value1));
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: executeInTransaction (Alternative Action: stringToEntry=8 ) - Predicate: N/A - Scenario: store (Alternative Scenario: value1=2 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: leakingEnvironment
 Body: {
        cleanSubfolders();
        super.tearDown();
        final WeakReference<Environment> envRef = new WeakReference<Environment>(createAndCloseEnvironment());
        waitForPendingFinalizers(10000);
        Assert.assertNull(envRef.get());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: waitForPendingFinalizers (Alternative Action: createAndCloseEnvironment=1 ) - Predicate: get - Scenario: envRef (Alternative Scenario: envRef=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: testStatisticsItemNames
 Body: {
        testStatisticsTransactions();
        final EnvironmentStatistics statistics = env.getStatistics();
        assertNotNull(statistics.getStatisticsItem(BYTES_WRITTEN));
        assertNotNull(statistics.getStatisticsItem(BYTES_READ));
        assertNotNull(statistics.getStatisticsItem(BYTES_MOVED_BY_GC));
        assertNotNull(statistics.getStatisticsItem(TRANSACTIONS));
        assertNotNull(statistics.getStatisticsItem(READONLY_TRANSACTIONS));
        assertNotNull(statistics.getStatisticsItem(ACTIVE_TRANSACTIONS));
        assertNotNull(statistics.getStatisticsItem(FLUSHED_TRANSACTIONS));
        assertNotNull(statistics.getStatisticsItem(DISK_USAGE));
        assertNotNull(statistics.getStatisticsItem(UTILIZATION_PERCENT));
        assertNotNull(statistics.getStatisticsItem(LOG_CACHE_HIT_RATE));
        assertNotNull(statistics.getStatisticsItem(STORE_GET_CACHE_HIT_RATE));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testStatisticsTransactions (Alternative Action: getStatisticsItem=11 ) - Predicate: getStatisticsItem - Scenario: statistics (Alternative Scenario: statistics=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: testStatisticsTransactions
 Body: {
        testCreateSingleStore();
        final EnvironmentStatistics statistics = env.getStatistics();
        assertTrue(statistics.getStatisticsItem(TRANSACTIONS).getTotal() > 0L);
        assertTrue(statistics.getStatisticsItem(FLUSHED_TRANSACTIONS).getTotal() > 0L);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: testCreateSingleStore (Alternative Action: getStatisticsItem=2 ) - Predicate: N/A - Scenario: statistics (Alternative Scenario: statistics=1 )

Project: xodus
 Class: EnvironmentTestInMemory
 Method: testClearWithTransaction_XD_457
 Body: {
        final Latch latch = Latch.create();
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                final StoreImpl store = env.openStore("store", StoreConfig.WITHOUT_DUPLICATES, txn);
                store.put(txn, StringBinding.stringToEntry("0"), StringBinding.stringToEntry("0"));
                assertTrue(store.exists(txn, StringBinding.stringToEntry("0"), StringBinding.stringToEntry("0")));
                final Throwable[] th = {null};
                // asynchronously clear the environment
                try {
                    latch.acquire();
                    runParallelRunnable(new Runnable() {
                        @Override
                        public void run() {
                            latch.release();
                            try {
                                env.clear();
                            } catch (Throwable t) {
                                th[0] = t;
                            }
                            latch.release();
                        }
                    });
                    latch.acquire();
                } catch (InterruptedException ignore) {
                    Thread.currentThread().interrupt();
                    assertTrue(false);
                }
                Assert.assertNull(th[0]);
                assertTrue(store.exists(txn, StringBinding.stringToEntry("0"), StringBinding.stringToEntry("0")));
            }
        });
        latch.acquire();
        env.executeInExclusiveTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                final StoreImpl store = env.openStore("store", StoreConfig.WITHOUT_DUPLICATES, txn);
                Assert.assertFalse(store.exists(txn, StringBinding.stringToEntry("0"), StringBinding.stringToEntry("0")));
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: acquire (Alternative Action: stringToEntry=8 ) - Predicate: N/A - Scenario: latch (Alternative Scenario: store=2 )

Project: xodus
 Class: AbortTest
 Method: testAbort
 Body: {
        final StoreConfig dbConfig = StoreConfig.WITHOUT_DUPLICATES;
        Transaction txn = env.beginTransaction();
        final Store store = env.openStore("testDatabase", dbConfig, txn);
        final ArrayByteIterable dbEntry = new ArrayByteIterable(new byte[4]);
        store.put(txn, dbEntry, dbEntry);
        txn.revert();
        Assert.assertTrue(store.count(txn) == 0);
        //env.setThreadTransaction(txn);
        store.put(txn, dbEntry, dbEntry);
        txn.flush();
        Assert.assertTrue(store.count(txn) == 1);
        txn.abort();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: put (Alternative Action: count=2 ) - Predicate: N/A - Scenario: dbEntry (Alternative Scenario: store=1 )

Project: xodus
 Class: StoreTest
 Method: testXD_608_by_Thorsten_Schemm
 Body: {
        env.getEnvironmentConfig().setGcEnabled(false);
        final Store store = env.computeInTransaction(new TransactionalComputable<Store>() {
            @Override
            public Store compute(@NotNull Transaction txn) {
                return env.openStore("Whatever", StoreConfig.WITHOUT_DUPLICATES_WITH_PREFIXING, txn, true);
            }
        });
        assertNotNull(store);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                store.put(txn, IntegerBinding.intToEntry(0), IntegerBinding.intToEntry(0));
                store.put(txn, IntegerBinding.intToEntry(1), IntegerBinding.intToEntry(1));
            }
        });
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                assert_XD_608_1_0(txn, store);
            }
        });
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                assert_XD_608_0_0_1(txn, store);
            }
        });
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                assert_XD_608_0_1(txn, store);
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setGcEnabled (Alternative Action: intToEntry=4 ) - Predicate: N/A - Scenario: store (Alternative Scenario: store=1 )

Project: xodus
 Class: StoreTest
 Method: testXD_608_Mutable
 Body: {
        env.getEnvironmentConfig().setGcEnabled(false);
        final Store store = env.computeInTransaction(new TransactionalComputable<Store>() {
            @Override
            public Store compute(@NotNull Transaction txn) {
                return env.openStore("Whatever", StoreConfig.WITHOUT_DUPLICATES_WITH_PREFIXING, txn, true);
            }
        });
        assertNotNull(store);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                store.put(txn, IntegerBinding.intToEntry(0), IntegerBinding.intToEntry(0));
                store.put(txn, IntegerBinding.intToEntry(1), IntegerBinding.intToEntry(1));
                assert_XD_608_1_0(txn, store);
                assert_XD_608_0_0_1(txn, store);
                assert_XD_608_0_1(txn, store);
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setGcEnabled (Alternative Action: intToEntry=4 ) - Predicate: N/A - Scenario: store (Alternative Scenario: store=1 )

Project: xodus
 Class: StoreTest
 Method: testCreateTwiceInTransaction_XD_394
 Body: {
        final Environment env = getEnvironment();
        final Store[] store = {null};
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull Transaction txn) {
                store[0] = env.openStore("store", StoreConfig.WITHOUT_DUPLICATES, txn);
                store[0].put(txn, getKey(), getValue());
                final Store sameNameStore = env.openStore("store", StoreConfig.WITHOUT_DUPLICATES, txn);
                sameNameStore.put(txn, getKey2(), getValue2());
            }
        });
        assertNotNull(store[0]);
        assertNotNullStringValue(store[0], getKey(), "value");
        assertNotNullStringValue(store[0], getKey2(), "value2");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: executeInTransaction (Alternative Action: getKey=2 ) - Predicate: N/A - Scenario: store (Alternative Scenario: sameNameStore=1 )

Project: xodus
 Class: StoreTest
 Method: testXD_614_by_Thorsten_Schemm
 Body: {
        env.getEnvironmentConfig().setGcEnabled(false);
        final Store store = env.computeInTransaction(new TransactionalComputable<Store>() {
            @Override
            public Store compute(@NotNull Transaction txn) {
                return env.openStore("Whatever", StoreConfig.WITHOUT_DUPLICATES_WITH_PREFIXING, txn, true);
            }
        });
        assertNotNull(store);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                store.put(txn, IntegerBinding.intToEntry(0), IntegerBinding.intToEntry(0));
                store.put(txn, IntegerBinding.intToEntry(256), IntegerBinding.intToEntry(256));
                store.put(txn, IntegerBinding.intToEntry(257), IntegerBinding.intToEntry(257));
                store.put(txn, IntegerBinding.intToEntry(512), IntegerBinding.intToEntry(512));
                store.put(txn, IntegerBinding.intToEntry(521), IntegerBinding.intToEntry(521));
                try (Cursor cursor = store.openCursor(txn)) {
                    assertNotNull(cursor.getSearchKey(IntegerBinding.intToEntry(256)));
                    assertTrue(cursor.getPrev());
                    assertEquals(0, IntegerBinding.entryToInt(cursor.getKey()));
                }
            }
        });
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                try (Cursor cursor = store.openCursor(txn)) {
                    assertNotNull(cursor.getSearchKey(IntegerBinding.intToEntry(256)));
                    assertTrue(cursor.getPrev());
                    assertEquals(0, IntegerBinding.entryToInt(cursor.getKey()));
                }
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setGcEnabled (Alternative Action: intToEntry=12 ) - Predicate: N/A - Scenario: store (Alternative Scenario: cursor=2 )

Project: xodus
 Class: StoreTest
 Method: testXD_614_next_prev
 Body: {
        env.getEnvironmentConfig().setGcEnabled(false);
        final Store store = env.computeInTransaction(new TransactionalComputable<Store>() {
            @Override
            public Store compute(@NotNull Transaction txn) {
                return env.openStore("Whatever", StoreConfig.WITHOUT_DUPLICATES_WITH_PREFIXING, txn, true);
            }
        });
        assertNotNull(store);
        env.executeInTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                for (int i = 0; i < 512; ++i) {
                    store.put(txn, IntegerBinding.intToEntry(i), IntegerBinding.intToEntry(i));
                }
                assert_XD_614(txn, store);
            }
        });
        env.executeInReadonlyTransaction(new TransactionalExecutable() {
            @Override
            public void execute(@NotNull final Transaction txn) {
                assert_XD_614(txn, store);
            }
        });
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setGcEnabled (Alternative Action: intToEntry=2 ) - Predicate: N/A - Scenario: store (Alternative Scenario: i=1 )

Project: xodus
 Class: StoreTest
 Method: testPutWithDuplicates
 Body: {
        final Store store = openStoreAutoCommit("store", StoreConfig.WITH_DUPLICATES);
        Transaction txn = env.beginTransaction();
        store.put(txn, getKey(), getValue());
        txn.commit();
        assertNotNullStringValue(store, getKey(), "value");
        txn = env.beginTransaction();
        store.put(txn, getKey(), getValue2());
        txn.commit();
        assertNotNullStringValue(store, getKey(), "value");
        assertNotNullStringValues(store, "value", "value2");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: put (Alternative Action: getKey=4 ) - Predicate: getKey - Scenario: txn (Alternative Scenario: txn=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testDeleteFile2
 Body: {
        Transaction txn = env.beginTransaction();
        vfs.createFile(txn, "file0");
        txn.flush();
        vfs.deleteFile(txn, "file0");
        txn.flush();
        Assert.assertNull(vfs.openFile(txn, "file0", false));
        final File file0 = vfs.openFile(txn, "file0", true);
        txn.commit();
        Assert.assertNotNull(file0);
        Assert.assertEquals("file0", file0.getPath());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: createFile (Alternative Action: openFile=2 ) - Predicate: openFile - Scenario: txn (Alternative Scenario: file0=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testCreateUniqueFile
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file = vfs.createUniqueFile(txn, "file");
        txn.commit();
        Assert.assertEquals(0L, file.getDescriptor());
        Assert.assertTrue(file.getPath().startsWith("file"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: commit (Alternative Action: getDescriptor=1 ) - Predicate: getDescriptor - Scenario: file (Alternative Scenario: file=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testFileCreation
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.createFile(txn, "file0");
        txn.commit();
        Assert.assertEquals(0L, file0.getDescriptor());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: commit (Alternative Action: getDescriptor=1 ) - Predicate: getDescriptor - Scenario: file0 (Alternative Scenario: file0=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testFileCreation1
 Body: {
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.openFile(txn, "file0", true);
        txn.commit();
        Assert.assertNotNull(file0);
        Assert.assertEquals(0L, file0.getDescriptor());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: commit (Alternative Action: getDescriptor=1 ) - Predicate: N/A - Scenario: file0 (Alternative Scenario: file0=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testDeleteFile
 Body: {
        Transaction txn = env.beginTransaction();
        vfs.createFile(txn, "file0");
        txn.commit();
        txn = env.beginTransaction();
        final File file0 = vfs.deleteFile(txn, "file0");
        txn.commit();
        Assert.assertNotNull(file0);
        Assert.assertEquals("file0", file0.getPath());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: commit (Alternative Action: beginTransaction=2 ) - Predicate: N/A - Scenario: file0 (Alternative Scenario: file0=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testRenameFile
 Body: {
        testFileCreation();
        final Transaction txn = env.beginTransaction();
        File file0 = vfs.openFile(txn, "file0", false);
        txn.revert();
        Assert.assertNotNull(file0);
        final long fd = file0.getDescriptor();
        final long created = file0.getCreated();
        final long lastModified = file0.getLastModified();
        Thread.sleep(50);
        vfs.renameFile(txn, file0, "file1");
        txn.flush();
        file0 = vfs.openFile(txn, "file0", false);
        File file1 = vfs.openFile(txn, "file1", false);
        txn.abort();
        Assert.assertNull(file0);
        Assert.assertNotNull(file1);
        Assert.assertEquals(fd, file1.getDescriptor());
        Assert.assertEquals(created, file1.getCreated());
        Assert.assertTrue(file1.getLastModified() > lastModified);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: revert (Alternative Action: openFile=3 ) - Predicate: N/A - Scenario: file0 (Alternative Scenario: created=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testTouchFile
 Body: {
        final Transaction txn = env.beginTransaction();
        vfs.createFile(txn, "file0");
        txn.flush();
        File file0 = vfs.openFile(txn, "file0", false);
        Assert.assertNotNull(file0);
        Assert.assertEquals(file0.getCreated(), file0.getLastModified());
        Thread.sleep(100);
        vfs.touchFile(txn, file0);
        txn.flush();
        file0 = vfs.openFile(txn, "file0", false);
        Assert.assertNotNull(file0);
        Assert.assertTrue(file0.getCreated() + 50 < file0.getLastModified());
        txn.commit();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: flush (Alternative Action: getLastModified=2 ) - Predicate: N/A - Scenario: file0 (Alternative Scenario: file0=1 )

Project: xodus
 Class: VfsFileLowMemTests
 Method: testOpenFile
 Body: {
        testFileCreation();
        final Transaction txn = env.beginTransaction();
        final File file0 = vfs.openFile(txn, "file0", false);
        txn.commit();
        Assert.assertNotNull(file0);
        Assert.assertEquals(0L, file0.getDescriptor());
        Assert.assertTrue(file0.getCreated() > 0);
        Assert.assertTrue(file0.getLastModified() > 0);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: commit (Alternative Action: getDescriptor=1 ) - Predicate: N/A - Scenario: file0 (Alternative Scenario: file0=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget4
 Body: {
        addTagsToOperation();

        Parameter param = getParameter("documentation",
                "parameter document", "parameterName");

        this.operation.addParameter(param);
        this.tagEditor.setTarget(this.operation);
        assertEquals(4, this.getTableModel().getRowCount());
        assertOptionsForOperation(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addParameter (Alternative Action: getRowCount=1 ) - Predicate: getRowCount - Scenario: param (Alternative Scenario: param=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget10
 Body: {
        TaggedValue tv1 = TestHelper.getTaggedValueWithTagType("documentation#since");
        TaggedValue tv2 = TestHelper.getTaggedValueWithTagType("documentation#version");
        tv1.setDataValue("1.0");
        tv2.setDataValue("");
        this.classifier.addTaggedValue(tv1);
        this.classifier.addTaggedValue(tv2);
        this.tagEditor.setTarget(this.classifier);
        assertEquals(3, this.getTableModel().getRowCount());
        assertEquals("new value", this.getTableModel().getValueAt(1, 1));
        assertOptionsForClass(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setDataValue (Alternative Action: addTaggedValue=2 ) - Predicate: getRowCount - Scenario: tv2 (Alternative Scenario: tv2=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget7
 Body: {
        addTagsToOperation();

        //Parameter's name is null, should be ignored
        Parameter param = getParameter("documentation",
                "parameter documentation", null);

        this.operation.addParameter(param);
        this.tagEditor.setTarget(this.operation);
        assertEquals(3, this.getTableModel().getRowCount());
        assertOptionsForOperation(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addParameter (Alternative Action: getRowCount=1 ) - Predicate: getRowCount - Scenario: param (Alternative Scenario: param=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget3
 Body: {
        TaggedValue tv1 = TestHelper.getTaggedValueWithTagType("documentation#since");
        TaggedValue tv2 = TestHelper.getTaggedValueWithTagType("documentation#version");
        tv1.setDataValue("1.0");
        tv2.setDataValue("2.0");
        this.classifier.addTaggedValue(tv1);
        this.classifier.addTaggedValue(tv2);
        this.tagEditor.setTarget(this.classifier);
        assertEquals(3, this.getTableModel().getRowCount());
        assertOptionsForClass(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setDataValue (Alternative Action: addTaggedValue=2 ) - Predicate: getRowCount - Scenario: tv2 (Alternative Scenario: tv2=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget8
 Body: {
        addTagsToOperation();

        //tag type of parameter is not "documentation"
        Parameter param = getParameter("NotDesiredType",
                "parameter documentation", "parameterName");

        this.operation.addParameter(param);
        this.tagEditor.setTarget(this.operation);
        assertEquals(4, this.getTableModel().getRowCount());
        assertEquals("new value", this.getTableModel().getValueAt(0, 1));
        assertOptionsForOperation(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addParameter (Alternative Action: getTableModel=2 ) - Predicate: getRowCount - Scenario: param (Alternative Scenario: param=1 )

Project: mytcuml
 Class: DefaultTagEditorTestAcc
 Method: testSetTarget9
 Body: {
        TaggedValue tv1 = TestHelper.getTaggedValueWithTagType("documentation#");
        TaggedValue tv2 = TestHelper.getTaggedValueWithTagType("documentation#version");
        tv1.setDataValue("1.0");
        tv2.setDataValue("2.0");
        this.classifier.addTaggedValue(tv1);
        this.classifier.addTaggedValue(tv2);
        this.tagEditor.setTarget(this.classifier);
        assertEquals(2, this.getTableModel().getRowCount());
        assertOptionsForClass(this.getOptionComboBox());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setDataValue (Alternative Action: addTaggedValue=2 ) - Predicate: getRowCount - Scenario: tv2 (Alternative Scenario: tv2=1 )

Project: mytcuml
 Class: BaseNodeAccuracyTest
 Method: testNotifyNameCompartmentVisibilityChange
 Body: {

        int oldWidth = node.getSelectionBound().width;

        ((Uml1SemanticModelBridge) node.getGraphNode().getSemanticModel()).setElement(changeName(node
                        .getGraphNode(), "NewName"));

        
        node.notifyNameCompartmentVisibilityChange();
        assertTrue("The method does not work properly.", (node.getSelectionBound().width <= oldWidth));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setElement (Alternative Action: getSelectionBound=2 ) - Predicate: N/A - Scenario: oldWidth (Alternative Scenario: oldWidth=1 )

Project: mytcuml
 Class: BaseNodeAccuracyTest
 Method: testFireBoundaryChanged
 Body: {

        // the original rec
        Rectangle rec = new Rectangle(1, 2, 3, 4);

        BoundaryChangedListener listener = new DummyBoundaryChangedListener();
        node.addBoundaryChangedListener(listener);

        BoundaryChangedEvent testEvent = new BoundaryChangedEvent(
            node, "", rec, new Rectangle(4, 3, 2, 1));

        node.fireBoundaryChanged(testEvent);

        assertTrue("The method does not work properly.", ((DummyBoundaryChangedListener) 
            listener).getOldBoundary().equals(rec));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: fireBoundaryChanged (Alternative Action: fireBoundaryChanged=1 ) - Predicate: equals - Scenario: testEvent (Alternative Scenario: rec=1 )

Project: mytcuml
 Class: BaseNodeAccuracyTest
 Method: testNotifyStereotypeCompartmentVisibilityChange
 Body: {
        // retrieve the width
        int width0 = node.getSelectionBound().width;

        addStereotype(graphNode, "AnotherStereotype");

        node.notifyGraphNodeChange("Stereotype for tests");

        assertTrue("The method does not work properly.",
                        (node.getSelectionBound().width >= width0));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addStereotype (Alternative Action: getSelectionBound=2 ) - Predicate: N/A - Scenario: width0 (Alternative Scenario: width0=1 )

Project: mytcuml
 Class: BaseNodeAccuracyTest
 Method: testRemoveBoundaryChangedListener
 Body: {

        // create the listener
        BoundaryChangedListener listener = new DummyBoundaryChangedListener();

        // add BoundaryChangedListener
        node.addBoundaryChangedListener(listener);
        
        // remove it
        node.removeBoundaryChangedListener(listener);

        BoundaryChangedListener[] listeners = node.getListeners(BoundaryChangedListener.class);

        assertFalse("The method does not work properly.",
                        containsListener(listeners, DummyBoundaryChangedListener.class));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: removeBoundaryChangedListener (Alternative Action: getListeners=1 ) - Predicate: containsListener - Scenario: listeners (Alternative Scenario: listeners=1 )

Project: mytcuml
 Class: BaseNodeAccuracyTest
 Method: testAddBoundaryChangedListener
 Body: {

        BoundaryChangedListener listener = new DummyBoundaryChangedListener();

        // add the listener
        node.addBoundaryChangedListener(listener);
        
        // get the listener
        BoundaryChangedListener[] listeners = node.getListeners(
            BoundaryChangedListener.class);

        assertTrue("The method does not work properly",
                        containsListener(listeners, DummyBoundaryChangedListener.class));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addBoundaryChangedListener (Alternative Action: getListeners=1 ) - Predicate: containsListener - Scenario: listeners (Alternative Scenario: listeners=1 )

Project: mytcuml
 Class: ObjectUtilAccuracyTests
 Method: testAddObjectToClipboardAccuracy
 Body: {
        Object object = new ObjectImpl();
        object.setName("test");
        objectUtil.addObjectToClipboard(object, Toolkit.getDefaultToolkit().getSystemClipboard());
        assertEquals("addObjectToClipboard failed", ((Object) Toolkit.getDefaultToolkit().getSystemClipboard()
            .getContents(null).getTransferData(CollaborationTransfer.OBJECT_FLAVOR)).getName(), "test");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setName (Alternative Action: getDefaultToolkit=2 ) - Predicate: getName - Scenario: object (Alternative Scenario: object=1 )

Project: mytcuml
 Class: ObjectUtilAccuracyTests
 Method: testCopyObjectAccuracy
 Body: {
        Object object = new ObjectImpl();
        object.setName("Hello");
        object.setSpecification(true);
        TaggedValue taggedValue = new TaggedValueImpl();
        taggedValue.setDataValue("Data");
        taggedValue.setName("TopCoder");
        object.addTaggedValue(taggedValue);
        Object copiedObject = objectUtil.copyObject(object);
        assertNotSame("copyStimulus failed", copiedObject, object);
        assertEquals(object.getName(), copiedObject.getName());
        assertTrue(copiedObject.isSpecification());
        assertEquals(copiedObject.getTaggedValues().size(), object.getTaggedValues().size());
        TaggedValue copiedTaggedValue = copiedObject.getTaggedValues().toArray(new TaggedValue[0])[0];
        assertNotSame(taggedValue, copiedTaggedValue);
        assertNotNull("data value not copied", copiedTaggedValue.getDataValue());
        assertEquals("data value not copied", taggedValue.getDataValue(), copiedTaggedValue.getDataValue());
        assertNotNull("name not copied", copiedTaggedValue.getName());
        assertEquals("name not copied", taggedValue.getName(), copiedTaggedValue.getName());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTaggedValue (Alternative Action: getName=5 ) - Predicate: N/A - Scenario: copiedObject (Alternative Scenario: copiedTaggedValue=1 )

Project: mytcuml
 Class: ObjectUtilAccuracyTests
 Method: testCheckObjectNamespaceAccuracy
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        collaboration.addOwnedElement(object);
        assertTrue("checkObjectNamespace failed", objectUtil.checkObjectNamespace(object));

        object = new ObjectImpl();
        object.setNamespace(new CollaborationImpl());
        assertFalse("checkObjectNamespace failed", objectUtil.checkObjectNamespace(object));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setNamespace (Alternative Action: checkObjectNamespace=2 ) - Predicate: checkObjectNamespace - Scenario: collaboration (Alternative Scenario: collaboration=1 )

Project: mytcuml
 Class: ObjectUtilAccuracyTests
 Method: testAddObjectToCollaborationAccuracy
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        CollaborationInstanceSet collaborationInstanceSet = new CollaborationInstanceSetImpl();
        CollaborationInstanceSet collaborationInstanceSet1 = new CollaborationInstanceSetImpl();
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet);
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet1);
        objectUtil.addObjectToCollaboration(object);
        // check whether the object is added to the owned element of namespace
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaboration.getOwnedElements())
            .get(0), object);
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet
            .getParticipatingInstances()).get(0), object);
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet1
            .getParticipatingInstances()).get(0), object);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addCollaborationInstanceSet (Alternative Action: get=3 ) - Predicate: get - Scenario: collaborationInstanceSet1 (Alternative Scenario: collaborationInstanceSet=1 )

Project: mytcuml
 Class: ObjectUtilAccuracyTests
 Method: testRemoveObjectFromCollaborationAccuracy
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        CollaborationInstanceSet collaborationInstanceSet = new CollaborationInstanceSetImpl();
        CollaborationInstanceSet collaborationInstanceSet1 = new CollaborationInstanceSetImpl();
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet);
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet1);
        collaboration.addOwnedElement(object);
        collaborationInstanceSet.addParticipatingInstance(object);
        collaborationInstanceSet1.addParticipatingInstance(object);
        objectUtil.removeObjectFromCollaboration(object);
        // check whether the object is removed from the owned element of namespace
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaboration
            .getOwnedElements()).size(), 0);
        // check whether the communication link is removed from the participatory link.
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet
            .getParticipatingInstances()).size(), 0);
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet1
            .getParticipatingInstances()).size(), 0);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addCollaborationInstanceSet (Alternative Action: size=3 ) - Predicate: size - Scenario: collaborationInstanceSet1 (Alternative Scenario: collaborationInstanceSet=1 )

Project: mytcuml
 Class: ObjectUtilUnitTest
 Method: test_accuracy_addObjectToCollaboration
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        CollaborationInstanceSet collaborationInstanceSet = new CollaborationInstanceSetImpl();
        CollaborationInstanceSet collaborationInstanceSet1 = new CollaborationInstanceSetImpl();
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet);
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet1);
        objectUtil.addObjectToCollaboration(object);
        // check whether the object is added to the owned element of namespace
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaboration
            .getOwnedElements()).get(0), object);
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet
            .getParticipatingInstances()).get(0), object);
        assertEquals("addObjectToCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet1
            .getParticipatingInstances()).get(0), object);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addCollaborationInstanceSet (Alternative Action: get=3 ) - Predicate: get - Scenario: collaborationInstanceSet1 (Alternative Scenario: collaborationInstanceSet=1 )

Project: mytcuml
 Class: ObjectUtilUnitTest
 Method: test_accuracy_checkObjectNamespace
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        collaboration.addOwnedElement(object);
        assertTrue("checkObjectNamespace failed", objectUtil.checkObjectNamespace(object));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setNamespace (Alternative Action: checkObjectNamespace=1 ) - Predicate: checkObjectNamespace - Scenario: collaboration (Alternative Scenario: collaboration=1 )

Project: mytcuml
 Class: ObjectUtilUnitTest
 Method: test_accuracy_removeObjectFromCollaboration
 Body: {
        Object object = new ObjectImpl();
        Collaboration collaboration = new CollaborationImpl();
        object.setNamespace(collaboration);
        CollaborationInstanceSet collaborationInstanceSet = new CollaborationInstanceSetImpl();
        CollaborationInstanceSet collaborationInstanceSet1 = new CollaborationInstanceSetImpl();
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet);
        collaboration.addCollaborationInstanceSet(collaborationInstanceSet1);
        collaboration.addOwnedElement(object);
        collaborationInstanceSet.addParticipatingInstance(object);
        collaborationInstanceSet1.addParticipatingInstance(object);
        objectUtil.removeObjectFromCollaboration(object);
        // check whether the object is removed from the owned element of namespace
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaboration
            .getOwnedElements()).size(), 0);
        // check whether the communication link is removed from the participatory link.
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet
            .getParticipatingInstances()).size(), 0);
        assertEquals("removeObjectFromCollaboration failed", new ArrayList<ModelElement>(collaborationInstanceSet1
            .getParticipatingInstances()).size(), 0);

    }
 Pattern Name: NormalPattern_AnyLOC - Action: addCollaborationInstanceSet (Alternative Action: size=3 ) - Predicate: size - Scenario: collaborationInstanceSet1 (Alternative Scenario: collaborationInstanceSet=1 )

Project: mytcuml
 Class: ZoomPanelUnitTest
 Method: testSetZoomBackgroundAccuracyWithColor
 Body: {
        Color color = Color.BLUE;
        // set color
        panel.setZoomBackground(color);
        // get color
        assertEquals("should be BLUE", color, panel.getZoomBackground());

        // set new color
        color = Color.RED;
        panel.setZoomBackground(color);
        assertEquals("should be RED", color, panel.getZoomBackground());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setZoomBackground (Alternative Action: setZoomBackground=2 ) - Predicate: getZoomBackground - Scenario: color (Alternative Scenario: color=1 )

Project: mytcuml
 Class: PackageUtilTest
 Method: testCopyElementModelElement
 Body: {
        element.setLeaf(!element.isLeaf());

        PackageImpl newElement = (PackageImpl) util.copyElement(element);

        assertEquals("IsRoot is incorrect.", element.isRoot(), newElement
                .isRoot());
        assertEquals("isLeaf is incorrect.", element.isLeaf(), newElement
                .isLeaf());
        assertEquals("isAbstract is incorrect.", element.isAbstract(),
                newElement.isAbstract());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setLeaf (Alternative Action: isLeaf=3 ) - Predicate: isRoot - Scenario: newElement (Alternative Scenario: newElement=1 )

Project: mytcuml
 Class: Demo
 Method: testDemo4
 Body: {
        //Configure the RenameConverter and XMIReader
        XMIConvertersUtil.config(reader);

        reader.parse(new File("test_files/zuml_1.xml"));

        DiagramInterchangeXMIHandler handler = (DiagramInterchangeXMIHandler) reader.getHandler(
                "UML:Diagram");
        UMLModelManager manager = handler.getUmlModelManager();

        List<Diagram> diagrams = manager.getDiagrams();

        assertFalse("There are diagrams in the zuml1_1.xml, they should be parsed correctly.",
            diagrams.isEmpty());

        Diagram diagram = (Diagram) diagrams.get(0);

        //It should process successfully
        XMISequenceDiagramConverterUtil.convertSequenceDiagram(diagram);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getDiagrams=1 ) - Predicate: isEmpty - Scenario: handler (Alternative Scenario: diagram=1 )

Project: mytcuml
 Class: Demo
 Method: testDemo3
 Body: {
        //Configure the RenameConverter and XMIReader
        XMIConvertersUtil.config(reader);

        reader.parse(new File("test_files/zuml_1.xml"));

        DiagramInterchangeXMIHandler handler = (DiagramInterchangeXMIHandler) reader.getHandler(
                "UML:Diagram");
        UMLModelManager manager = handler.getUmlModelManager();

        List<Diagram> diagrams = manager.getDiagrams();

        assertFalse("There are diagrams in the zuml1_1.xml, they should be parsed correctly.",
            diagrams.isEmpty());

        //It should process successfully
        XMISequenceDiagramConverterUtil.convertSequenceDiagrams(diagrams);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getDiagrams=1 ) - Predicate: isEmpty - Scenario: handler (Alternative Scenario: handler=1 )

Project: mytcuml
 Class: Demo
 Method: testDemo2
 Body: {
        //Configure the RenameConverter and XMIReader
        XMIConvertersUtil.config(reader);

        reader.parse(new File("test_files/zuml_1.xml"));

        XMI2ModelHandler handler = (XMI2ModelHandler) reader.getHandler(
                "UML:Model");
        UMLModelManager manager = handler.getUmlModelManager();
        Model model = manager.getModel();

        assertNotNull("Unable to get the model.", model);

        //Before converted to Collaboration, there is only 2 ownedElement in model
        assertEquals("There should be only 2 ownedElements.", 2,
            model.getOwnedElements().size());

        //It should process successfully
        XMISequenceDiagramConverterUtil.convertCollaborationInModel(model);

        //There is one Interaction in model's first Collaboration, so it should be converted to
        //Collaboration, and added to model. So there is 3 ownedElements in model.
        assertEquals("There should be 3 ownedElements now.", 3,
            model.getOwnedElements().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=2 ) - Predicate: N/A - Scenario: handler (Alternative Scenario: handler=1 )

Project: mytcuml
 Class: TestCodeWriter
 Method: testcreateDirectoryStringStringAccuracyValidOnePackage
 Body: {
        File f = TestHelper.createTempDir();
        String location = f.getAbsolutePath();
        String packageName = "com";

        assertTrue("directory not created", this.uut.createDirectory(location, packageName));

        File com = new File(f, "com");
        assertTrue("com missing", com.isDirectory());

        com.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: delete (Alternative Action: getAbsolutePath=1 ) - Predicate: createDirectory - Scenario: f (Alternative Scenario: com=1 )

Project: mytcuml
 Class: TestCodeWriter
 Method: testcreateDirectoryStringStringAccuracyMissingLocation
 Body: {
        File f = TestHelper.createTempDir();
        String location = f.getAbsolutePath();
        String packageName = "com.topcoder";

        f.delete();

        assertFalse("directory created", this.uut.createDirectory(location, packageName));

        File com = new File(f, "com");
        File topcoder = new File(com, "topcoder");
        assertFalse("com created", com.isDirectory());
        assertFalse("topcoder created", topcoder.isDirectory());

        topcoder.delete();
        com.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: delete (Alternative Action: delete=3 ) - Predicate: createDirectory - Scenario: packageName (Alternative Scenario: com=1 )

Project: mytcuml
 Class: TestCodeWriter
 Method: testwriteFileStringStringStringStringAccuracyOnePackage
 Body: {
        String location = TestHelper.createTempDir().getAbsolutePath();
        String packageName = "com";
        String fileName = "Foo.java";
        String content = "class Foo{}";

        this.uut.createDirectory(location, packageName);
        this.uut.writeFile(location, packageName, fileName, content);

        File com = new File(location, "com");
        File file = new File(com, fileName);
        String fileContent = TestHelper.readFile(file);
        assertEquals("content", content + TestHelper.LINE_SEPARATOR, fileContent);

        file.delete();
        com.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: writeFile (Alternative Action: delete=2 ) - Predicate: N/A - Scenario: com (Alternative Scenario: com=1 )

Project: mytcuml
 Class: TestCodeWriter
 Method: testcreateDirectoryStringStringAccuracyValidTwoPackages
 Body: {
        File f = TestHelper.createTempDir();
        String location = f.getAbsolutePath();
        String packageName = "com.topcoder";

        assertTrue("directory not created", this.uut.createDirectory(location, packageName));

        File com = new File(f, "com");
        File topcoder = new File(com, "topcoder");
        assertTrue("com missing", com.isDirectory());
        assertTrue("topcoder missing", topcoder.isDirectory());

        topcoder.delete();
        com.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: delete (Alternative Action: delete=2 ) - Predicate: createDirectory - Scenario: f (Alternative Scenario: com=1 )

Project: mytcuml
 Class: HelperTest
 Method: testRemoveAllFromCollectionAccuracy2
 Body: {
        // create collection
        Collection<Object> collection = new ArrayList<Object>();
        String value1 = "a";
        String value2 = "b";
        collection.add(value1);
        collection.add(value2);
        collection.add(value1);
        collection.add(value2);

        // create collection with elements to remove
        Collection<Object> toRemove = new ArrayList<Object>();
        toRemove.add(value1);

        // check result
        boolean returnValue = Helper.removeAllFromCollection(collection, toRemove);
        assertTrue("Return value should be correct.", returnValue);
        assertEquals("Collection after removing should be correct.", 3, collection.size());
        assertSame("Collection after removing should be correct.", value2, collection.toArray()[0]);
        assertSame("Collection after removing should be correct.", value1, collection.toArray()[1]);
        assertSame("Collection after removing should be correct.", value2, collection.toArray()[2]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=5 ) - Predicate: N/A - Scenario: returnValue (Alternative Scenario: returnValue=1 )

Project: mytcuml
 Class: HelperTest
 Method: testRemoveAllFromCollectionAccuracy1
 Body: {
        // create collection
        Collection<Object> collection = new ArrayList<Object>();
        String value1 = "a";
        String value2 = "b";
        collection.add(value1);
        collection.add(value2);

        // create collection with elements to remove
        Collection<Object> toRemove = new ArrayList<Object>();
        toRemove.add(value1);

        // check result
        boolean returnValue = Helper.removeAllFromCollection(collection, toRemove);
        assertTrue("Return value should be correct.", returnValue);
        assertEquals("Collection after removing should be correct.", 1, collection.size());
        assertSame("Collection after removing should be correct.", value2, collection.toArray()[0]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=3 ) - Predicate: N/A - Scenario: returnValue (Alternative Scenario: returnValue=1 )

Project: mytcuml
 Class: HelperTest
 Method: testRemoveAllFromCollectionAccuracy5
 Body: {
        // create collection
        Collection<Object> collection = new ArrayList<Object>();
        String value1 = "a";
        String value2 = "b";
        collection.add(value1);
        collection.add(value2);
        collection.add(value1);

        // create collection with elements to remove
        Collection<Object> toRemove = new ArrayList<Object>();
        toRemove.add(value2);
        toRemove.add(value1);
        toRemove.add(value2);

        // check result
        boolean returnValue = Helper.removeAllFromCollection(collection, toRemove);
        assertTrue("Return value should be correct.", returnValue);
        assertEquals("Collection after removing should be correct.", 1, collection.size());
        assertSame("Collection after removing should be correct.", value1, collection.toArray()[0]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=6 ) - Predicate: N/A - Scenario: returnValue (Alternative Scenario: returnValue=1 )

Project: mytcuml
 Class: HelperTest
 Method: testRemoveAllFromCollectionAccuracy4
 Body: {
        // create collection
        Collection<Object> collection = new ArrayList<Object>();
        String value1 = "a";
        String value2 = "b";
        collection.add(value1);
        collection.add(value2);

        // create collection with elements to remove
        Collection<Object> toRemove = new ArrayList<Object>();

        // check result
        boolean returnValue = Helper.removeAllFromCollection(collection, toRemove);
        assertFalse("Return value should be correct.", returnValue);
        assertEquals("Collection after removing should be correct.", 2, collection.size());
        assertSame("Collection after removing should be correct.", value1, collection.toArray()[0]);
        assertSame("Collection after removing should be correct.", value2, collection.toArray()[1]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=2 ) - Predicate: N/A - Scenario: toRemove (Alternative Scenario: returnValue=1 )

Project: mytcuml
 Class: HelperTest
 Method: testRemoveAllFromCollectionAccuracy3
 Body: {
        // create collection
        Collection<Object> collection = new ArrayList<Object>();
        String value1 = "a";
        String value2 = "b";
        collection.add(value1);
        collection.add(value2);
        collection.add(value1);
        collection.add(value2);

        // create collection with elements to remove
        Collection<Object> toRemove = new ArrayList<Object>();
        toRemove.add(value1);
        toRemove.add(value2);

        // check result
        boolean returnValue = Helper.removeAllFromCollection(collection, toRemove);
        assertTrue("Return value should be correct.", returnValue);
        assertEquals("Collection after removing should be correct.", 2, collection.size());
        assertSame("Collection after removing should be correct.", value1, collection.toArray()[0]);
        assertSame("Collection after removing should be correct.", value2, collection.toArray()[1]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=6 ) - Predicate: N/A - Scenario: returnValue (Alternative Scenario: returnValue=1 )

Project: mytcuml
 Class: LinkImplAccuracyTest
 Method: testGetStimuliAccuracy
 Body: {
        Collection<Stimulus> expectStimuli = new ArrayList<Stimulus>();
        expectStimuli.add(stimulus1);
        expectStimuli.add(stimulus2);
        link.addStimuli(expectStimuli);
        assertEquals("stimuli is incorrect.", expectStimuli, link.getStimuli());
        link.getStimuli().clear();
        assertEquals("stimuli is incorrect.", expectStimuli, link.getStimuli());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: getStimuli=3 ) - Predicate: getStimuli - Scenario: expectStimuli (Alternative Scenario: expectStimuli=1 )

Project: mytcuml
 Class: LinkImplAccuracyTest
 Method: testGetOwnerAccuracy
 Body: {
        Instance owner = new InstanceAbstractImpl() {
        };
        link.setOwner(owner);
        assertEquals("owner is incorrect.", owner, link.getOwner());
        link.setOwner(null);
        assertNull("owner should be null.", link.getOwner());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setOwner (Alternative Action: getOwner=2 ) - Predicate: getOwner - Scenario: owner (Alternative Scenario: owner=1 )

Project: mytcuml
 Class: LinkImplAccuracyTest
 Method: testGetConnectionsAccuracy
 Body: {
        link.addConnection(connection1);
        link.addConnection(connection1);
        ArrayList<LinkEnd> expectConnections = new ArrayList<LinkEnd>();
        expectConnections.add(connection1);
        expectConnections.add(connection1);
        assertEquals("connections is incorrect.", expectConnections, link.getConnections());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: add=2 ) - Predicate: getConnections - Scenario: expectConnections (Alternative Scenario: expectConnections=1 )

Project: mytcuml
 Class: PasteFreeTextActionAccuracyTest
 Method: testPasteFreeTextAction
 Body: {
        // initialization
        AccuracyTestsHelper.loadConfiguration();
        // run successfully
        PasteFreeTextAction addFreeTextAction =
            new PasteFreeTextAction(AccuracyTestsHelper.getFreeTextGraphNode(), new GraphNode());
        assertEquals("presentation names must be equal", PRESENTATION_NAME, addFreeTextAction.getPresentationName());
        AccuracyTestsHelper.clearConfiguration();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: loadConfiguration (Alternative Action: loadConfiguration=1 ) - Predicate: getPresentationName - Scenario: addFreeTextAction (Alternative Scenario: addFreeTextAction=1 )

Project: mytcuml
 Class: DocumentationEditorTestAcc
 Method: testRemoveDocumentationListener3
 Body: {
        addListeners();

        this.documentationEditor.removeDocumentationListener(listener1);

        List < DocumentationListener > listeners = this.documentationEditor.getDocumentationListeners();
        assertEquals("size of listeners is 1", 1, listeners.size());
        assertEquals("same listener", listener2, listeners.get(0));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: removeDocumentationListener (Alternative Action: getDocumentationListeners=1 ) - Predicate: size - Scenario: listeners (Alternative Scenario: listeners=1 )

Project: mytcuml
 Class: LoadXMIFileActionAccuracyTests
 Method: testCtor_Accuracy
 Body: {
        File file = new File("test_files/out.xmi");
        file.createNewFile();
        UMLModelManager manager = new UMLModelManager();
        ProjectConfigurationManager projectConfigurationManager = new ProjectConfigurationManager(manager);
        LoadXMIFileAction loadXMIFileAction = new LoadXMIFileAction(file, manager, projectConfigurationManager);

        // verify
        assertEquals("xmiFile field not set.", file, AccuracyTestHelper.getFieldValue(loadXMIFileAction, "xmiFile"));
        assertEquals("modelManager field not set.", manager, AccuracyTestHelper.getFieldValue(loadXMIFileAction,
            "modelManager"));
        assertEquals("configManager field not set.", projectConfigurationManager, AccuracyTestHelper.getFieldValue(
            loadXMIFileAction, "configManager"));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: createNewFile (Alternative Action: getFieldValue=3 ) - Predicate: getFieldValue - Scenario: manager (Alternative Scenario: file=1 )

Project: mytcuml
 Class: DefaultJarImporterAccuracyTest
 Method: testImportToDiagram
 Body: {
        defaultJarImporter.retrievePackagesAndClassesFromJars(new URL[] {new File(
            "test_files/accuracytests/classpath/test_1.jar").toURI().toURL() });
        defaultJarImporter.extractExternalClasses();
        defaultJarImporter.importPackagesAndClassesToModel();
        // running successfully
        Diagram diagram = new Diagram();
        defaultJarImporter.importToDiagram(diagram);
        // checking for the number of containeds
        assertEquals("the number of containeds must be 6", 6, diagram.getContaineds().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: importToDiagram (Alternative Action: importPackagesAndClassesToModel=1 ) - Predicate: size - Scenario: diagram (Alternative Scenario: diagram=1 )

Project: mytcuml
 Class: DefaultJarImporterAccuracyTest
 Method: testImportPackagesAndClassesToModelPackages
 Body: {
        defaultJarImporter.retrievePackagesAndClassesFromJars(new URL[] {new File(
            "test_files/accuracytests/classpath/test_1.jar").toURI().toURL() });
        defaultJarImporter.extractExternalClasses();
        // running successfully
        defaultJarImporter.importPackagesAndClassesToModel();
        //
        Map<String,com.topcoder.uml.model.modelmanagement.Package> packages = defaultJarImporter.getModelPackages();
        assertEquals("the number of expected packages is 7", 7, packages.size());

        // check the packages
        assertTrue("the package is missed", packages.containsKey(""));
        assertTrue("the package is missed", packages.containsKey("java.sql"));
        assertTrue("the package is missed", packages.containsKey("com.topcoder.test.unter"));
        assertTrue("the package is missed", packages.containsKey("com.topcoder.test"));
        assertTrue("the package is missed", packages.containsKey("java.util"));
        assertTrue("the package is missed", packages.containsKey("java.lang"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: importPackagesAndClassesToModel (Alternative Action: containsKey=6 ) - Predicate: size - Scenario: packages (Alternative Scenario: packages=1 )

Project: mytcuml
 Class: DefaultJarImporterAccuracyTest
 Method: testImportPackagesAndClassesToModelClasses
 Body: {
        defaultJarImporter.retrievePackagesAndClassesFromJars(new URL[] {new File(
            "test_files/accuracytests/classpath/test_1.jar").toURI().toURL() });
        defaultJarImporter.extractExternalClasses();
        // running successfully
        defaultJarImporter.importPackagesAndClassesToModel();
        // getting classes
        Map<String,Classifier> classes = defaultJarImporter.getModelClasses();
        assertEquals("the number of expected packages is 13", 13, classes.size());
        // checking classes
        checkClassImpl(classes, "java.lang.String");
        checkClassImpl(classes, "java.lang.Object");
        checkInterfaceImpl(classes, "java.lang.Runnable");
        checkClassImpl(classes, "java.util.Date");
        checkClassImpl(classes, "java.sql.Date");
        checkPrimitiveImpl(classes, "boolean");
        checkPrimitiveImpl(classes, "long");
        checkClassImpl(classes, "com.topcoder.test.TestClassFirst");
        checkClassImpl(classes, "com.topcoder.test.unter.TestClassSecond");
        checkClassImpl(classes, "java.lang.Integer");
        checkClassImpl(classes, "java.util.GregorianCalendar");
        checkInterfaceImpl(classes, "java.util.List");
        checkInterfaceImpl(classes, "java.io.Serializable");
    }
 Pattern Name: NormalPattern_AnyLOC - Action: importPackagesAndClassesToModel (Alternative Action: checkClassImpl=8 ) - Predicate: size - Scenario: classes (Alternative Scenario: classes=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testPaintComponent
 Body: {
        JLabel label = new JLabel();
        BirdsEyeView birdEye = new BirdsEyeView(label, new Dimension(100, 100),
                new Point(100, 100));
        label.setSize(400, 400);
        birdEye.setSize(100, 50);
        DebugGraphics g = new DebugGraphics();
        birdEye.paintComponent(g);
        double zoomFactor = 50 * 1.0 / 400;
        assertTrue("The zoom factor should be same with expected.", Helper.compareDoubles(zoomFactor,
                birdEye.getViewPort().getZoomFactor()));
        assertEquals("The size of the view port should be same with expected.",
                new Dimension((int) (zoomFactor * 100), (int) (zoomFactor * 100)),
                birdEye.getViewPort().getSize());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: paintComponent (Alternative Action: getViewPort=2 ) - Predicate: compareDoubles - Scenario: zoomFactor (Alternative Scenario: g=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testPaintComponentFail
 Body: {
        JLabel label = new JLabel();
        BirdsEyeView birdEye = new BirdsEyeView(label, new Dimension(100, 100),
                new Point(100, 100));
        label.setSize(400, 400);
        birdEye.setSize(100, 50);
        birdEye.paintComponent(null);
        assertEquals("The size of the view port should be same with expected.",
                new Dimension(0, 0), birdEye.getViewPort().getSize());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setSize (Alternative Action: setSize=2 ) - Predicate: getSize - Scenario: birdEye (Alternative Scenario: label=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testConstructorWithInvalidOpacityConfig
 Body: {
        JLabel label = new JLabel("just for the test!");
        JScrollPane sp = new JScrollPane(label);

        UIManager.put("BirdsEyeView.overlayColor", Color.gray);
        UIManager.put("BirdsEyeView.overlayBorderColor", Color.yellow);
        UIManager.put("BirdsEyeView.overlayBorderThickness", "3");

        UIManager.put("BirdsEyeView.overlayOpacity", null);
        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The opacity of view port should be same with expected",
                0.5, view.getViewPort().getOpacity());

        UIManager.put("BirdsEyeView.overlayOpacity", "11");
        view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The opacity of view port should be same with expected",
                0.5, view.getViewPort().getOpacity());

        UIManager.put("BirdsEyeView.overlayOpacity", "-1");
        view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The opacity of view port should be same with expected",
                0.5, view.getViewPort().getOpacity());

        UIManager.put("BirdsEyeView.overlayOpacity", "abc.123");
        view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The opacity of view port should be same with expected",
                0.5, view.getViewPort().getOpacity());

        UIManager.put("BirdsEyeView.overlayOpacity", "   ");
        view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The opacity of view port should be same with expected",
                0.5, view.getViewPort().getOpacity());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: put (Alternative Action: put=8 ) - Predicate: getOpacity - Scenario: view (Alternative Scenario: view=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testInputObjectViewPostion
 Body: {
        JLabel label = new JLabel("just for the test!");
        JScrollPane sp = new JScrollPane(label);
        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());

        Point p = new Point();
        view.setInputObjectViewPosition(p);
        assertEquals("The retrieved inputObjectViewPosition should be same with expected.",
                p, view.getInputObjectViewPosition());

    }
 Pattern Name: NormalPattern_AnyLOC - Action: setInputObjectViewPosition (Alternative Action: getViewport=1 ) - Predicate: getInputObjectViewPosition - Scenario: p (Alternative Scenario: p=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testInputObject
 Body: {
        JLabel label = new JLabel("1");
        JScrollPane sp = new JScrollPane(label);
        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());

        JLabel label1 = new JLabel("2");
        JScrollPane sp1 = new JScrollPane(label1);
        view.setInputObject(sp1);
        JComponent comp = view.getInputObject();
        assertEquals("The retrieved inputObject should be same with expected.", sp1, comp);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setInputObject (Alternative Action: getViewport=1 ) - Predicate: N/A - Scenario: comp (Alternative Scenario: comp=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testZoomPanel
 Body: {
        JLabel label = new JLabel("just for the test!");
        JScrollPane sp = new JScrollPane(label);
        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());

        ZoomPanel zoomPanel = new ZoomPanel(label);
        view.setZoomPanel(zoomPanel);
        assertEquals("The retrieved zoomPanel should be same with expected.", zoomPanel, view.getZoomPanel());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setZoomPanel (Alternative Action: getViewport=1 ) - Predicate: getZoomPanel - Scenario: zoomPanel (Alternative Scenario: view=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testMousePressed
 Body: {
        BirdsEyeView view = initBirdsEyeView();
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 200, 200, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(100, 125), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 10, 200, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(0, 125), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 750, 200, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(599, 125), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 200, 50, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(100, 0), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 200, 550, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(100, 449), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, -1, 200, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(0, 0), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 801, 200, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(0, 0), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 200, -1, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(0, 0), view.getViewPort().getLocation());
        view.getViewPort().setLocation(new Point(0, 0));
        view.mousePressed(new MouseEvent(view, 0, System.currentTimeMillis(), 0, 200, 601, 1, false));
        assertEquals("The location of view port should be same with expected.",
                new Point(0, 0), view.getViewPort().getLocation());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: mousePressed (Alternative Action: getViewPort=17 ) - Predicate: getLocation - Scenario: view (Alternative Scenario: view=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testInputObjectViewDimension
 Body: {
        JLabel label = new JLabel("just for the test!");
        JScrollPane sp = new JScrollPane(label);
        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());

        Dimension d = new Dimension();
        view.setInputObjectViewDimension(d);
        assertEquals("The retrieved inputObjectViewDimension should be same with expected.",
                d, view.getInputObjectViewDimension());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setInputObjectViewDimension (Alternative Action: getViewport=1 ) - Predicate: getInputObjectViewDimension - Scenario: d (Alternative Scenario: view=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testPaintComponentWithZeroHeight
 Body: {
        JLabel label = new JLabel();
        BirdsEyeView birdEye = new BirdsEyeView(label, new Dimension(100, 100),
                new Point(100, 100));
        label.setSize(400, 400);
        birdEye.setSize(0, 0);
        DebugGraphics g = new DebugGraphics();
        birdEye.paintComponent(g);
        assertTrue("The zoom factor should be same with expected.", Helper.compareDoubles(1,
                birdEye.getViewPort().getZoomFactor()));
        assertEquals("The size of the view port should be same with expected.",
                new Dimension(100, 100), birdEye.getViewPort().getSize());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: paintComponent (Alternative Action: getViewPort=2 ) - Predicate: compareDoubles - Scenario: g (Alternative Scenario: g=1 )

Project: mytcuml
 Class: BirdsEyeViewTest
 Method: testConstructorWithInvalidColorConfig
 Body: {
        JLabel label = new JLabel("just for the test!");
        JScrollPane sp = new JScrollPane(label);

        UIManager.put("BirdsEyeView.overlayColor", null);
        UIManager.put("BirdsEyeView.overlayBorderColor", Color.yellow);
        UIManager.put("BirdsEyeView.overlayBorderThickness", "1");
        UIManager.put("BirdsEyeView.overlayOpacity", "0.5");

        BirdsEyeView view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The background color of view port should be same with expected",
                Color.gray, view.getViewPort().getBackground());

        UIManager.put("BirdsEyeView.overlayColor", Color.black);
        UIManager.put("BirdsEyeView.overlayBorderColor", null);
        view = new BirdsEyeView(sp, sp.getViewport().getSize(), sp.getLocation());
        assertEquals("The foreground color of view port should be same with expected",
                Color.black, view.getViewPort().getForeground());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: put (Alternative Action: put=6 ) - Predicate: getBackground - Scenario: view (Alternative Scenario: view=1 )

Project: mytcuml
 Class: JoinNodeAccuracyTest
 Method: testNotifyGraphNodeChangeAccuracy
 Body: {

        int with0 = node.getSelectionBound().width;

        addStereotype(graphNode, "AnotherStereotype");

        node.notifyGraphNodeChange("Stereotype for accuracy tests.");

        assertTrue("The method does not work properly.", node.getSelectionBound().width >= with0);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addStereotype (Alternative Action: getSelectionBound=2 ) - Predicate: N/A - Scenario: with0 (Alternative Scenario: with0=1 )

Project: mytcuml
 Class: EditBoxListenerAccuracyTest
 Method: testTextCancelledTextInputEventAccuracy
 Body: {
        TextInputBox textInputBox = new TextInputBox();
        TextInputEvent textInputEvent = new TextInputEvent(textInputBox, "textInputEvent");
        editBoxListener.textCancelled(textInputEvent);
        assertEquals("this should be removed from textInputBox.", 0, textInputBox
            .getListeners(TextInputListener.class).length);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: textCancelled (Alternative Action: getListeners=1 ) - Predicate: N/A - Scenario: textInputEvent (Alternative Scenario: textInputEvent=1 )

Project: mytcuml
 Class: EditBoxListenerAccuracyTest
 Method: testTextEnteredTextInputEventAccuracy
 Body: {
        TextInputBox textInputBox = new TextInputBox();
        TextInputEvent textInputEvent = new TextInputEvent(textInputBox, "textInputEvent");
        editBoxListener.textEntered(textInputEvent);
        assertEquals("this should be removed from textInputBox.", 0, textInputBox
            .getListeners(TextInputListener.class).length);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: textEntered (Alternative Action: getListeners=1 ) - Predicate: N/A - Scenario: textInputEvent (Alternative Scenario: textInputEvent=1 )

Project: mytcuml
 Class: ActivityGraphXMIHandlerAccuracyTests
 Method: testSetDocumentLocatorAccuracy
 Body: {
        Locator locator = new LocatorImpl();
        activityGraphXMIHandler.setDocumentLocator(locator);
        assertSame("The Locator instance is incorrect.", locator, AccuracyTestHelper.getPrivateField(
            ActivityGraphXMIHandler.class, activityGraphXMIHandler, "locator"));

        activityGraphXMIHandler.setDocumentLocator(null);
        assertNull("the Locator instance should be null.", AccuracyTestHelper.getPrivateField(
            ActivityGraphXMIHandler.class, activityGraphXMIHandler, "locator"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setDocumentLocator (Alternative Action: getPrivateField=2 ) - Predicate: getPrivateField - Scenario: locator (Alternative Scenario: locator=1 )

Project: mytcuml
 Class: ActivityGraphXMIHandlerAccuracyTests
 Method: testSimpleState
 Body: {
        xmiReader.parse(new File("test_files" + File.separator + "accuracytests" + File.separator
            + "SimpleStateMachine.xmi"));

        Object obj = xmiReader.getElement("-64--88-1-100--12c6026f:10fa54f7a34:-8000:0000000000000801");

        // verify the type
        assertTrue("Expects SimpleState instance.", obj != null && obj instanceof SimpleState);

        SimpleState state = (SimpleState) obj;

        // verify the SimpleState properties
        assertFalse("The isSpecification property should be false.", state.isSpecification());
        assertEquals("Expects one outgoing transition.", 1, state.getOutgoingTransitions().size());
        assertNotNull("Expects the outgoing transition is set.", state.getOutgoingTransitions().iterator().next());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getOutgoingTransitions=2 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: ActivityObjectClipboardUtilityTests
 Method: testCopyTransition
 Body: {
        StateVertex source = new SimpleStateImpl();
        StateVertex target = new SimpleStateImpl();
        Guard guard = new GuardImpl();
        transition.setSource(source);
        transition.setTarget(target);
        transition.setGuard(guard);

        ActivityObjectClipboardUtility.copyTransition(transition, clipboard);

        Object content = clipboard.getData(ActivityDataFlavor.TRANSITION);
        assertTrue("Expects Transition type.", content != null && content instanceof Transition);
        assertNotSame("Expects the content is cloned", content, transition);

        Transition clonedTransition = (Transition) content;
        assertSame("The source should be set by reference.", source, clonedTransition.getSource());
        assertSame("The target should be set by reference.", target, clonedTransition.getTarget());
        assertNotSame("The guard should be set by clone", guard, clonedTransition.getGuard());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: copyTransition (Alternative Action: getGuard=1 ) - Predicate: N/A - Scenario: content (Alternative Scenario: clonedTransition=1 )

Project: mytcuml
 Class: ActivityObjectClipboardUtilityTests
 Method: testCopyStateNode
 Body: {
        ActivityObjectClipboardUtility.copyStateNode(state, clipboard);

        Object content = clipboard.getData(ActivityDataFlavor.ACTION_STATE);
        assertTrue("Expects SimpleState type.", content != null && content instanceof ActionState);
        assertNotSame("Expects the content is cloned", content, state);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: copyStateNode (Alternative Action: copyStateNode=1 ) - Predicate: N/A - Scenario: content (Alternative Scenario: content=1 )

Project: mytcuml
 Class: DialogFloatContainerTests
 Method: testDock4_Accuracy3
 Body: {
        // dock the dock in previousContainer
        previousContainer.dock(dock);
        assertEquals("The dock's current dock container should be previousContainer.",
                previousContainer, dock.getCurrentDockContainer());
        // dock this dock
        container.dock(dock, new Point(10, 10), 1);
        assertTrue("The container should be docked.", container.isDocked());
        assertEquals("The dock's current dock container should be container.",
                container, dock.getCurrentDockContainer());
        Field field = DialogFloatContainer.class.getDeclaredField("previousContainer");
        field.setAccessible(true);
        assertEquals("The dock's previous container should be previousContainer.",
                previousContainer, field.get(container));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: dock (Alternative Action: getCurrentDockContainer=2 ) - Predicate: getCurrentDockContainer - Scenario: field (Alternative Scenario: field=1 )

Project: mytcuml
 Class: DialogFloatContainerTests
 Method: testDock1_Accuracy3
 Body: {
        // dock the dock in previousContainer
        previousContainer.dock(dock);
        assertEquals("The dock's current dock container should be previousContainer.",
                previousContainer, dock.getCurrentDockContainer());
        // dock this dock
        container.dock(dock);
        assertTrue("The container should be docked.", container.isDocked());
        assertEquals("The dock's current dock container should be container.",
                container, dock.getCurrentDockContainer());
        Field field = DialogFloatContainer.class.getDeclaredField("previousContainer");
        field.setAccessible(true);
        assertEquals("The dock's previous container should be previousContainer.",
                previousContainer, field.get(container));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: dock (Alternative Action: getCurrentDockContainer=2 ) - Predicate: getCurrentDockContainer - Scenario: field (Alternative Scenario: field=1 )

Project: mytcuml
 Class: NamePropertyPanelAccuracyTests
 Method: testExecute
 Body: {
        instance.configurePanel(new AssociationEndImpl());
        ModelElementChangeListenerMock listener = new ModelElementChangeListenerMock();
        propertiesPanel.addModelElementChangeListener(listener);
        instance.execute();

        assertTrue("Failed to execute.", listener.IsCalled());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addModelElementChangeListener (Alternative Action: configurePanel=1 ) - Predicate: IsCalled - Scenario: listener (Alternative Scenario: listener=1 )

Project: mytcuml
 Class: NamePropertyPanelAccuracyTests
 Method: testRefreshPanel
 Body: {
        Transition element = new TransitionImpl();
        element.setName("NameProperty");
        instance.configurePanel(element);

        JFormattedTextField textField = (JFormattedTextField) AccuracyTestsHelper.getChildComponents(
            instance.retrievePanel(), JFormattedTextField.class)[0];
        assertEquals("Failed to refresh panel.", "NameProperty", textField.getText());
        assertEquals("Failed to refresh panel.", "NameProperty", textField.getValue());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: configurePanel (Alternative Action: setName=1 ) - Predicate: getText - Scenario: textField (Alternative Scenario: textField=1 )

Project: mytcuml
 Class: StereotypeListPropertyPanelTests
 Method: testRefreshPanel
 Body: {
        Stereotype stereoType = new StereotypeImpl();
        Interface element = new InterfaceImpl();
        element.addStereotype(stereoType);
        panel.configurePanel(element);

        JScrollPane scrollPane = (JScrollPane) panel.retrievePanel().getComponent(2);
        assertEquals("Failed to refresh panel correctly.", deleteIcon,
            ((JTable) ((JPanel) scrollPane.getViewport().getView()).getComponent(0))
            .getModel().getValueAt(0, 1));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: configurePanel (Alternative Action: getComponent=2 ) - Predicate: getValueAt - Scenario: scrollPane (Alternative Scenario: scrollPane=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testClearLifelines
 Body: {
        Interaction interaction = new InteractionImpl();

        interaction.addLifeline(new LifelineImpl());
        interaction.addLifeline(new LifelineImpl());

        assertEquals("The Lifelines has 2 elements now.", 2,
            interaction.getLifelines().size());

        interaction.clearLifelines();
        assertEquals("The Lifeline should be cleared.", 0,
            interaction.getLifelines().size());

        //It should process successfully
        interaction.clearLifelines();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLifeline (Alternative Action: clearLifelines=2 ) - Predicate: size - Scenario: interaction (Alternative Scenario: interaction=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testAddMessage
 Body: {
        Interaction interaction = new InteractionImpl();

        assertTrue("The Messages should be empty as default.",
            interaction.getMessages().isEmpty());

        interaction.addMessage(new MessageImpl());
        assertEquals("The Message's size is 1.", 1,
            interaction.getMessages().size());

        interaction.addMessage(new MessageImpl());
        assertEquals("The Message's size is 2.", 2,
            interaction.getMessages().size());

        Message msg = new MessageImpl();

        //duplicate message is allowed
        interaction.addMessage(msg);
        interaction.addMessage(msg);

        assertEquals("The Messages should have 4 elements.", 4,
            interaction.getMessages().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addMessage (Alternative Action: getMessages=4 ) - Predicate: isEmpty - Scenario: interaction (Alternative Scenario: msg=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testTCUMLElement2
 Body: {
        Interaction interaction = new InteractionImpl();

        Lifeline line = new LifelineImpl();
        line.setRepresents(new AttributeImpl());
        interaction.addLifeline(line);

        Message msg = new MessageImpl();
        msg.setReceiveEvent(new EventOccurrenceImpl());
        interaction.addMessage(msg);

        assertEquals("The toTCUMLElement should always return the same instance.",
            interaction.toTCUMLElement(), interaction.toTCUMLElement());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setReceiveEvent (Alternative Action: toTCUMLElement=2 ) - Predicate: toTCUMLElement - Scenario: msg (Alternative Scenario: msg=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testAddLifeline
 Body: {
        Interaction interaction = new InteractionImpl();

        assertTrue("The Lifelines should be empty as default.",
            interaction.getLifelines().isEmpty());

        interaction.addLifeline(new LifelineImpl());
        assertEquals("The Lifeline's size is 1.", 1,
            interaction.getLifelines().size());

        interaction.addLifeline(new LifelineImpl());
        assertEquals("The Lifeline's size is 2.", 2,
            interaction.getLifelines().size());

        Lifeline line = new LifelineImpl();

        //duplicate line is allowed
        interaction.addLifeline(line);
        interaction.addLifeline(line);

        assertEquals("The Lifelines should have 4 elements.", 4,
            interaction.getLifelines().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLifeline (Alternative Action: addLifeline=4 ) - Predicate: isEmpty - Scenario: interaction (Alternative Scenario: line=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testRemoveMessage
 Body: {
        Interaction interaction = new InteractionImpl();

        //It should process successfully
        interaction.removeMessage(new MessageImpl());

        Message msg = new MessageImpl();
        interaction.addMessage(msg);
        interaction.addMessage(new MessageImpl());

        assertEquals("The Messages should have 2 elements.", 2,
            interaction.getMessages().size());

        interaction.removeMessage(msg);
        assertEquals("The message should be removed.", 1,
            interaction.getMessages().size());

        //The message to be removed doesn't exist.
        interaction.removeMessage(new MessageImpl());
        assertEquals("The message should not be removed.", 1,
            interaction.getMessages().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addMessage (Alternative Action: size=3 ) - Predicate: size - Scenario: msg (Alternative Scenario: msg=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testRemoveLifeline
 Body: {
        Interaction interaction = new InteractionImpl();

        //It should process successfully
        interaction.removeLifeline(new LifelineImpl());

        Lifeline line = new LifelineImpl();
        interaction.addLifeline(line);
        interaction.addLifeline(new LifelineImpl());

        assertEquals("The Lifelines should have 2 elements.", 2,
            interaction.getLifelines().size());

        interaction.removeLifeline(line);
        assertEquals("The lifeline should be removed.", 1,
            interaction.getLifelines().size());

        //The lifeline to be removed doesn't exist.
        interaction.removeLifeline(new LifelineImpl());
        assertEquals("The lifeline should not be removed.", 1,
            interaction.getLifelines().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLifeline (Alternative Action: removeLifeline=3 ) - Predicate: size - Scenario: line (Alternative Scenario: line=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testTCUMLElement1
 Body: {
        Interaction interaction = new InteractionImpl();

        Lifeline line = new LifelineImpl();
        line.setRepresents(new AttributeImpl());
        interaction.addLifeline(line);

        Message msg = new MessageImpl();
        msg.setReceiveEvent(new EventOccurrenceImpl());
        interaction.addMessage(msg);

        Collaboration collaboration = interaction.toTCUMLElement();
        assertNotNull("Unable to transform to Collaboration.", collaboration);

        assertEquals("There should be a collaboration instance set.", 1,
            collaboration.getCollaborationInstanceSets().size());
        assertEquals("There should 2 ownedelements.", 2,
            collaboration.getOwnedElements().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addMessage (Alternative Action: size=2 ) - Predicate: N/A - Scenario: collaboration (Alternative Scenario: msg=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testGetLifelines
 Body: {
        Interaction interaction = new InteractionImpl();

        assertEquals("The default lifelines is empty.", 0,
            interaction.getLifelines().size());

        interaction.addLifeline(new LifelineImpl());
        assertEquals("The Lifeline's size is 1.", 1,
            interaction.getLifelines().size());

        //It's a shadow copy, so the original should not be changed.
        interaction.getLifelines().clear();
        assertEquals("The Lifeline's size is 1.", 1,
            interaction.getLifelines().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addLifeline (Alternative Action: getLifelines=4 ) - Predicate: size - Scenario: interaction (Alternative Scenario: interaction=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testClearMessages
 Body: {
        Interaction interaction = new InteractionImpl();

        interaction.addMessage(new MessageImpl());
        interaction.addMessage(new MessageImpl());

        assertEquals("The Messages has 2 elements now.", 2,
            interaction.getMessages().size());

        interaction.clearMessages();
        assertEquals("The Message should be cleared.", 0,
            interaction.getMessages().size());

        //It should process successfully
        interaction.clearMessages();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addMessage (Alternative Action: size=2 ) - Predicate: size - Scenario: interaction (Alternative Scenario: interaction=1 )

Project: mytcuml
 Class: InteractionImplUnitTest
 Method: testGetMessages
 Body: {
        Interaction interaction = new InteractionImpl();

        assertEquals("The default Messages is empty.", 0,
            interaction.getMessages().size());

        interaction.addMessage(new MessageImpl());
        assertEquals("The Message's size is 1.", 1,
            interaction.getMessages().size());

        //It's a shadow copy, so the original should not be changed.
        interaction.getMessages().clear();
        assertEquals("The Message's size is 1.", 1,
            interaction.getMessages().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addMessage (Alternative Action: getMessages=4 ) - Predicate: size - Scenario: interaction (Alternative Scenario: interaction=1 )

Project: mytcuml
 Class: EnumerationNodeTest
 Method: testGUI
 Body: {

        TextChangedListener textListener = new TextChangedListener() {
            public void textChanged(TextChangedEvent event) {
                TextField compartment = (TextField) event.getSource();
                compartment.setText(event.getNewText());
            }
        };
        // register the listener
        enumerationNode.getNameCompartment().addTextChangedListener(textListener);

        // Then add the node to the container to show it
        enumerationNode.setName("EnumerationNode");
        enumerationNode.setVisible(true);
        TestUtil.loadConfig("test_files/DiagramViewer.xml");
        DiagramViewer viewer = new DiagramViewer("DiagramViewer");
        viewer.add(enumerationNode);

        JDialog dialog = new JDialog((JFrame) null, "EnumerationNode", true);
        dialog.setSize(500, 500);
        dialog.getContentPane().add(viewer);
        dialog.setModal(false);
        dialog.setVisible(true);
        NamedComponentFinder finder = new NamedComponentFinder(JComponent.class, "EnumerationNode");
        EnumerationNode node = (EnumerationNode) finder.find(dialog, 0);
        assertNotNull("EnumerationNode component should be displayed", node);

        helper.enterClickAndLeave(new MouseEventData(this, viewer, 1, true));

        TextField nameCompartment = node.getNameCompartment();
        helper.enterClickAndLeave(new MouseEventData(this, nameCompartment, 2));
        sleep(100);
        dialog.dispose();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setVisible (Alternative Action: add=2 ) - Predicate: N/A - Scenario: finder (Alternative Scenario: node=1 )

Project: mytcuml
 Class: EnumerationNodeTest
 Method: testNotifyGraphNodeChange
 Body: {
        Classifier classifier = (Classifier) TestUtil.getElement(graphNode);
        classifier.addFeature(TestUtil.createOperation("operation_4", "void", "parameter_4", "double"));

        Rectangle oldBound = enumerationNode.getSelectionBound();
        enumerationNode.addBoundaryChangedListener(boundChangedListener);
        enumerationNode.notifyGraphNodeChange("New operation added.");
        Rectangle newBound = enumerationNode.getSelectionBound();
        assertTrue("The size should increase.", newBound.height > oldBound.height);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: notifyGraphNodeChange (Alternative Action: getSelectionBound=2 ) - Predicate: N/A - Scenario: newBound (Alternative Scenario: newBound=1 )

Project: mytcuml
 Class: EnumerationNodeTest
 Method: testNotifyEnumerationLiteralVisibilityChange
 Body: {
        int oldHeight = enumerationNode.getHeight();
        graphNode.getContaineds().get(2).setVisible(false);
        enumerationNode.notifyEnumerationLiteralVisibilityChange();
        /*
         * BugFix: BUGID UML-8195
         * Description:
         * In calculateSize, at the end of the method, the calculated size should also be compared with the user
         * defined size.
         * In notifyGraphNodeChange, the calculated preferred size should be set to the graph node to keep consistency.
         * Solution:
         * Code is added to compare with the user defined size.
         * Set the calculated size to the graph node to keep consistency.
         */
        // old code
//        assertTrue("Bound of this node should be changed.", enumerationNode.getHeight() < oldHeight);
        assertTrue("Bound of this node should be changed.", enumerationNode.getHeight() == oldHeight);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setVisible (Alternative Action: getHeight=2 ) - Predicate: N/A - Scenario: oldHeight (Alternative Scenario: oldHeight=1 )

Project: mytcuml
 Class: StateMachineImplAccuracyTests
 Method: test_clearTransition
 Body: {
        Transition transition = new TransitionImpl();
        stateMachineImpl.addTransition(transition);
        stateMachineImpl.clearTransitions();

        assertEquals("the Transition is not cleared successfully.", 0, stateMachineImpl.countTransitions());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTransition (Alternative Action: clearTransitions=1 ) - Predicate: countTransitions - Scenario: transition (Alternative Scenario: transition=1 )

Project: mytcuml
 Class: StateMachineImplAccuracyTests
 Method: test_getTransition
 Body: {
        Transition transition = new TransitionImpl();
        stateMachineImpl.addTransition(transition);
        
        Collection<Transition> collection = stateMachineImpl.getTransitions();
        assertEquals("the Transition is not added successfully.", 1, collection.size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTransition (Alternative Action: getTransitions=1 ) - Predicate: size - Scenario: collection (Alternative Scenario: collection=1 )

Project: mytcuml
 Class: StateMachineImplAccuracyTests
 Method: test_removeTransition
 Body: {
        Transition transition = new TransitionImpl();
        stateMachineImpl.addTransition(transition);
        stateMachineImpl.removeTransition(transition);

        assertEquals("the Transition is not removed successfully.", 0, stateMachineImpl.countTransitions());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTransition (Alternative Action: removeTransition=1 ) - Predicate: countTransitions - Scenario: transition (Alternative Scenario: transition=1 )

Project: mytcuml
 Class: StateMachineImplAccuracyTests
 Method: test_aetTransition
 Body: {
        Transition transition = new TransitionImpl();
        stateMachineImpl.addTransition(transition);
        
        Collection<Transition> collection = stateMachineImpl.getTransitions();
        assertEquals("the Transition is not added successfully.", 1, collection.size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTransition (Alternative Action: getTransitions=1 ) - Predicate: size - Scenario: collection (Alternative Scenario: collection=1 )

Project: mytcuml
 Class: CommentNodeTests
 Method: testContains
 Body: {
        dimension.setWidth(3);
        dimension.setHeight(4);
        graphNode.setSize(dimension);
        Point point = new Point();
        point.setX(1);
        point.setY(2);
        graphNode.setPosition(point);
        node.notifyUpdate();

        assertTrue("This node should contain point (5, 5).", node.contains(5, 5));
        assertFalse("This node should not contain point (2, 30).", node.contains(2, 30));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setX (Alternative Action: contains=2 ) - Predicate: contains - Scenario: point (Alternative Scenario: point=1 )

Project: mytcuml
 Class: TextInputBoxAccuracyTests
 Method: testRemoveTextInputListener
 Body: {
        TextInputListener listener = new TextInputListenerImpl();
        box.addTextInputListener(listener);
        box.addTextInputListener(null);
        assertEquals("Fail to call method: addTextInputListener(TextInputListener listener).", box
                .getListeners(TextInputListener.class)[0], listener);
        assertEquals("Fail to call method: addTextInputListener(TextInputListener listener).", box
                .getListeners(TextInputListener.class).length, 1);
        box.removeTextInputListener(listener);
        assertEquals("Fail to call method: addTextInputListener(TextInputListener listener).", box
                .getListeners(TextInputListener.class).length, 0);
        box.removeTextInputListener(listener);
        box.removeTextInputListener(null);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTextInputListener (Alternative Action: getListeners=3 ) - Predicate: N/A - Scenario: listener (Alternative Scenario: listener=1 )

Project: mytcuml
 Class: TextInputBoxAccuracyTests
 Method: testAddTextInputListener
 Body: {
        TextInputListener listener = new TextInputListenerImpl();
        box.addTextInputListener(listener);
        box.addTextInputListener(null);
        assertEquals("Fail to call method: addTextInputListener(TextInputListener listener).", box
                .getListeners(TextInputListener.class)[0], listener);
        assertEquals("Fail to call method: addTextInputListener(TextInputListener listener).", box
                .getListeners(TextInputListener.class).length, 1);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addTextInputListener (Alternative Action: getListeners=2 ) - Predicate: N/A - Scenario: listener (Alternative Scenario: listener=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testClass
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000079C");

        // verify the type
        assertTrue("Expects Class instance.", obj != null && obj instanceof Class);

        Class type = (Class) obj;

        // verify the Class properties
        assertEquals("Failed to get correct name.", "HelloWorld", type.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, type.getVisibility());
        assertFalse("Failed to get correct specification value.", type.isSpecification());
        assertFalse("Failed to get correct leaf value.", type.isLeaf());
        assertFalse("Failed to get correct root value.", type.isRoot());
        assertFalse("Failed to get correct abstract value.", type.isAbstract());
        assertFalse("Failed to get correct active value.", type.isActive());
        assertEquals("Failed to get correct size of features.", 5, type.getFeatures().size());

        List<Feature> features = type.getFeatures();
        Feature feature = features.get(0);
        assertTrue("Failed to get correct feature.", feature instanceof Attribute);
        assertEquals("Failed to get correct feature.", "newAttr", feature.getName());

        feature = features.get(1);
        assertTrue("Failed to get correct feature.", feature instanceof Operation);
        assertEquals("Failed to get correct feature.", "newOperation", feature.getName());

        feature = features.get(2);
        assertTrue("Failed to get correct feature.", feature instanceof Attribute);
        assertEquals("Failed to get correct feature.", "newAttr", feature.getName());

        feature = features.get(3);
        assertTrue("Failed to get correct feature.", feature instanceof Method);
        assertEquals("Failed to get correct feature.", "newOperation", feature.getName());

        feature = features.get(4);
        assertTrue("Failed to get correct feature.", feature instanceof Method);
        assertEquals("Failed to get correct feature.", "newOperation", feature.getName());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getName=6 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: features=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testAssociationEnd
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007AB");

        // verify the type
        assertTrue("Expects AssociationEnd instance.", obj != null && obj instanceof AssociationEnd);

        AssociationEnd associationEnd = (AssociationEnd) obj;

        // verify the AssociationEnd properties
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, associationEnd.getVisibility());
        assertFalse("Failed to get correct specification value.", associationEnd.isSpecification());
        assertTrue("Failed to get correct navigable value.", associationEnd.isNavigable());
        assertEquals("Failed to get correct ordering", OrderingKind.UNORDERED, associationEnd.getOrdering());
        assertEquals("Failed to get correct aggregation kind", AggregationKind.NONE, associationEnd.getAggregation());
        assertEquals("Failed to get correct target scope kind", ScopeKind.INSTANCE, associationEnd.getTargetKind());
        assertEquals("Failed to get correct changeability", ChangeableKind.CHANGEABLE,
            associationEnd.getChangeability());
        assertNotNull("The multiplicity property should be set.", associationEnd.getMultiplicity());
        assertNotNull("The participant property should be set.", associationEnd.getParticipant());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testProcedureExpression
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000834");

        // verify the type
        assertTrue("Expects ProcedureExpression instance.", obj != null && obj instanceof ProcedureExpression);

        ProcedureExpression expression = (ProcedureExpression) obj;

        // verify the ProcedureExpression properties
        assertEquals("Failed to get correct language.", "Java", expression.getLanguage());
        assertEquals("Failed to get correct body.", "System.out.println(\"Yes\");", expression.getBody().trim());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getLanguage=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: expression=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testMultiplicity
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007A2");

        // verify the type
        assertTrue("Expects Multiplicity instance.", obj != null && obj instanceof Multiplicity);

        Multiplicity multiplicity = (Multiplicity) obj;

        // verify the Multiplicity properties
        assertEquals("Failed to get correct size of multiplicity ranges", 1, multiplicity.getRanges().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: multiplicity=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testMultiplicityRange
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007A3");

        // verify the type
        assertTrue("Expects MultiplicityRange instance.", obj != null && obj instanceof MultiplicityRange);

        MultiplicityRange multiplicityRange = (MultiplicityRange) obj;

        // verify the MultiplicityRange properties
        assertEquals("Failed to get correct lower value.", 1, multiplicityRange.getLower());
        assertEquals("Failed to get correct upper value.", 1, multiplicityRange.getUpper());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getElement=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: multiplicityRange=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testExpression
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000082F");

        // verify the type
        assertTrue("Expects Expression instance.", obj != null && obj instanceof Expression);

        Expression expression = (Expression) obj;

        // verify the Expression properties
        assertEquals("Failed to get correct language.", "Java", expression.getLanguage());
        assertEquals("Failed to get correct body.", "19", expression.getBody());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getLanguage=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: expression=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testEnumerationLiteral
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000837");

        // verify the type
        assertTrue("Expects EnumerationLiteral instance.", obj != null && obj instanceof EnumerationLiteral);

        EnumerationLiteral enumerationLiteral = (EnumerationLiteral) obj;

        // verify the EnumerationLiteral properties
        assertEquals("Failed to get correct name.", "anon", enumerationLiteral.getName());
        assertFalse("Failed to get correct specification value.", enumerationLiteral.isSpecification());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testBooleanExpression
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000086F");

        // verify the type
        assertTrue("Expects BooleanExpression instance.", obj != null && obj instanceof BooleanExpression);

        BooleanExpression expression = (BooleanExpression) obj;

        // verify the BooleanExpression properties
        assertEquals("Failed to get correct language.", "Java", expression.getLanguage());
        assertEquals("Failed to get correct body.", "value1", expression.getBody());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getLanguage=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: expression=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testAssociation
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007B3");

        // verify the type
        assertTrue("Expects Association instance.", obj != null && obj instanceof Association);

        Association association = (Association) obj;

        // verify the Association properties
        assertEquals("Failed to get correct name.", "assoc", association.getName());
        assertFalse("Failed to get correct specification value.", association.isSpecification());
        assertFalse("Failed to get correct leaf value.", association.isLeaf());
        assertFalse("Failed to get correct root value.", association.isRoot());
        assertFalse("Failed to get correct abstract value.", association.isAbstract());
        assertEquals("Failed to get correct size of connections.", 2, association.getConnections().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testComment
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007D9");

        // verify the type
        assertTrue("Expects Comment instance.", obj != null && obj instanceof Comment);

        Comment comment = (Comment) obj;

        // verify the Comment properties
        assertFalse("Failed to get correct specification value.", comment.isSpecification());
        assertEquals("Failed to get correct size of annotated elements.", 1, comment.getAnnotatedElements().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testStereotype
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000871");

        // verify the type
        assertTrue("Expects Stereotype instance.", obj != null && obj instanceof Stereotype);

        Stereotype stereotype = (Stereotype) obj;

        // verify the Stereotype properties
        assertEquals("Failed to get correct name.", "callAction1", stereotype.getName());
        assertEquals("Failed to get correct base class value.", "CallAction", stereotype.getBaseClass());
        assertFalse("Failed to get correct specification value.", stereotype.isSpecification());
        assertFalse("Failed to get correct leaf value.", stereotype.isLeaf());
        assertFalse("Failed to get correct root value.", stereotype.isRoot());
        assertFalse("Failed to get correct abstract value.", stereotype.isAbstract());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testModel
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000077B");

        // verify the type
        assertTrue("Expects Model instance.", obj != null && obj instanceof Model);

        Model model = (Model) obj;

        // verify the Model properties
        assertEquals("Failed to get correct name.", "untitledModel", model.getName());
        assertFalse("Failed to get correct specification value.", model.isSpecification());
        assertFalse("Failed to get correct leaf value.", model.isLeaf());
        assertFalse("Failed to get correct root value.", model.isRoot());
        assertFalse("Failed to get correct abstract value.", model.isAbstract());

        assertEquals("Failed to get correct size of owned elements.", 41, model.getOwnedElements().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testTaggedValue
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000812");

        // verify the type
        assertTrue("Expects TaggedValue instance.", obj != null && obj instanceof TaggedValue);

        TaggedValue taggedValue = (TaggedValue) obj;

        // verify the TaggedValue properties
        assertEquals("Failed to get correct name.", "HelloWorld", taggedValue.getDataValue());
        assertFalse("Failed to get correct specification value.", taggedValue.isSpecification());
        assertNotNull("The type property should be set.", taggedValue.getType());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testAssociationClass
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007AA");

        // verify the type
        assertTrue("Expects AssociationClass instance.", obj != null && obj instanceof AssociationClass);

        AssociationClass associationClass = (AssociationClass) obj;

        // verify the AssociationClass properties
        assertEquals("Failed to get correct name.", "MyAssociationClass", associationClass.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, associationClass.getVisibility());
        assertFalse("Failed to get correct specification value.", associationClass.isSpecification());
        assertFalse("Failed to get correct leaf value.", associationClass.isLeaf());
        assertFalse("Failed to get correct root value.", associationClass.isRoot());
        assertFalse("Failed to get correct abstract value.", associationClass.isAbstract());
        assertFalse("Failed to get correct active value.", associationClass.isActive());
        assertEquals("Failed to get correct size of client dependencies.", 1,
            associationClass.getClientDependencies().size());
        assertEquals("Failed to get correct size of connections.", 2, associationClass.getConnections().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=2 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: associationClass=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testUseCase
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007D7");

        // verify the type
        assertTrue("Expects UseCase instance.", obj != null && obj instanceof UseCase);

        UseCase useCase = (UseCase) obj;

        // verify the UseCase properties
        assertFalse("Failed to get correct specification value.", useCase.isSpecification());
        assertFalse("Failed to get correct leaf value.", useCase.isLeaf());
        assertFalse("Failed to get correct root value.", useCase.isRoot());
        assertFalse("Failed to get correct abstract value.", useCase.isAbstract());
        assertEquals("Failed to get correct size of generalizations.", 1, useCase.getGeneralizations().size());
        assertEquals("Failed to get correct size of includes.", 1, useCase.getIncludes().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=2 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: useCase=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testActor
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007D6");

        // verify the type
        assertTrue("Expects Actor instance.", obj != null && obj instanceof Actor);

        Actor actor = (Actor) obj;

        // verify the Actor properties
        assertFalse("Failed to get correct specification value.", actor.isSpecification());
        assertFalse("Failed to get correct leaf value.", actor.isLeaf());
        assertFalse("Failed to get correct root value.", actor.isRoot());
        assertFalse("Failed to get correct abstract value.", actor.isAbstract());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: actor=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testAttribute
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000083A");

        // verify the type
        assertTrue("Expects Attribute instance.", obj != null && obj instanceof Attribute);

        Attribute attribute = (Attribute) obj;

        // verify the Attribute properties
        assertEquals("Failed to get correct name.", "newAttr", attribute.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, attribute.getVisibility());
        assertFalse("Failed to get correct specification value.", attribute.isSpecification());
        assertEquals("Failed to get correct owner scope kind", ScopeKind.INSTANCE, attribute.getOwnerScope());
        assertEquals("Failed to get correct target scope kind", ScopeKind.INSTANCE, attribute.getTargetScope());
        assertEquals("Failed to get correct changeability", ChangeableKind.CHANGEABLE, attribute.getChangeability());
        assertNotNull("The multiplicity property should be set.", attribute.getMultiplicity());
        assertNotNull("The initial value property should be set.", attribute.getInitialValue());
        assertNotNull("The type property should be set.", attribute.getType());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getOwnerScope=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testParameter
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007A6");

        // verify the type
        assertTrue("Expects Parameter instance.", obj != null && obj instanceof Parameter);

        Parameter parameter = (Parameter) obj;

        // verify the Parameter properties
        assertEquals("Failed to get correct name.", "return", parameter.getName());
        assertFalse("Failed to get correct specification value.", parameter.isSpecification());
        assertEquals("Failed to get correct parameter direction kind.", ParameterDirectionKind.RETURN,
            parameter.getKind());
        assertNotNull("The type parameter should be set.", parameter.getType());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testInterface
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000079E");

        // verify the type
        assertTrue("Expects Interface instance.", obj != null && obj instanceof Interface);

        Interface type = (Interface) obj;

        // verify the Interface properties
        assertEquals("Failed to get correct name.", "MyInterface", type.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, type.getVisibility());
        assertFalse("Failed to get correct specification value.", type.isSpecification());
        assertFalse("Failed to get correct leaf value.", type.isLeaf());
        assertFalse("Failed to get correct root value.", type.isRoot());
        assertFalse("Failed to get correct abstract value.", type.isAbstract());
        assertEquals("Failed to get correct size of stereotypes.", 1, type.getStereotypes().size());
        assertEquals("Failed to get correct size of features.", 0, type.getFeatures().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=2 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testPackage
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:000000000000079B");

        // verify the type
        assertTrue("Expects Package instance.", obj != null && obj instanceof Package);

        Package pkg = (Package) obj;

        // verify the Package properties
        assertFalse("Failed to get correct specification value.", pkg.isSpecification());
        assertFalse("Failed to get correct leaf value.", pkg.isLeaf());
        assertFalse("Failed to get correct root value.", pkg.isRoot());
        assertFalse("Failed to get correct abstract value.", pkg.isAbstract());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testTagDefinition
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000813");

        // verify the type
        assertTrue("Expects TagDefinition instance.", obj != null && obj instanceof TagDefinition);

        TagDefinition tagDefinition = (TagDefinition) obj;

        // verify the TagDefinition properties
        assertEquals("Failed to get correct name.", "documentation", tagDefinition.getName());
        assertFalse("Failed to get correct specification value.", tagDefinition.isSpecification());
        assertEquals("Failed to get correct tag type value.", "String", tagDefinition.getTagType());
        assertNotNull("The multiplicity property should be set.", tagDefinition.getMultiplicity());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: tagDefinition=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testInclude
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007DA");

        // verify the type
        assertTrue("Expects Include instance.", obj != null && obj instanceof Include);

        Include include = (Include) obj;

        // verify the Include properties
        assertFalse("Failed to get correct specification value.", include.isSpecification());
        assertNotNull("The addition property should be set.", include.getAddition());
        assertNotNull("The addition property should be set.", include.getBase());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: include=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testOperation
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007A5");

        // verify the type
        assertTrue("Expects Operation instance.", obj != null && obj instanceof Operation);

        Operation operation = (Operation) obj;

        // verify the Operation properties
        assertEquals("Failed to get correct name.", "newOperation", operation.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, operation.getVisibility());
        assertFalse("Failed to get correct specification value.", operation.isSpecification());
        assertFalse("Failed to get correct query value.", operation.isQuery());
        assertFalse("Failed to get correct leaf value.", operation.isLeaf());
        assertFalse("Failed to get correct root value.", operation.isRoot());
        assertFalse("Failed to get correct abstract value.", operation.isAbstract());
        assertEquals("Failed to get correct owner scope kind", ScopeKind.INSTANCE, operation.getOwnerScope());
        assertEquals("Failed to get correct concurrency kind", CallConcurrencyKind.SEQUENTIAL,
            operation.getConcurrency());
        assertEquals("Failed to get correct size of parameters", 1, operation.getParameters().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getOwnerScope=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testGeneralization
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007D0");

        // verify the type
        assertTrue("Expects Generalization instance.", obj != null && obj instanceof Generalization);

        Generalization generalization = (Generalization) obj;

        // verify the Generalization properties
        assertFalse("Failed to get correct specification value.", generalization.isSpecification());
        assertEquals("Failed to get correct size of stereotypes.", 1, generalization.getStereotypes().size());
        assertNotNull("The body property should be set.", generalization.getChild());
        assertNotNull("The specification property should be set.", generalization.getParent());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: generalization=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testMethod
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:0000000000000833");

        // verify the type
        assertTrue("Expects Method instance.", obj != null && obj instanceof Method);

        Method method = (Method) obj;

        // verify the Method properties
        assertEquals("Failed to get correct name.", "newOperation", method.getName());
        assertEquals("Failed to get correct visibility", VisibilityKind.PUBLIC, method.getVisibility());
        assertFalse("Failed to get correct specification value.", method.isSpecification());
        assertFalse("Failed to get correct query value.", method.isQuery());
        assertEquals("Failed to get correct owner scope kind", ScopeKind.INSTANCE, method.getOwnerScope());
        assertNotNull("The body property should be set.", method.getBody());
        assertNotNull("The specification property should be set.", method.getSpecification());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: getOwnerScope=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: method=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testAbstraction
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007D2");

        // verify the type
        assertTrue("Expects Abstraction instance.", obj != null && obj instanceof Abstraction);

        Abstraction abstraction = (Abstraction) obj;

        // verify the Abstraction properties
        assertFalse("Failed to get correct specification value.", abstraction.isSpecification());
        assertEquals("Failed to get correct size of stereotypes.", 1, abstraction.getStereotypes().size());
        assertEquals("Failed to get correct size of suppliers.", 1, abstraction.getSuppliers().size());
        assertEquals("Failed to get correct size of clients.", 1, abstraction.getClients().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: size=3 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: XMI2ModelHandlerTests
 Method: testDataType
 Body: {
        reader.parse(new File("test_files" + File.separator + "model_sample.xmi"));

        Object obj = reader.getElement("-64--88-1-55--1e9f2c8:10f94402c4c:-8000:00000000000007A0");

        // verify the type
        assertTrue("Expects DataType instance.", obj != null && obj instanceof DataType);

        DataType type = (DataType) obj;

        // verify the DataType properties
        assertEquals("Failed to get correct name.", "int", type.getName());
        assertFalse("Failed to get correct specification value.", type.isSpecification());
        assertFalse("Failed to get correct leaf value.", type.isLeaf());
        assertFalse("Failed to get correct root value.", type.isRoot());
        assertFalse("Failed to get correct abstract value.", type.isAbstract());
        assertEquals("Failed to get correct size of features.", 0, type.getFeatures().size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: parse (Alternative Action: isSpecification=1 ) - Predicate: N/A - Scenario: obj (Alternative Scenario: obj=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testRemoveTabAtAccuracy1
 Body: {
        // Prepare a tab
        JComponent component = new JTextArea();
        LineBorder oldBorder = new LineBorder(new Color(2, 2, 2));
        component.setBorder(oldBorder);

        // Insert it
        pane = new ClosableTabbedPane();
        pane.setInteriorBorder(interiorBorder);
        pane.insertTab("title", null, component, null, 0);

        // Remove it
        pane.removeTabAt(0);

        // Retrieve it
        assertEquals("insertTab incorrect", oldBorder, component.getBorder());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setBorder (Alternative Action: getBorder=1 ) - Predicate: getBorder - Scenario: oldBorder (Alternative Scenario: component=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testInsertTabAccuracy5
 Body: {
        // Prepare a tab
        JComponent component = new JTextArea();

        // Insert it
        pane.setSelectedIndex(0);
        pane.insertTab("title", null, component, null, 1);

        assertEquals("insertTab incorrect", 0, pane.getSelectedIndex());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: setSelectedIndex (Alternative Action: getSelectedIndex=1 ) - Predicate: getSelectedIndex - Scenario: component (Alternative Scenario: component=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testRemoveClosableTabbedPaneEventHandlerAccuracy2
 Body: {
        MockClosableTabbedPaneEventHandler handler1 = new MockClosableTabbedPaneEventHandler();
        // Add it
        pane.addClosableTabbedPaneEventHandler(handler1);
        pane.removeClosableTabbedPaneEventHandler(handler1);
        assertEquals("addClosableTabbedPaneEventHandler incorrect", 0,
            pane.getClosableTabbedPaneEventHandlers().length);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addClosableTabbedPaneEventHandler (Alternative Action: removeClosableTabbedPaneEventHandler=1 ) - Predicate: N/A - Scenario: handler1 (Alternative Scenario: handler1=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testClosableTabbedPane4_Accuracy1
 Body: {
        addConfig("config1.xml");
        pane = new ClosableTabbedPane("myNamespace");
        // Check if all properties are set properly
        assertEquals("ClosableTabbedPane(String) incorrect", true, ((DirectionalActiveTabSelector) pane
            .getActiveTabSelector()).isIncreasingIndexDirection());
        checkImage(pane.getCloseButtonImage(CloseButtonState.ACTIVE_TAB_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.ACTIVE_TAB_NOT_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.INACTIVE_TAB_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.INACTIVE_TAB_NOT_HOVERED));
        assertEquals("ClosableTabbedPane(String) incorrect", new Dimension(5, 4), pane.getCloseButtonPadding());
        LineBorder border = (LineBorder) pane.getInteriorBorder();
        assertEquals("ClosableTabbedPane(String) incorrect", new Color(0x4F, 0xAE, 0x52), border.getLineColor());
        assertEquals("ClosableTabbedPane(String) incorrect", 7, border.getThickness());
        assertEquals("ClosableTabbedPane(String) incorrect", true, border.getRoundedCorners());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addConfig (Alternative Action: checkImage=4 ) - Predicate: isIncreasingIndexDirection - Scenario: border (Alternative Scenario: border=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testClosableTabbedPane4_Accuracy5
 Body: {
        addConfig("config5.xml");
        pane = new ClosableTabbedPane("myNamespace");
        // Check if all properties are set properly
        assertEquals("ClosableTabbedPane(String) incorrect", true, ((DirectionalActiveTabSelector) pane
            .getActiveTabSelector()).isIncreasingIndexDirection());
        checkImage(pane.getCloseButtonImage(CloseButtonState.ACTIVE_TAB_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.ACTIVE_TAB_NOT_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.INACTIVE_TAB_HOVERED));
        checkImage(pane.getCloseButtonImage(CloseButtonState.INACTIVE_TAB_NOT_HOVERED));
        assertEquals("ClosableTabbedPane(String) incorrect", new Dimension(5, 4), pane.getCloseButtonPadding());
        LineBorder border = (LineBorder) pane.getInteriorBorder();
        assertEquals("ClosableTabbedPane(String) incorrect", new Color(0x4F, 0xAE, 0x52), border.getLineColor());
        assertEquals("ClosableTabbedPane(String) incorrect", 7, border.getThickness());
        assertEquals("ClosableTabbedPane(String) incorrect", true, border.getRoundedCorners());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addConfig (Alternative Action: checkImage=4 ) - Predicate: isIncreasingIndexDirection - Scenario: border (Alternative Scenario: border=1 )

Project: mytcuml
 Class: ClosableTabbedPaneUnitTest1
 Method: testAddClosableTabbedPaneEventHandlerAccuracy3
 Body: {
        MockClosableTabbedPaneEventHandler handler1 = new MockClosableTabbedPaneEventHandler();
        pane.addClosableTabbedPaneEventHandler(handler1);
        assertEquals("addClosableTabbedPaneEventHandler incorrect", 1,
            pane.getClosableTabbedPaneEventHandlers().length);
        assertEquals("addClosableTabbedPaneEventHandler incorrect", handler1, pane
            .getClosableTabbedPaneEventHandlers()[0]);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addClosableTabbedPaneEventHandler (Alternative Action: getClosableTabbedPaneEventHandlers=2 ) - Predicate: N/A - Scenario: handler1 (Alternative Scenario: handler1=1 )

Project: mytcuml
 Class: CopyCommentRelationshipGraphEdgeActionAccuracyTest
 Method: testExecute
 Body: {
        // run successfully
        copyCommentRelationshipGraphEdgeAction.execute();
        Object object = clipboard.getData(AuxiliaryElementDataFlavor.COMMENT_RELATIONSHIP_GRAPH_EDGE);
        assertTrue("comment relationship graph edge was not successfully copied", object instanceof GraphEdge);
        assertFalse("copied comment relationship graph edge was not cloned",
            ((GraphEdge) object) == commentRelationshipGraphEdge);
    }
 Pattern Name: NormalPattern_AnyLOC - Action: execute (Alternative Action: execute=1 ) - Predicate: N/A - Scenario: object (Alternative Scenario: object=1 )

Project: mytcuml
 Class: GraphConnectorTest
 Method: testGetGraphEdges
 Body: {
        // the collection contains two elements
        instance.addGraphEdge(graphEdge1);
        instance.addGraphEdge(graphEdge2);

        Collection<GraphEdge> collection = instance.getGraphEdges();

        assertEquals("two elements expected", 2, collection.size());
        assertTrue("graphEdge 1 should be contained", collection.contains(graphEdge1));
        assertTrue("graphEdge 2 should be contained", collection.contains(graphEdge2));

        // remove all the elements in the instance
        instance.clearGraphEdges();

        // the return collection doesn't change since it is just a copy
        assertEquals("two elements expected", 2, collection.size());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addGraphEdge (Alternative Action: contains=2 ) - Predicate: size - Scenario: collection (Alternative Scenario: collection=1 )

Project: mytcuml
 Class: GraphConnectorTest
 Method: testRemoveGraphEdge
 Body: {
        // the collection contains two elements
        instance.addGraphEdge(graphEdge1);
        instance.addGraphEdge(graphEdge2);

        // remove one element
        boolean removed = instance.removeGraphEdge(graphEdge1);

        assertTrue("the graphEdge 1 should be returned", removed);
        assertEquals("one element expected", 1, instance.countGraphEdges());
        assertFalse("the graphEdge 1 should have been removed", instance.containsGraphEdge(graphEdge1));

        // remove another element
        removed = instance.removeGraphEdge(graphEdge2);

        assertTrue("the graphEdge 2 should be returned", removed);
        assertEquals("no element expected", 0, instance.countGraphEdges());
        assertFalse("the graphEdge 2 should have been removed", instance.containsGraphEdge(graphEdge2));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: addGraphEdge (Alternative Action: countGraphEdges=2 ) - Predicate: N/A - Scenario: removed (Alternative Scenario: removed=1 )

Project: mytcuml
 Class: DiagramTitleConverterUnitTest
 Method: testCtorStr1
 Body: {
        ConfigManager.getInstance()
                     .add("test_files" + File.separator
                        + "DiagramTitleConverter1.xml");

        DiagramTitleConverter converter = new DiagramTitleConverter(DEFAULT_NAMESPACE);
        assertNotNull("Unable to create DiagramTitleConverter instance.",
            converter);

        Field fdConvert = converter.getClass()
                                   .getDeclaredField("convertToTextElement");
        fdConvert.setAccessible(true);

        boolean convert = ((Boolean) fdConvert.get(converter)).booleanValue();
        assertFalse("The convert is set to true.", convert);

        Field fdProperties = converter.getClass()
                                      .getDeclaredField("textElementProperties");
        fdProperties.setAccessible(true);

        Map map = (Map) fdProperties.get(converter);
        assertTrue("The properties is emtpy.", map.isEmpty());
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: getClass=2 ) - Predicate: N/A - Scenario: converter (Alternative Scenario: converter=1 )

Project: mytcuml
 Class: DiagramTitleConverterUnitTest
 Method: testCtor
 Body: {
        ConfigManager.getInstance()
                     .add("test_files" + File.separator
                        + "DiagramTitleConverter.xml");

        DiagramTitleConverter converter = new DiagramTitleConverter();
        assertNotNull("Unable to create DiagramTitleConverter instance.",
            converter);

        Field fdConvert = converter.getClass()
                                   .getDeclaredField("convertToTextElement");
        fdConvert.setAccessible(true);

        boolean convert = ((Boolean) fdConvert.get(converter)).booleanValue();
        assertTrue("The convert is set to true.", convert);

        Field fdProperties = converter.getClass()
                                      .getDeclaredField("textElementProperties");
        fdProperties.setAccessible(true);

        Map map = (Map) fdProperties.get(converter);
        assertEquals("The FILL_COLOR is set to CCFFCC.", "CCFFCC",
            map.get("FILL_COLOR"));
        assertEquals("The FONT_FAMILY is set to Arial.", "Arial",
            map.get("FONT_FAMILY"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: get=4 ) - Predicate: N/A - Scenario: converter (Alternative Scenario: converter=1 )

Project: mytcuml
 Class: DiagramTitleConverterUnitTest
 Method: testCtorStr
 Body: {
        ConfigManager.getInstance()
                     .add("test_files" + File.separator
                        + "DiagramTitleConverter.xml");

        DiagramTitleConverter converter = new DiagramTitleConverter(DEFAULT_NAMESPACE);
        assertNotNull("Unable to create DiagramTitleConverter instance.",
            converter);

        Field fdConvert = converter.getClass()
                                   .getDeclaredField("convertToTextElement");
        fdConvert.setAccessible(true);

        boolean convert = ((Boolean) fdConvert.get(converter)).booleanValue();
        assertTrue("The convert is set to true.", convert);

        Field fdProperties = converter.getClass()
                                      .getDeclaredField("textElementProperties");
        fdProperties.setAccessible(true);

        Map map = (Map) fdProperties.get(converter);
        assertEquals("The FILL_COLOR is set to CCFFCC.", "CCFFCC",
            map.get("FILL_COLOR"));
        assertEquals("The FONT_FAMILY is set to Arial.", "Arial",
            map.get("FONT_FAMILY"));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: add (Alternative Action: get=4 ) - Predicate: N/A - Scenario: converter (Alternative Scenario: converter=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformOutputStreamFalseWithHead
 Body: {
        transformers.put(TransformerType.Model, trans1);
        transformers.put(TransformerType.ActivityGraph, trans2);
        transformers.put(TransformerType.Diagram, trans3);
        transformers.put(TransformerType.Header, new MockedXMITransformer());
        XMIWriter xmlWriter = new XMIWriter(manager, transformers, xmiRootAttributes);
        File file = new File(path);
        xmlWriter.transform(new FileOutputStream(file), false);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", check(true, false));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transform (Alternative Action: put=4 ) - Predicate: check - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testPutElementId
 Body: {
        Object element = new Object();
        String id = "id";
        writer.putElementId(element, id);
        assertEquals("putElementId failed.", id, writer.getElementId(element));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: putElementId (Alternative Action: getElementId=1 ) - Predicate: getElementId - Scenario: id (Alternative Scenario: id=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformToZipFile
 Body: {
        File file = new File(path);
        writer.transformToZipFile(file, false);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", checkZip(false));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transformToZipFile (Alternative Action: checkZip=1 ) - Predicate: checkZip - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformTrue
 Body: {
        File file = new File(path);
        writer.transform(file, true);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", check(false, true));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transform (Alternative Action: transform=1 ) - Predicate: check - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformOutputStreamTrueWithHead
 Body: {
        transformers.put(TransformerType.Model, trans1);
        transformers.put(TransformerType.ActivityGraph, trans2);
        transformers.put(TransformerType.Diagram, trans3);
        transformers.put(TransformerType.Header, new MockedXMITransformer());
        XMIWriter xmlWriter = new XMIWriter(manager, transformers, xmiRootAttributes);
        File file = new File(path);
        xmlWriter.transform(new FileOutputStream(file), true);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", check(true, true));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transform (Alternative Action: put=4 ) - Predicate: check - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformToZipFileTrue
 Body: {
        File file = new File(path);
        writer.transformToZipFile(file, true);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", checkZip(true));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transformToZipFile (Alternative Action: checkZip=1 ) - Predicate: checkZip - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testTransformOutputStreamFalse
 Body: {
        File file = new File(path);
        writer.transform(new FileOutputStream(file), false);
        assertTrue("transform(File outputFile, boolean withDiagramData) failed.", check(false, false));
        file.delete();
    }
 Pattern Name: NormalPattern_AnyLOC - Action: transform (Alternative Action: transform=1 ) - Predicate: check - Scenario: file (Alternative Scenario: file=1 )

Project: mytcuml
 Class: XMIWriterAccuracyTest
 Method: testGetElementId
 Body: {
        Object element = new Object();
        String id = "id";
        writer.putElementId(element, id);
        assertEquals("getElementId failed.", id, writer.getElementId(element));
    }
 Pattern Name: NormalPattern_AnyLOC - Action: putElementId (Alternative Action: getElementId=1 ) - Predicate: getElementId - Scenario: id (Alternative Scenario: id=1 )
