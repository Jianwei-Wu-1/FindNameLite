Project: guava
 Class: LocalCacheTest
 Method: testSetSoftValues
 Body: {
    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder().softValues());
    checkStrength(map, Strength.STRONG, Strength.SOFT);
    assertSame(EntryFactory.STRONG, map.entryFactory);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: checkStrength (Alternative Action: softValues=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: LocalCacheTest
 Method: testSetWeigher
 Body: {
    Weigher<Object, Object> testWeigher =
        new Weigher<Object, Object>() {
          @Override
          public int weigh(Object key, Object value) {
            return 42;
          }
        };
    LocalCache<Object, Object> map =
        makeLocalCache(createCacheBuilder().maximumWeight(1).weigher(testWeigher));
    assertSame(testWeigher, map.weigher);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: makeLocalCache=1 ) - Predicate: N/A - Scenario: testWeigher (Alternative Scenario: testWeigher=1 )

Project: guava
 Class: LocalCacheTest
 Method: testSetRemovalListener
 Body: {
    RemovalListener<Object, Object> testListener = TestingRemovalListeners.nullRemovalListener();
    LocalCache<Object, Object> map =
        makeLocalCache(createCacheBuilder().removalListener(testListener));
    assertSame(testListener, map.removalListener);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: makeLocalCache=1 ) - Predicate: N/A - Scenario: testListener (Alternative Scenario: testListener=1 )

Project: guava
 Class: LocalCacheTest
 Method: testSetWeakValues
 Body: {
    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder().weakValues());
    checkStrength(map, Strength.STRONG, Strength.WEAK);
    assertSame(EntryFactory.STRONG, map.entryFactory);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: checkStrength (Alternative Action: weakValues=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: LocalCacheTest
 Method: testSetTicker
 Body: {
    Ticker testTicker =
        new Ticker() {
          @Override
          public long read() {
            return 0;
          }
        };
    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder().ticker(testTicker));
    assertSame(testTicker, map.ticker);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: ticker=1 ) - Predicate: N/A - Scenario: testTicker (Alternative Scenario: testTicker=1 )

Project: guava
 Class: LocalCacheTest
 Method: testSetWeakKeys
 Body: {
    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder().weakKeys());
    checkStrength(map, Strength.WEAK, Strength.STRONG);
    assertSame(EntryFactory.WEAK, map.entryFactory);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: checkStrength (Alternative Action: weakKeys=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: SetsTest
 Method: testNewTreeSetFromIterableDerived
 Body: {
    Iterable<Derived> iterable = Arrays.asList(new Derived("foo"), new Derived("bar"));
    TreeSet<Derived> set = Sets.newTreeSet(iterable);
    assertThat(set).containsExactly(new Derived("bar"), new Derived("foo")).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=1 ) - Predicate: N/A - Scenario: iterable (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testNewEnumSet_iterable
 Body: {
    Set<SomeEnum> set = ImmutableSet.of(SomeEnum.A, SomeEnum.B, SomeEnum.C);
    assertEquals(set, newEnumSet(unmodifiableIterable(set), SomeEnum.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newEnumSet=1 ) - Predicate: newEnumSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testToImmutableEnumSetEmpty
 Body: {
    Set<SomeEnum> units = Stream.<SomeEnum>empty().collect(Sets.toImmutableEnumSet());
    assertThat(units).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toImmutableEnumSet=1 ) - Predicate: N/A - Scenario: units (Alternative Scenario: units=1 )

Project: guava
 Class: SetsTest
 Method: testToImmutableEnumSet
 Body: {
    Set<SomeEnum> units = Stream.of(SomeEnum.D, SomeEnum.B).collect(Sets.toImmutableEnumSet());

    assertThat(units).containsExactly(SomeEnum.B, SomeEnum.D).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: units (Alternative Scenario: units=1 )

Project: guava
 Class: SetsTest
 Method: testCartesianProduct_binary1x0
 Body: {
    Set<Integer> mt = emptySet();
    assertEmpty(Sets.cartesianProduct(set(1), mt));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: cartesianProduct=1 ) - Predicate: cartesianProduct - Scenario: mt (Alternative Scenario: mt=1 )

Project: guava
 Class: SetsTest
 Method: testNewEnumSet_collection
 Body: {
    Set<SomeEnum> set = ImmutableSet.of(SomeEnum.B, SomeEnum.C);
    assertEquals(set, newEnumSet(set, SomeEnum.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newEnumSet=1 ) - Predicate: newEnumSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testNewTreeSetFromIterableNonGeneric
 Body: {
    Iterable<LegacyComparable> iterable =
        Arrays.asList(new LegacyComparable("foo"), new LegacyComparable("bar"));
    TreeSet<LegacyComparable> set = Sets.newTreeSet(iterable);
    assertThat(set)
        .containsExactly(new LegacyComparable("bar"), new LegacyComparable("foo"))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=1 ) - Predicate: N/A - Scenario: iterable (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testNewEnumSet_enumSet
 Body: {
    EnumSet<SomeEnum> set = EnumSet.of(SomeEnum.A, SomeEnum.D);
    assertEquals(set, newEnumSet(set, SomeEnum.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newEnumSet=1 ) - Predicate: newEnumSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testCartesianProduct_binary0x0
 Body: {
    Set<Integer> mt = emptySet();
    assertEmpty(Sets.cartesianProduct(mt, mt));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: cartesianProduct=1 ) - Predicate: cartesianProduct - Scenario: mt (Alternative Scenario: mt=1 )

Project: guava
 Class: SetsTest
 Method: testCartesianProduct_binary0x1
 Body: {
    Set<Integer> mt = emptySet();
    assertEmpty(Sets.cartesianProduct(mt, set(1)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: cartesianProduct=1 ) - Predicate: cartesianProduct - Scenario: mt (Alternative Scenario: mt=1 )

Project: guava
 Class: SetsTest
 Method: testSubSet_unboundedRange
 Body: {
    ImmutableSortedSet<Integer> set = ImmutableSortedSet.of(2, 4, 6, 8, 10);

    assertEquals(set, Sets.subSet(set, Range.<Integer>all()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: all=1 ) - Predicate: subSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: SetsTest
 Method: testNewEnumSet_empty
 Body: {
    EnumSet<SomeEnum> copy = newEnumSet(Collections.<SomeEnum>emptySet(), SomeEnum.class);
    assertEquals(EnumSet.noneOf(SomeEnum.class), copy);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newEnumSet=1 ) - Predicate: noneOf - Scenario: copy (Alternative Scenario: copy=1 )

Project: guava
 Class: RangeTest
 Method: testGap_connectedAdjacentYieldsEmpty
 Body: {
    Range<Integer> range = Range.open(3, 4);

    assertEquals(Range.closedOpen(4, 4), range.gap(Range.atLeast(4)));
    assertEquals(Range.openClosed(3, 3), range.gap(Range.atMost(3)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: gap=2 ) - Predicate: openClosed - Scenario: range (Alternative Scenario: range=1 )

Project: guava
 Class: FakeTimeLimiterTest
 Method: testCallUninterruptiblyWithTimeout_propagatesReturnValue
 Body: {
    String result =
        timeLimiter.callUninterruptiblyWithTimeout(
            Callables.returning(RETURN_VALUE), DELAY_MS, TimeUnit.MILLISECONDS);

    assertThat(result).isEqualTo(RETURN_VALUE);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: returning=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: FakeTimeLimiterTest
 Method: testCallWithTimeout_propagatesReturnValue
 Body: {
    String result =
        timeLimiter.callWithTimeout(
            Callables.returning(RETURN_VALUE), DELAY_MS, TimeUnit.MILLISECONDS);

    assertThat(result).isEqualTo(RETURN_VALUE);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: callWithTimeout=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MapEntrySetTester
 Method: testContainsEntryWithNullValuePresent
 Body: {
    initMapWithNullValue();
    assertTrue(getMap().entrySet().contains(Helpers.mapEntry(getKeyForNullValue(), null)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: contains=1 ) - Predicate: contains - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapEntrySetTester
 Method: testContainsEntryWithNullKeyPresent
 Body: {
    initMapWithNullKey();
    assertTrue(getMap().entrySet().contains(Helpers.mapEntry(null, getValueForNullKey())));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: getValueForNullKey=1 ) - Predicate: contains - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapAsMapTester
 Method: testAsMapGetNullKeyPresent
 Body: {
    initMultimapWithNullKey();
    assertContentsAnyOrder(multimap().asMap().get(null), getValueForNullKey());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: get - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: SetMultimapPutTester
 Method: testPutDuplicateValue_null
 Body: {
    initMultimapWithNullValue();
    assertFalse(multimap().put(getKeyForNullValue(), null));
    expectContents(createArrayWithNullValue());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullValue (Alternative Action: createArrayWithNullValue=1 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapsSortedTransformValuesTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsSortedTransformValuesTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructorLenient_anonymousClass
 Body: {
    String toTest = MoreObjects.toStringHelper(new Object() {}).toString();
    assertTrue(toTest, toTest.matches(".*\\{\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_oneField
 Body: {
    String toTest = MoreObjects.toStringHelper(new TestClass()).add("field1", "Hello").toString();
    assertEquals("TestClass{field1=Hello}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_oneField
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).omitNullValues().add("field1", null).toString();
    assertEquals("TestClass{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructor_instance
 Body: {
    String toTest = MoreObjects.toStringHelper(this).toString();
    assertEquals("ToStringHelperTest{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructor_anonymousClass
 Body: {
    String toTest = MoreObjects.toStringHelper(new Object() {}).toString();
    assertEquals("{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructorLenient_innerClass
 Body: {
    String toTest = MoreObjects.toStringHelper(new TestClass()).toString();
    assertTrue(toTest, toTest.matches(".*\\{\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_nullInteger
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).add("field1", (Integer) null).toString();
    assertTrue(toTest, toTest.matches(".*\\{field1\\=null\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_manyFieldsFirstNull
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .omitNullValues()
            .add("field1", null)
            .add("field2", "Googley")
            .add("field3", "World")
            .toString();
    assertEquals("TestClass{field2=Googley, field3=World}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=3 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_addValue
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .add("field1", 1)
            .addValue("value1")
            .add("field2", "value2")
            .addValue(2)
            .toString();
    final String expected = ".*\\{field1\\=1, value1, field2\\=value2, 2\\}";

    assertTrue(toTest, toTest.matches(expected));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=2 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: expected=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_manyFieldsLastNull
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .omitNullValues()
            .add("field1", "Hello")
            .add("field2", "Googley")
            .add("field3", null)
            .toString();
    assertEquals("TestClass{field1=Hello, field2=Googley}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=3 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_manyValuesFirstNull
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .omitNullValues()
            .addValue(null)
            .addValue("Googley")
            .addValue("World")
            .toString();
    assertEquals("TestClass{Googley, World}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addValue=3 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_addValue
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .add("field1", 1)
            .addValue("value1")
            .add("field2", "value2")
            .addValue(2)
            .toString();
    final String expected = "TestClass{field1=1, value1, field2=value2, 2}";

    assertEquals(expected, toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=2 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: expected=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_oneIntegerField
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).add("field1", new Integer(42)).toString();
    assertEquals("TestClass{field1=42}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_addValueWithNullValue
 Body: {
    final String result =
        MoreObjects.toStringHelper(new TestClass())
            .addValue(null)
            .addValue("Hello")
            .addValue(null)
            .toString();
    final String expected = "TestClass{null, Hello, null}";

    assertEquals(expected, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addValue=3 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructor_stringObject
 Body: {
    String toTest = MoreObjects.toStringHelper("FooBar").toString();
    assertEquals("FooBar{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_nullInteger
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).add("field1", (Integer) null).toString();
    assertEquals("TestClass{field1=null}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_oneField
 Body: {
    String toTest = MoreObjects.toStringHelper(new TestClass()).add("field1", "Hello").toString();
    assertTrue(toTest, toTest.matches(".*\\{field1\\=Hello\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_oneValue
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).omitNullValues().addValue(null).toString();
    assertEquals("TestClass{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: omitNullValues=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_manyValuesLastNull
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .omitNullValues()
            .addValue("Hello")
            .addValue("Googley")
            .addValue(null)
            .toString();
    assertEquals("TestClass{Hello, Googley}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addValue=3 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToString_addWithNullValue
 Body: {
    final String result = MoreObjects.toStringHelper(new TestClass()).add("Hello", null).toString();

    assertEquals("TestClass{Hello=null}", result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_addValueWithNullValue
 Body: {
    final String result =
        MoreObjects.toStringHelper(new TestClass())
            .addValue(null)
            .addValue("Hello")
            .addValue(null)
            .toString();
    final String expected = ".*\\{null, Hello, null\\}";

    assertTrue(result, result.matches(expected));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addValue=3 ) - Predicate: matches - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_addWithNullValue
 Body: {
    final String result = MoreObjects.toStringHelper(new TestClass()).add("Hello", null).toString();
    assertTrue(result, result.matches(".*\\{Hello\\=null\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: matches - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringLenient_oneIntegerField
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass()).add("field1", new Integer(42)).toString();
    assertTrue(toTest, toTest.matches(".*\\{field1\\=42\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructorLenient_instance
 Body: {
    String toTest = MoreObjects.toStringHelper(this).toString();
    assertTrue(toTest, toTest.matches(".*\\{\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_canBeCalledManyTimes
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .omitNullValues()
            .omitNullValues()
            .add("field1", "Hello")
            .omitNullValues()
            .add("field2", "Googley")
            .omitNullValues()
            .add("field3", "World")
            .toString();
    assertEquals("TestClass{field1=Hello, field2=Googley, field3=World}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: omitNullValues=4 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructorLenient_classObject
 Body: {
    String toTest = MoreObjects.toStringHelper(TestClass.class).toString();
    assertTrue(toTest, toTest.matches(".*\\{\\}"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: matches - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testToStringOmitNullValues_manyFieldsOmitAfterNull
 Body: {
    String toTest =
        MoreObjects.toStringHelper(new TestClass())
            .add("field1", null)
            .add("field2", "Googley")
            .add("field3", "World")
            .omitNullValues()
            .toString();
    assertEquals("TestClass{field2=Googley, field3=World}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=3 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructor_classObject
 Body: {
    String toTest = MoreObjects.toStringHelper(TestClass.class).toString();
    assertEquals("TestClass{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ToStringHelperTest
 Method: testConstructor_innerClass
 Body: {
    String toTest = MoreObjects.toStringHelper(new TestClass()).toString();
    assertEquals("TestClass{}", toTest);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toStringHelper=1 ) - Predicate: N/A - Scenario: toTest (Alternative Scenario: toTest=1 )

Project: guava
 Class: ExecutionSequencerTest
 Method: testCancellationNotPropagatedIfAlreadyStarted
 Body: {
    serializer.submitAsync(firstCallable, directExecutor()).cancel(true);
    assertThat(firstFuture.isCancelled()).isFalse();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: cancel (Alternative Action: cancel=1 ) - Predicate: N/A - Scenario: serializer.submitAsync(firstCallable, directExecutor()) (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testGetMultiple
 Body: {
    resetContainer(
        Helpers.mapEntry(k0(), v0()), Helpers.mapEntry(k0(), v1()), Helpers.mapEntry(k0(), v2()));
    assertGet(k0(), v0(), v1(), v2());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: resetContainer (Alternative Action: k0=4 ) - Predicate: k0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testGetEmpty
 Body: {
    Collection<V> result = multimap().get(k3());
    assertEmpty(result);
    assertEquals(0, result.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapGetTester
 Method: testGetNullPresent
 Body: {
    initMultimapWithNullKey();
    assertContains(multimap().get(null), getValueForNullKey());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: get - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testGetWithNullValue
 Body: {
    initMultimapWithNullValue();
    assertContains(multimap().get(getKeyForNullValue()), null);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullValue (Alternative Action: initMultimapWithNullValue=1 ) - Predicate: get - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testPropagatesRemoveLastElementToMultimap
 Body: {
    Collection<V> result = multimap().get(k0());
    assertTrue(result.remove(v0()));
    assertGet(k0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=2 ) - Predicate: k0 - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapGetTester
 Method: testGetNonEmpty
 Body: {
    Collection<V> result = multimap().get(k0());
    assertFalse(result.isEmpty());
    assertContentsAnyOrder(result, v0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=1 ) - Predicate: v0 - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapAsMapGetTester
 Method: testAddNullValue
 Body: {
    Collection<V> result = multimap().asMap().get(k0());
    assertTrue(result.add(null));
    assertTrue(multimap().containsEntry(k0(), null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=2 ) - Predicate: containsEntry - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapAsMapGetTester
 Method: testPropagatesAddToMultimap
 Body: {
    Collection<V> result = multimap().asMap().get(k0());
    result.add(v3());
    assertContentsAnyOrder(multimap().get(k0()), v0(), v3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: add (Alternative Action: k0=2 ) - Predicate: get - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapAsMapGetTester
 Method: testReflectsMultimapRemove
 Body: {
    Collection<V> result = multimap().asMap().get(k0());
    multimap().removeAll(k0());
    assertEmpty(result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: removeAll (Alternative Action: k0=2 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapAsMapGetTester
 Method: testPropagatesRemoveLastElementToMultimap
 Body: {
    Collection<V> result = multimap().asMap().get(k0());
    assertTrue(result.remove(v0()));
    assertGet(k0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=2 ) - Predicate: k0 - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapAsMapGetTester
 Method: testRemoveNullValue
 Body: {
    Collection<V> result = multimap().asMap().get(k0());
    assertFalse(result.remove(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=1 ) - Predicate: remove - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: CharSinkTester
 Method: testWriteLinesStream_systemDefaultSeparator
 Body: {
    String separator = System.getProperty("line.separator");
    sink.writeLines(lines.stream());

    assertContainsExpectedLines(separator);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: getProperty=1 ) - Predicate: N/A - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: CharSinkTester
 Method: testWrite
 Body: {
    sink.write(data);

    assertContainsExpectedString();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: write (Alternative Action: write=1 ) - Predicate: N/A - Scenario: sink (Alternative Scenario:  )

Project: guava
 Class: CharSinkTester
 Method: testWriteLines_specificSeparator
 Body: {
    String separator = "\r\n";
    sink.writeLines(lines, separator);

    assertContainsExpectedLines(separator);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: writeLines=1 ) - Predicate: N/A - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: CharSinkTester
 Method: testWriteLines_systemDefaultSeparator
 Body: {
    String separator = System.getProperty("line.separator");
    sink.writeLines(lines);

    assertContainsExpectedLines(separator);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: getProperty=1 ) - Predicate: N/A - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: CharSinkTester
 Method: testWriteLinesStream_specificSeparator
 Body: {
    String separator = "\r\n";
    sink.writeLines(lines.stream(), separator);

    assertContainsExpectedLines(separator);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: stream=1 ) - Predicate: N/A - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: MoreExecutorsTest
 Method: testPlatformThreadFactory_default
 Body: {
    ThreadFactory factory = MoreExecutors.platformThreadFactory();
    assertNotNull(factory);
    // Executors#defaultThreadFactory() may return a new instance each time.
    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=2 ) - Predicate: getClass - Scenario: factory (Alternative Scenario: factory=1 )

Project: guava
 Class: MoreExecutorsTest
 Method: testDirectExecutorService_shutdownNow
 Body: {
    ExecutorService executor = newDirectExecutorService();
    assertEquals(ImmutableList.of(), executor.shutdownNow());
    assertTrue(executor.isShutdown());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDirectExecutorService=1 ) - Predicate: isShutdown - Scenario: executor (Alternative Scenario: executor=1 )

Project: guava
 Class: MoreExecutorsTest
 Method: testShutdownAndAwaitTermination_immediateShutdown
 Body: {
    ExecutorService service = Executors.newSingleThreadExecutor();
    assertTrue(shutdownAndAwaitTermination(service, 1L, SECONDS));
    assertTrue(service.isTerminated());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isTerminated=1 ) - Predicate: isTerminated - Scenario: service (Alternative Scenario: service=1 )

Project: guava
 Class: MultimapKeysTester
 Method: testKeysRemove
 Body: {
    int original = multimap().keys().remove(k0(), 1);
    assertEquals(Math.max(original - 1, 0), multimap().get(k0()).size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=2 ) - Predicate: max - Scenario: original (Alternative Scenario: original=1 )

Project: guava
 Class: BiMapSpecificTests
 Method: testDoubleInverse
 Body: {
      ImmutableBiMap<String, Integer> bimap =
          ImmutableBiMap.copyOf(ImmutableMap.of("one", 1, "two", 2));
      assertSame(bimap, bimap.inverse().inverse());
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=2 ) - Predicate: inverse - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: BiMapSpecificTests
 Method: testEmptySerialization
 Body: {
      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.of();
      assertSame(bimap, SerializableTester.reserializeAndAssert(bimap));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserializeAndAssert - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: ConverterTest
 Method: testReverseReverse
 Body: {
    Converter<String, Long> converter = STR_TO_LONG;
    assertEquals(converter, converter.reverse().reverse());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: reverse=2 ) - Predicate: reverse - Scenario: converter (Alternative Scenario: converter=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_indexes_varargs_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).computeInPlace(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            0, SIXTEEN_SQUARES_MIN,
            10, SIXTEEN_SQUARES_MAX,
            5, SIXTEEN_SQUARES_MEDIAN,
            1, SIXTEEN_SQUARES_DECILE_1,
            8, SIXTEEN_SQUARES_DECILE_8);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: indexes=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_indexes_varargs_compute_doubleVarargs
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).compute(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            0, SIXTEEN_SQUARES_MIN,
            10, SIXTEEN_SQUARES_MAX,
            5, SIXTEEN_SQUARES_MEDIAN,
            1, SIXTEEN_SQUARES_DECILE_1,
            8, SIXTEEN_SQUARES_DECILE_8);
    assertThat(dataset)
        .usingExactEquality()
        .containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES)
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_index_compute_longVarargs
 Body: {
    long[] dataset = Longs.toArray(SIXTEEN_SQUARES_LONGS);
    assertThat(Quantiles.scale(10).index(1).compute(dataset))
        .isWithin(ALLOWED_ERROR)
        .of(SIXTEEN_SQUARES_DECILE_1);
    assertThat(dataset).asList().isEqualTo(SIXTEEN_SQUARES_LONGS);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_index_compute_doubleVarargs
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(Quantiles.scale(10).index(1).compute(dataset))
        .isWithin(ALLOWED_ERROR)
        .of(SIXTEEN_SQUARES_DECILE_1);
    assertThat(dataset)
        .usingExactEquality()
        .containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES)
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testQuartiles_indexes_varargs_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(quartiles().indexes(1, 3).computeInPlace(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            1, SIXTEEN_SQUARES_QUARTILE_1,
            3, SIXTEEN_SQUARES_QUARTILE_3);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: indexes=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_index_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(Quantiles.scale(10).index(1).computeInPlace(dataset))
        .isWithin(ALLOWED_ERROR)
        .of(SIXTEEN_SQUARES_DECILE_1);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toArray=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testQuartiles_index_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(quartiles().index(1).computeInPlace(dataset))
        .isWithin(ALLOWED_ERROR)
        .of(SIXTEEN_SQUARES_QUARTILE_1);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: quartiles=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_indexes_varargs_compute_longVarargs
 Body: {
    long[] dataset = Longs.toArray(SIXTEEN_SQUARES_LONGS);
    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).compute(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            0, SIXTEEN_SQUARES_MIN,
            10, SIXTEEN_SQUARES_MAX,
            5, SIXTEEN_SQUARES_MEDIAN,
            1, SIXTEEN_SQUARES_DECILE_1,
            8, SIXTEEN_SQUARES_DECILE_8);
    assertThat(dataset).asList().isEqualTo(SIXTEEN_SQUARES_LONGS);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testMedian_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(median().computeInPlace(dataset)).isWithin(ALLOWED_ERROR).of(SIXTEEN_SQUARES_MEDIAN);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: median=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_index_compute_intVarargs
 Body: {
    int[] dataset = Ints.toArray(SIXTEEN_SQUARES_INTEGERS);
    assertThat(Quantiles.scale(10).index(1).compute(dataset))
        .isWithin(ALLOWED_ERROR)
        .of(SIXTEEN_SQUARES_DECILE_1);
    assertThat(dataset).asList().isEqualTo(SIXTEEN_SQUARES_INTEGERS);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_indexes_collection_computeInPlace
 Body: {
    double[] dataset = Doubles.toArray(SIXTEEN_SQUARES_DOUBLES);
    assertThat(
            Quantiles.scale(10)
                .indexes(ImmutableList.of(0, 10, 5, 1, 8, 1))
                .computeInPlace(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            0, SIXTEEN_SQUARES_MIN,
            10, SIXTEEN_SQUARES_MAX,
            5, SIXTEEN_SQUARES_MEDIAN,
            1, SIXTEEN_SQUARES_DECILE_1,
            8, SIXTEEN_SQUARES_DECILE_8);
    assertThat(dataset).usingExactEquality().containsExactlyElementsIn(SIXTEEN_SQUARES_DOUBLES);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: indexes=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: QuantilesTest
 Method: testScale_indexes_varargs_compute_intVarargs
 Body: {
    int[] dataset = Ints.toArray(SIXTEEN_SQUARES_INTEGERS);
    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).compute(dataset))
        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
        .containsExactly(
            0, SIXTEEN_SQUARES_MIN,
            10, SIXTEEN_SQUARES_MAX,
            5, SIXTEEN_SQUARES_MEDIAN,
            1, SIXTEEN_SQUARES_DECILE_1,
            8, SIXTEEN_SQUARES_DECILE_8);
    assertThat(dataset).asList().isEqualTo(SIXTEEN_SQUARES_INTEGERS);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: dataset (Alternative Scenario: dataset=1 )

Project: guava
 Class: LocalLoadingCacheTest
 Method: testComputingFunction
 Body: {
    CacheLoader<Object, Object> loader =
        new CacheLoader<Object, Object>() {
          @Override
          public Object load(Object from) {
            return new Object();
          }
        };
    LocalLoadingCache<Object, Object> cache = makeCache(createCacheBuilder(), loader);
    assertSame(loader, cache.localCache.defaultLoader);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: makeCache=1 ) - Predicate: N/A - Scenario: loader (Alternative Scenario: cache=1 )

Project: guava
 Class: QueueRemoveTester
 Method: testRemove_size1
 Body: {
    assertEquals("size1Queue.remove() should return first element", e0(), getQueue().remove());
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueueRemoveTester
 Method: testRemove_sizeMany
 Body: {
    assertEquals("sizeManyQueue.remove() should return first element", e0(), getQueue().remove());
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ByteSinkTester
 Method: testWriteFrom_inputStream
 Body: {
    sink.writeFrom(new ByteArrayInputStream(data));

    assertContainsExpectedBytes();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeFrom (Alternative Action: writeFrom=1 ) - Predicate: N/A - Scenario: sink (Alternative Scenario:  )

Project: guava
 Class: ByteSinkTester
 Method: testWrite
 Body: {
    sink.write(data);

    assertContainsExpectedBytes();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: write (Alternative Action: write=1 ) - Predicate: N/A - Scenario: sink (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedGraphTest
 Method: adjacentNodes_selfLoop
 Body: {
    putEdge(N1, N1);
    putEdge(N1, N2);
    assertThat(graph.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdge (Alternative Action: putEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedGraphTest
 Method: addEdge_existingSelfLoopEdgeBetweenSameNodes
 Body: {
    putEdge(N1, N1);
    assertThat(putEdge(N1, N1)).isFalse();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdge (Alternative Action: putEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapGetTester
 Method: testGet_nonNullWhenNullContained
 Body: {
    initMapWithNullKey();
    assertNull("get(notPresent) should return null", get(k3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: get=1 ) - Predicate: get - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapGetTester
 Method: testGet_nullContained
 Body: {
    initMapWithNullKey();
    assertEquals("get(null) should return the associated value", getValueForNullKey(), get(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: getValueForNullKey=1 ) - Predicate: getValueForNullKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionAddAllTester
 Method: testAddAll_nullSupported
 Body: {
    List<E> containsNull = singletonList(null);
    assertTrue("addAll(containsNull) should return true", collection.addAll(containsNull));
    /*
     * We need (E) to force interpretation of null as the single element of a
     * varargs array, not the array itself
     */
    expectAdded((E) null);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: addAll=1 ) - Predicate: addAll - Scenario: containsNull (Alternative Scenario: containsNull=1 )

Project: guava
 Class: CollectionAddAllTester
 Method: testAddAll_supportedNonePresent
 Body: {
    assertTrue(
        "addAll(nonePresent) should return true", collection.addAll(createDisjointCollection()));
    expectAdded(e3(), e4());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: addAll=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionAddAllTester
 Method: testAddAll_supportedNothing
 Body: {
    assertFalse("addAll(nothing) should return false", collection.addAll(emptyCollection()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: addAll=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveAllTester
 Method: testRemoveAllAbsentKey
 Body: {
    assertEmpty(multimap().removeAll(k3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveAllTester
 Method: testRemoveAllNullKeyPresent
 Body: {
    initMultimapWithNullKey();

    assertContentsAnyOrder(multimap().removeAll(null), getValueForNullKey());

    expectMissing(Helpers.mapEntry((K) null, getValueForNullKey()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: getValueForNullKey=2 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveAllTester
 Method: testRemoveAllMultipleValues
 Body: {
    resetContainer(
        Helpers.mapEntry(k0(), v0()), Helpers.mapEntry(k0(), v1()), Helpers.mapEntry(k0(), v2()));

    assertContentsAnyOrder(multimap().removeAll(k0()), v0(), v1(), v2());
    assertEmpty(multimap());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: resetContainer (Alternative Action: k0=4 ) - Predicate: multimap - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveAllTester
 Method: testRemoveAllPresentKey
 Body: {
    assertContentsAnyOrder(multimap().removeAll(k0()), v0());
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveAllTester
 Method: testRemoveAllNullKeyAbsent
 Body: {
    assertEmpty(multimap().removeAll(null));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: FilesTest
 Method: testRoundTripSources
 Body: {
    File asciiFile = getTestFile("ascii.txt");
    ByteSource byteSource = Files.asByteSource(asciiFile);
    assertSame(byteSource, byteSource.asCharSource(Charsets.UTF_8).asByteSource(Charsets.UTF_8));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asByteSource=2 ) - Predicate: asByteSource - Scenario: asciiFile (Alternative Scenario: asciiFile=1 )

Project: guava
 Class: FilesTest
 Method: testCreateParentDirs_noParentsNeeded
 Body: {
    File file = file(getTempDir(), "nonexistent.file");
    assertTrue(file.getParentFile().exists());
    Files.createParentDirs(file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: createParentDirs (Alternative Action: file=1 ) - Predicate: exists - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: FilesTest
 Method: testWriteString
 Body: {
    File temp = createTempFile();
    Files.write(I18N, temp, Charsets.UTF_16LE);
    assertEquals(I18N, Files.toString(temp, Charsets.UTF_16LE));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: write (Alternative Action: toString=1 ) - Predicate: toString - Scenario: temp (Alternative Scenario: temp=1 )

Project: guava
 Class: FuturesTransformTest
 Method: testFutureGetThrowsFunctionException
 Body: {
    inputFuture.set(EXCEPTION_DATA);
    listener.assertException(WRAPPED_EXCEPTION);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: N/A - Scenario: inputFuture (Alternative Scenario:  )

Project: guava
 Class: MultimapReplaceValuesTester
 Method: testReplaceValuesWithNullKey
 Body: {
    @SuppressWarnings("unchecked")
    List<V> values = Arrays.asList(v0(), v2(), v3());
    multimap().replaceValues(null, values);
    assertGet(null, values);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: replaceValues (Alternative Action: v0=1 ) - Predicate: N/A - Scenario: values (Alternative Scenario: values=1 )

Project: guava
 Class: MultimapReplaceValuesTester
 Method: testReplaceValuesWithNullValue
 Body: {
    @SuppressWarnings("unchecked")
    List<V> values = Arrays.asList(v0(), null, v3());
    multimap().replaceValues(k0(), values);
    assertGet(k0(), values);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: replaceValues (Alternative Action: k0=2 ) - Predicate: k0 - Scenario: values (Alternative Scenario: values=1 )

Project: guava
 Class: MapEqualsTester
 Method: testEquals_largerMap
 Body: {
    Collection<Entry<K, V>> moreEntries = getSampleEntries(getNumEntries() + 1);
    assertFalse(
        "Maps of different sizes should not be equal.", getMap().equals(newHashMap(moreEntries)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getNumEntries=1 ) - Predicate: equals - Scenario: moreEntries (Alternative Scenario: moreEntries=1 )

Project: guava
 Class: MapEqualsTester
 Method: testEquals_smallerMap
 Body: {
    Collection<Entry<K, V>> fewerEntries = getSampleEntries(getNumEntries() - 1);
    assertFalse(
        "Maps of different sizes should not be equal.", getMap().equals(newHashMap(fewerEntries)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getNumEntries=1 ) - Predicate: equals - Scenario: fewerEntries (Alternative Scenario: fewerEntries=1 )

Project: guava
 Class: MapEqualsTester
 Method: testEquals_otherMapWithDifferentEntries
 Body: {
    Map<K, V> other = newHashMap(getSampleEntries(getNumEntries() - 1));
    other.put(k3(), v3());
    assertFalse(
        "A Map should not equal another Map containing different entries.", getMap().equals(other));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: put (Alternative Action: getNumEntries=1 ) - Predicate: equals - Scenario: other (Alternative Scenario: other=1 )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: target_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: edges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.edges()).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: edges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: adjacentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: incidentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);
    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: incidentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentEdges(N1)).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentEdges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: adjacentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentEdges(E11)).containsExactly(E12);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedNetworkTest
 Method: source_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeTester
 Method: testCompute_absentToAbsent
 Body: {
    assertNull(
        "Map.compute(absent, functionReturningNull) should return null",
        getMap()
            .compute(
                k3(),
                (k, v) -> {
                  assertEquals(k3(), k);
                  assertNull(v);
                  return null;
                }));
    expectUnchanged();
    assertEquals(getNumElements(), getMap().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=2 ) - Predicate: getNumElements - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeTester
 Method: testCompute_presentToPresent
 Body: {
    assertEquals(
        "Map.compute(present, functionReturningValue) should return new value",
        v3(),
        getMap()
            .compute(
                k0(),
                (k, v) -> {
                  assertEquals(k0(), k);
                  assertEquals(v0(), v);
                  return v3();
                }));
    expectReplacement(entry(k0(), v3()));
    assertEquals(getNumElements(), getMap().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: k0=3 ) - Predicate: getNumElements - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeTester
 Method: testCompute_nullKeyPresentToPresent
 Body: {
    initMapWithNullKey();
    assertEquals(
        "Map.compute(present, functionReturningValue) should return new value",
        v3(),
        getMap()
            .compute(
                null,
                (k, v) -> {
                  assertNull(k);
                  assertEquals(getValueForNullKey(), v);
                  return v3();
                }));
    assertEquals(getNumElements(), getMap().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: v3=2 ) - Predicate: getNumElements - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeTester
 Method: testCompute_absentToPresent
 Body: {
    assertEquals(
        "Map.compute(absent, functionReturningValue) should return value",
        v3(),
        getMap()
            .compute(
                k3(),
                (k, v) -> {
                  assertEquals(k3(), k);
                  assertNull(v);
                  return v3();
                }));
    expectAdded(e3());
    assertEquals(getNumElements() + 1, getMap().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: k3=2 ) - Predicate: size - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapKeySetTester
 Method: testKeySetContainsNullKeyPresent
 Body: {
    initMultimapWithNullKey();
    assertTrue(multimap().keySet().contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: contains - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapContainsKeyTester
 Method: testContains_nonNullWhenNullContained
 Body: {
    initMapWithNullKey();
    assertFalse("containsKey(notPresent) should return false", getMap().containsKey(k3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: containsKey=1 ) - Predicate: containsKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapContainsKeyTester
 Method: testContains_nullContained
 Body: {
    initMapWithNullKey();
    assertTrue("containsKey(null) should return true", getMap().containsKey(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: containsKey=1 ) - Predicate: containsKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceTester
 Method: testReplace_supportedPresentNoChange
 Body: {
    assertEquals(v0(), getMap().replace(k0(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: v0=2 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceTester
 Method: testReplace_supportedPresent
 Body: {
    assertEquals(v0(), getMap().replace(k0(), v3()));
    expectReplacement(entry(k0(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: k0=2 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceTester
 Method: testReplace_supportedAbsent
 Body: {
    assertNull(getMap().replace(k3(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListRetainAllTester
 Method: testRetainAll_countIgnored
 Body: {
    resetContainer(getSubjectGenerator().create(e0(), e2(), e1(), e0()));
    assertTrue(getList().retainAll(Arrays.asList(e0(), e1())));
    assertContentsInOrder(getList(), e0(), e1(), e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: resetContainer (Alternative Action: e0=5 ) - Predicate: getList - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testDescendingNavigation
 Body: {
    List<Entry<K, V>> descending = new ArrayList<>(navigableMap.descendingMap().entrySet());
    Collections.reverse(descending);
    assertEquals(entries, descending);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: reverse (Alternative Action: entrySet=1 ) - Predicate: N/A - Scenario: descending (Alternative Scenario: descending=1 )

Project: guava
 Class: LocalCacheMapComputeTest
 Method: testComputeIfAbsent
 Body: {
    // simultaneous insertion for same key, expect 1 winner
    doParallelCacheOp(
        count,
        n -> {
          cache.asMap().computeIfAbsent(key, k -> "value" + n);
        });
    assertEquals(1, cache.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: doParallelCacheOp (Alternative Action: size=1 ) - Predicate: size - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: LocalCacheMapComputeTest
 Method: testUpdates
 Body: {
    cache.put(key, "1");
    // simultaneous update for same key, some null, some non-null
    doParallelCacheOp(
        count,
        n -> {
          cache.asMap().compute(key, (k, v) -> n % 2 == 0 ? v + delimiter + n : null);
        });
    assertTrue(1 >= cache.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: put (Alternative Action: compute=1 ) - Predicate: N/A - Scenario: cache (Alternative Scenario:  )

Project: guava
 Class: LocalCacheMapComputeTest
 Method: testCompute
 Body: {
    cache.put(key, "1");
    // simultaneous deletion
    doParallelCacheOp(
        count,
        n -> {
          cache.asMap().compute(key, (k, v) -> null);
        });
    assertEquals(0, cache.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: put (Alternative Action: compute=1 ) - Predicate: size - Scenario: cache (Alternative Scenario:  )

Project: guava
 Class: CollectionToStringTester
 Method: testToString_sizeSeveral
 Body: {
    String expected = Helpers.copyToList(getOrderedElements()).toString();
    assertEquals("collection.toString() incorrect", expected, collection.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=2 ) - Predicate: toString - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: ListAddAllTester
 Method: testAddAll_withDuplicates
 Body: {
    MinimalCollection<E> elementsToAdd = MinimalCollection.of(e0(), e1(), e0(), e1());
    assertTrue("addAll(hasDuplicates) should return true", getList().addAll(elementsToAdd));
    expectAdded(e0(), e1(), e0(), e1());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=4 ) - Predicate: addAll - Scenario: elementsToAdd (Alternative Scenario: elementsToAdd=1 )

Project: guava
 Class: ListAddAllTester
 Method: testAddAll_supportedAllPresent
 Body: {
    assertTrue(
        "addAll(allPresent) should return true", getList().addAll(MinimalCollection.of(e0())));
    expectAdded(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: FakeTickerTest
 Method: testAutoIncrementStep_returnsSameInstance
 Body: {
    FakeTicker ticker = new FakeTicker();
    assertSame(ticker, ticker.setAutoIncrementStep(10, TimeUnit.NANOSECONDS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setAutoIncrementStep=1 ) - Predicate: setAutoIncrementStep - Scenario: ticker (Alternative Scenario: ticker=1 )

Project: guava
 Class: CollectionAddTester
 Method: testAdd_nullSupported
 Body: {
    assertTrue("add(null) should return true", collection.add(null));
    expectAdded((E) null);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: add=1 ) - Predicate: add - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionAddTester
 Method: testAdd_supportedNotPresent
 Body: {
    assertTrue("add(notPresent) should return true", collection.add(e3()));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=2 ) - Predicate: add - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: LinkedListMultimapTest
 Method: testAsSetIteration
 Body: {
    Set<Entry<String, Collection<Integer>>> set =
        Sets.newLinkedHashSet(
            asList(
                Maps.immutableEntry("foo", (Collection<Integer>) asList(2, 3, 6)),
                Maps.immutableEntry("bar", (Collection<Integer>) asList(4, 5, 10, 11)),
                Maps.immutableEntry("baz", (Collection<Integer>) asList(7, 8)),
                Maps.immutableEntry("dog", (Collection<Integer>) asList(9)),
                Maps.immutableEntry("cat", (Collection<Integer>) asList(12, 13, 14))));

    new IteratorTester<Entry<String, Collection<Integer>>>(
        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {
      private Multimap<String, Integer> multimap;

      @Override
      protected Iterator<Entry<String, Collection<Integer>>> newTargetIterator() {
        multimap = create();
        multimap.putAll("foo", asList(2, 3));
        multimap.putAll("bar", asList(4, 5));
        multimap.putAll("foo", asList(6));
        multimap.putAll("baz", asList(7, 8));
        multimap.putAll("dog", asList(9));
        multimap.putAll("bar", asList(10, 11));
        multimap.putAll("cat", asList(12, 13, 14));
        return multimap.asMap().entrySet().iterator();
      }

      @Override
      protected void verify(List<Entry<String, Collection<Integer>>> elements) {
        assertEquals(newHashSet(elements), multimap.asMap().entrySet());
      }
    }.test();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=13 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: LinearTransformationTest
 Method: testVertical_regular
 Body: {
    double x = 1.2;
    LinearTransformation transformation = LinearTransformation.vertical(x);
    assertVerticalLinearTransformation(transformation, x);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: vertical=1 ) - Predicate: N/A - Scenario: x (Alternative Scenario: x=1 )

Project: guava
 Class: LinearTransformationTest
 Method: testForNaN
 Body: {
    LinearTransformation transformation = LinearTransformation.forNaN();
    assertLinearTransformationNaN(transformation);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forNaN=1 ) - Predicate: N/A - Scenario: transformation (Alternative Scenario: transformation=1 )

Project: guava
 Class: LinearTransformationTest
 Method: testHorizontal_regular
 Body: {
    double y = 1.2;
    LinearTransformation transformation = LinearTransformation.horizontal(y);
    assertHorizontalLinearTransformation(transformation, y);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: horizontal=1 ) - Predicate: N/A - Scenario: y (Alternative Scenario: y=1 )

Project: guava
 Class: ListsTest
 Method: testTransformSequential
 Body: {
    List<String> list = Lists.transform(SOME_SEQUENTIAL_LIST, SOME_FUNCTION);
    assertFalse(list instanceof RandomAccess);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewArrayListFromIterable
 Body: {
    ArrayList<Integer> list = Lists.newArrayList(SOME_ITERABLE);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testTransformHashCodeSequential
 Body: {
    List<String> list = Lists.transform(SOME_SEQUENTIAL_LIST, SOME_FUNCTION);
    assertEquals(SOME_STRING_LIST.hashCode(), list.hashCode());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: hashCode=2 ) - Predicate: hashCode - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testReverseViewSequential
 Body: {
    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);
    List<Integer> toList = Lists.reverse(fromList);
    assertReverseView(fromList, toList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newLinkedList=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testNewArrayListVarArgs
 Body: {
    ArrayList<Integer> list = Lists.newArrayList(0, 1, 1);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewArrayListFromIterator
 Body: {
    ArrayList<Integer> list = Lists.newArrayList(SOME_COLLECTION.iterator());
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewLinkedListEmpty
 Body: {
    LinkedList<Integer> list = Lists.newLinkedList();
    assertEquals(Collections.emptyList(), list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testReverseViewRandomAccess
 Body: {
    List<Integer> fromList = Lists.newArrayList(SOME_LIST);
    List<Integer> toList = Lists.reverse(fromList);
    assertReverseView(fromList, toList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformViewSequential
 Body: {
    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);
    List<String> toList = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformView(fromList, toList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformIteratorRandomAccess
 Body: {
    List<Integer> fromList = Lists.newArrayList(SOME_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformIterator(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testNewCOWALEmpty
 Body: {
    CopyOnWriteArrayList<Integer> list = Lists.newCopyOnWriteArrayList();
    assertEquals(Collections.emptyList(), list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewLinkedListFromIterable
 Body: {
    LinkedList<Integer> list = Lists.newLinkedList(SOME_ITERABLE);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newLinkedList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testTransformViewRandomAccess
 Body: {
    List<Integer> fromList = Lists.newArrayList(SOME_LIST);
    List<String> toList = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformView(fromList, toList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformListIteratorSequential
 Body: {
    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformListIterator(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformModifiableRandomAccess
 Body: {
    List<Integer> fromList = Lists.newArrayList(SOME_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformModifiable(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformModifiableSequential
 Body: {
    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformModifiable(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testNewArrayListEmpty
 Body: {
    ArrayList<Integer> list = Lists.newArrayList();
    assertEquals(Collections.emptyList(), list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewArrayListFromCollection
 Body: {
    ArrayList<Integer> list = Lists.newArrayList(SOME_COLLECTION);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewCOWALFromIterable
 Body: {
    CopyOnWriteArrayList<Integer> list = Lists.newCopyOnWriteArrayList(SOME_ITERABLE);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newCopyOnWriteArrayList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testTransformListIteratorRandomAccess
 Body: {
    List<Integer> fromList = Lists.newArrayList(SOME_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformListIterator(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testPartitionSize_1
 Body: {
    List<Integer> list = asList(1, 2, 3);
    assertEquals(1, Lists.partition(list, Integer.MAX_VALUE).size());
    assertEquals(1, Lists.partition(list, Integer.MAX_VALUE - 1).size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: partition=2 ) - Predicate: size - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testTransformRandomAccess
 Body: {
    List<String> list = Lists.transform(SOME_LIST, SOME_FUNCTION);
    assertTrue(list instanceof RandomAccess);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testTransformIteratorSequential
 Body: {
    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);
    List<String> list = Lists.transform(fromList, SOME_FUNCTION);
    assertTransformIterator(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: fromList (Alternative Scenario: fromList=1 )

Project: guava
 Class: ListsTest
 Method: testTransformHashCodeRandomAccess
 Body: {
    List<String> list = Lists.transform(SOME_LIST, SOME_FUNCTION);
    assertEquals(SOME_STRING_LIST.hashCode(), list.hashCode());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: hashCode=2 ) - Predicate: hashCode - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ListsTest
 Method: testNewLinkedListFromCollection
 Body: {
    LinkedList<Integer> list = Lists.newLinkedList(SOME_COLLECTION);
    assertEquals(SOME_COLLECTION, list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newLinkedList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: ArrayBasedCharEscaperTest
 Method: testReplacementPriority
 Body: {
    CharEscaper replacingEscaper =
        new ArrayBasedCharEscaper(SIMPLE_REPLACEMENTS, ' ', '~') {
          private final char[] unknown = new char[] {'?'};

          @Override
          protected char[] escapeUnsafe(char c) {
            return unknown;
          }
        };
    EscaperAsserts.assertBasic(replacingEscaper);

    // Replacements are applied first regardless of whether the character is in
    // the safe range or not ('&' is a safe char while '\t' and '\n' are not).
    assertEquals(
        "<tab>Fish <and>? Chips?<newline>", replacingEscaper.escape("\tFish &\0 Chips\r\n"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escape=1 ) - Predicate: escape - Scenario: replacingEscaper (Alternative Scenario: replacingEscaper=1 )

Project: guava
 Class: ArrayBasedCharEscaperTest
 Method: testSafeRange_maxLessThanMin
 Body: {
    // Basic escaping of unsafe chars (wrap them in {,}'s)
    CharEscaper wrappingEscaper =
        new ArrayBasedCharEscaper(NO_REPLACEMENTS, 'Z', 'A') {
          @Override
          protected char[] escapeUnsafe(char c) {
            return ("{" + c + "}").toCharArray();
          }
        };
    EscaperAsserts.assertBasic(wrappingEscaper);
    // escape everything.
    assertEquals("{[}{F}{O}{O}{]}", wrappingEscaper.escape("[FOO]"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toCharArray=1 ) - Predicate: escape - Scenario: wrappingEscaper (Alternative Scenario: wrappingEscaper=1 )

Project: guava
 Class: ArrayBasedCharEscaperTest
 Method: testDeleteUnsafeChars
 Body: {
    CharEscaper deletingEscaper =
        new ArrayBasedCharEscaper(NO_REPLACEMENTS, ' ', '~') {
          private final char[] noChars = new char[0];

          @Override
          protected char[] escapeUnsafe(char c) {
            return noChars;
          }
        };
    EscaperAsserts.assertBasic(deletingEscaper);
    assertEquals(
        "Everything outside the printable ASCII range is deleted.",
        deletingEscaper.escape(
            "\tEverything\0 outside the\uD800\uDC00 "
                + "printable ASCII \uFFFFrange is \u007Fdeleted.\n"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escape=1 ) - Predicate: escape - Scenario: deletingEscaper (Alternative Scenario: deletingEscaper=1 )

Project: guava
 Class: ArrayBasedCharEscaperTest
 Method: testSafeRange
 Body: {
    // Basic escaping of unsafe chars (wrap them in {,}'s)
    CharEscaper wrappingEscaper =
        new ArrayBasedCharEscaper(NO_REPLACEMENTS, 'A', 'Z') {
          @Override
          protected char[] escapeUnsafe(char c) {
            return ("{" + c + "}").toCharArray();
          }
        };
    EscaperAsserts.assertBasic(wrappingEscaper);
    // '[' and '@' lie either side of [A-Z].
    assertEquals("{[}FOO{@}BAR{]}", wrappingEscaper.escape("[FOO@BAR]"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toCharArray=1 ) - Predicate: escape - Scenario: wrappingEscaper (Alternative Scenario: wrappingEscaper=1 )

Project: guava
 Class: ListToArrayTester
 Method: testToArray_noArg
 Body: {
    Object[] actual = getList().toArray();
    assertArrayEquals("toArray() order should match list", createOrderedArray(), actual);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getList=1 ) - Predicate: createOrderedArray - Scenario: actual (Alternative Scenario: actual=1 )

Project: guava
 Class: ListToArrayTester
 Method: testToArray_largeEnough
 Body: {
    Object[] actual = getList().toArray(new Object[getNumElements()]);
    assertArrayEquals("toArray(largeEnough) order should match list", createOrderedArray(), actual);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getList=1 ) - Predicate: createOrderedArray - Scenario: actual (Alternative Scenario: actual=1 )

Project: guava
 Class: ListToArrayTester
 Method: testToArray_tooSmall
 Body: {
    Object[] actual = getList().toArray(new Object[0]);
    assertArrayEquals("toArray(tooSmall) order should match list", createOrderedArray(), actual);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getList=1 ) - Predicate: createOrderedArray - Scenario: actual (Alternative Scenario: actual=1 )

Project: guava
 Class: HttpHeadersTest
 Method: testConstantNameMatchesString
 Body: {
    // Special case some of the weird HTTP Header names...
    ImmutableBiMap<String, String> specialCases =
        ImmutableBiMap.of(
            "ETAG",
            "ETag",
            "X_WEBKIT_CSP",
            "X-WebKit-CSP",
            "X_WEBKIT_CSP_REPORT_ONLY",
            "X-WebKit-CSP-Report-Only");
    ImmutableSet<String> uppercaseAcronyms =
        ImmutableSet.of(
            "ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UID", "URL", "WWW", "XSS");
    assertConstantNameMatchesString(HttpHeaders.class, specialCases, uppercaseAcronyms);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: N/A - Scenario: specialCases (Alternative Scenario: uppercaseAcronyms=1 )

Project: guava
 Class: ImmutableMapTest
 Method: testKeySetSplittable
 Body: {
    ImmutableMap<Integer, Integer> map =
        ImmutableMap.<Integer, Integer>builder()
            .put(1, 1)
            .put(2, 2)
            .put(3, 3)
            .put(4, 4)
            .put(5, 5)
            .put(6, 6)
            .build();
    assertNotNull(map.keySet().spliterator().trySplit());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=6 ) - Predicate: trySplit - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableMapTest
 Method: testNullGet
 Body: {
    ImmutableMap<String, Integer> map = ImmutableMap.of("one", 1);
    assertNull(map.get(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableMapTest
 Method: testAsMultimap
 Body: {
    ImmutableMap<String, Integer> map =
        ImmutableMap.of("one", 1, "won", 1, "two", 2, "too", 2, "three", 3);
    ImmutableSetMultimap<String, Integer> expected =
        ImmutableSetMultimap.of("one", 1, "won", 1, "two", 2, "too", 2, "three", 3);
    assertEquals(expected, map.asMultimap());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: asMultimap - Scenario: map (Alternative Scenario: expected=1 )

Project: guava
 Class: ImmutableMapTest
 Method: testAsMultimapWhenEmpty
 Body: {
    ImmutableMap<String, Integer> map = ImmutableMap.of();
    ImmutableSetMultimap<String, Integer> expected = ImmutableSetMultimap.of();
    assertEquals(expected, map.asMultimap());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: asMultimap - Scenario: map (Alternative Scenario: expected=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testDouble
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putDouble(Double.longBitsToDouble(0x0807060504030201L));
    hasher.assertBytes(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putDouble (Alternative Action: putDouble=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testShort
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putShort((short) 0x0201);
    hasher.assertBytes(new byte[] {1, 2});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putShort (Alternative Action: putShort=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testInt
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putInt(0x04030201);
    hasher.assertBytes(new byte[] {1, 2, 3, 4});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putInt (Alternative Action: putInt=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testLong
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putLong(0x0807060504030201L);
    hasher.assertBytes(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putLong (Alternative Action: putLong=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testFloat
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putFloat(Float.intBitsToFloat(0x04030201));
    hasher.assertBytes(new byte[] {1, 2, 3, 4});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putFloat (Alternative Action: putFloat=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: AbstractByteHasherTest
 Method: testChar
 Body: {
    TestHasher hasher = new TestHasher();
    hasher.putChar((char) 0x0201);
    hasher.assertBytes(new byte[] {1, 2});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putChar (Alternative Action: putChar=1 ) - Predicate: N/A - Scenario: hasher (Alternative Scenario: hasher=1 )

Project: guava
 Class: CharSourceTest
 Method: testReadLines_toList
 Body: {
    TestCharSource lines = new TestCharSource(LINES);
    assertEquals(ImmutableList.of("foo", "bar", "baz", "something"), lines.readLines());
    assertTrue(lines.wasStreamOpened() && lines.wasStreamClosed());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: wasStreamClosed=1 ) - Predicate: N/A - Scenario: lines (Alternative Scenario: lines=1 )

Project: guava
 Class: CharSourceTest
 Method: testReadFirstLine
 Body: {
    TestCharSource lines = new TestCharSource(LINES);
    assertEquals("foo", lines.readFirstLine());
    assertTrue(lines.wasStreamOpened() && lines.wasStreamClosed());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: wasStreamClosed=1 ) - Predicate: N/A - Scenario: lines (Alternative Scenario: lines=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testJoinTimeoutNoInterruptNotExpired
 Body: {
    TimedThread thread = TimedThread.createWithDelay(20);
    thread.joinSuccessfully(LONG_DELAY_MS);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: joinSuccessfully (Alternative Action: createWithDelay=1 ) - Predicate: N/A - Scenario: thread (Alternative Scenario: thread=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testTryAcquireTimeoutNoInterruptExpiredMultiPermit
 Body: {
    TimedSemaphore semaphore = TimedSemaphore.createWithDelay(LONG_DELAY_MS);
    semaphore.tryAcquireUnsuccessfully(10, 30);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: tryAcquireUnsuccessfully (Alternative Action: tryAcquireUnsuccessfully=1 ) - Predicate: N/A - Scenario: semaphore (Alternative Scenario: semaphore=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testSleepMultiInterrupt
 Body: {
    repeatedlyInterruptTestThread(10, tearDownStack);
    sleepSuccessfully(100);
    assertInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: repeatedlyInterruptTestThread (Alternative Action: sleepSuccessfully=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: UninterruptiblesTest
 Method: testTryAcquireTimeoutNoInterruptNotExpired
 Body: {
    TimedSemaphore semaphore = TimedSemaphore.createWithDelay(20);
    semaphore.tryAcquireSuccessfully(LONG_DELAY_MS);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: tryAcquireSuccessfully (Alternative Action: tryAcquireSuccessfully=1 ) - Predicate: N/A - Scenario: semaphore (Alternative Scenario: semaphore=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testJoinNoInterrupt
 Body: {
    TimedThread thread = TimedThread.createWithDelay(20);
    thread.joinSuccessfully();
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: joinSuccessfully (Alternative Action: createWithDelay=1 ) - Predicate: N/A - Scenario: thread (Alternative Scenario: thread=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testPutNoInterrupt
 Body: {
    TimedPutQueue queue = TimedPutQueue.createWithDelay(20);
    queue.putSuccessfully();
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putSuccessfully (Alternative Action: putSuccessfully=1 ) - Predicate: N/A - Scenario: queue (Alternative Scenario: queue=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testTryAcquireTimeoutNoInterruptExpired
 Body: {
    TimedSemaphore semaphore = TimedSemaphore.createWithDelay(LONG_DELAY_MS);
    semaphore.tryAcquireUnsuccessfully(30);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: tryAcquireUnsuccessfully (Alternative Action: tryAcquireUnsuccessfully=1 ) - Predicate: N/A - Scenario: semaphore (Alternative Scenario: semaphore=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testTryAcquireTimeoutNoInterruptNotExpiredMultiPermit
 Body: {
    TimedSemaphore semaphore = TimedSemaphore.createWithDelay(20);
    semaphore.tryAcquireSuccessfully(10, LONG_DELAY_MS);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: tryAcquireSuccessfully (Alternative Action: tryAcquireSuccessfully=1 ) - Predicate: N/A - Scenario: semaphore (Alternative Scenario: semaphore=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testJoinTimeoutNoInterruptExpired
 Body: {
    TimedThread thread = TimedThread.createWithDelay(LONG_DELAY_MS);
    thread.joinUnsuccessfully(30);
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: joinUnsuccessfully (Alternative Action: joinUnsuccessfully=1 ) - Predicate: N/A - Scenario: thread (Alternative Scenario: thread=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testTakeNoInterrupt
 Body: {
    TimedTakeQueue queue = TimedTakeQueue.createWithDelay(20);
    queue.takeSuccessfully();
    assertNotInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: takeSuccessfully (Alternative Action: createWithDelay=1 ) - Predicate: N/A - Scenario: queue (Alternative Scenario: queue=1 )

Project: guava
 Class: UninterruptiblesTest
 Method: testSleepSingleInterrupt
 Body: {
    requestInterruptIn(10);
    sleepSuccessfully(50);
    assertInterrupted();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: requestInterruptIn (Alternative Action: sleepSuccessfully=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitRecursiveTypeBounds
 Body: {
    Type type = new TypeCapture<EnumSet<E>>() {}.capture();
    assertVisited(type);
    new BaseTypeVisitor() {
      @Override
      void visitParameterizedType(ParameterizedType t) {
        visit(t.getActualTypeArguments());
      }

      @Override
      void visitTypeVariable(TypeVariable<?> t) {
        visit(t.getBounds());
      }
    }.visit(type);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: visit=3 ) - Predicate: N/A - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitWildcardType
 Body: {
    WildcardType type = Types.subtypeOf(String.class);
    assertVisited(type);
    new BaseTypeVisitor() {
      @Override
      void visitWildcardType(WildcardType t) {}
    }.visit(type);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: subtypeOf=1 ) - Predicate: N/A - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitClass
 Body: {
    assertVisited(String.class);
    new BaseTypeVisitor() {
      @Override
      void visitClass(Class<?> t) {}
    }.visit(String.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: visit=1 ) - Predicate: N/A - Scenario: new BaseTypeVisitor() {
      @Override
      void visitClass(Class<?> t) {}
    } (Alternative Scenario:  )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitTypeVariable
 Body: {
    Type type = new TypeCapture<T>() {}.capture();
    assertVisited(type);
    new BaseTypeVisitor() {
      @Override
      void visitTypeVariable(TypeVariable<?> t) {}
    }.visit(type);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: capture=1 ) - Predicate: N/A - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitParameterizedType
 Body: {
    Type type = new TypeCapture<Iterable<T>>() {}.capture();
    assertVisited(type);
    new BaseTypeVisitor() {
      @Override
      void visitParameterizedType(ParameterizedType t) {}
    }.visit(type);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: capture=1 ) - Predicate: N/A - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitGenericArrayType
 Body: {
    Type type = new TypeCapture<T[]>() {}.capture();
    assertVisited(type);
    new BaseTypeVisitor() {
      @Override
      void visitGenericArrayType(GenericArrayType t) {}
    }.visit(type);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: visit (Alternative Action: capture=1 ) - Predicate: N/A - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: MacHashFunctionTest
 Method: testCustomKey
 Body: {
    SecretKey customKey =
        new SecretKey() {
          @Override
          public String getAlgorithm() {
            return "HmacMD5";
          }

          @Override
          public byte[] getEncoded() {
            return new byte[8];
          }

          @Override
          public String getFormat() {
            return "RAW";
          }
        };
    assertEquals(
        "ad262969c53bc16032f160081c4a07a0",
        Hashing.hmacMd5(customKey)
            .hashString("The quick brown fox jumps over the lazy dog", UTF_8)
            .toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: hashString=1 ) - Predicate: toString - Scenario: customKey (Alternative Scenario: customKey=1 )

Project: guava
 Class: ImmutableSetTest
 Method: testCopyOf_copiesImmutableSortedSet
 Body: {
    ImmutableSortedSet<String> sortedSet = ImmutableSortedSet.of("a");
    ImmutableSet<String> copy = ImmutableSet.copyOf(sortedSet);
    assertNotSame(sortedSet, copy);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: ImmutableSetTest
 Method: testCreation_manyDuplicates
 Body: {
    // now we'll get the varargs overload
    ImmutableSet<String> set =
        ImmutableSet.of("a", "b", "c", "c", "c", "c", "b", "b", "a", "a", "c", "c", "c", "a");
    assertThat(set).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSetTest
 Method: testCreation_allDuplicates
 Body: {
    ImmutableSet<String> set = ImmutableSet.copyOf(Lists.newArrayList("a", "a"));
    assertTrue(set instanceof SingletonImmutableSet);
    assertEquals(Lists.newArrayList("a"), Lists.newArrayList(set));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=3 ) - Predicate: newArrayList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSetTest
 Method: testCreation_arrayOfArray
 Body: {
    String[] array = new String[] {"a"};
    Set<String[]> set = ImmutableSet.<String[]>of(array);
    assertEquals(Collections.singleton(array), set);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singleton=1 ) - Predicate: singleton - Scenario: array (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSetTest
 Method: testCreation_oneDuplicate
 Body: {
    // now we'll get the varargs overload
    ImmutableSet<String> set =
        ImmutableSet.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "a");
    assertEquals(
        Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"),
        Lists.newArrayList(set));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: newArrayList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FreshValueGeneratorTest
 Method: testAddSampleInstances_noInstance
 Body: {
    FreshValueGenerator generator = new FreshValueGenerator();
    generator.addSampleInstances(String.class, ImmutableList.<String>of());
    assertEquals(
        new FreshValueGenerator().generateFresh(String.class),
        generator.generateFresh(String.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addSampleInstances (Alternative Action: generateFresh=2 ) - Predicate: generateFresh - Scenario: generator (Alternative Scenario: generator=1 )

Project: guava
 Class: BasicTests
 Method: testBuilderAdd_varargs
 Body: {
      ImmutableList<String> list =
          new ImmutableList.Builder<String>().add("a", "b", "a", "c").build();
      assertEquals(asList("a", "b", "a", "c"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: BasicTests
 Method: testBuilderAdd
 Body: {
      ImmutableList<String> list =
          new ImmutableList.Builder<String>().add("a").add("b").add("a").add("c").build();
      assertEquals(asList("a", "b", "a", "c"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=4 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: BasicTests
 Method: testAsList
 Body: {
      ImmutableList<String> list = ImmutableList.of("a", "b");
      assertSame(list, list.asList());
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: BasicTests
 Method: testSerialization_empty
 Body: {
      Collection<String> c = ImmutableList.of();
      assertSame(c, SerializableTester.reserialize(c));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserialize - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: AtomicDoubleTest
 Method: testConstructor2
 Body: {
    AtomicDouble a = new AtomicDouble();
    assertBitEquals(0.0, a.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: MapRemoveEntryTester
 Method: testRemove_supportedAbsentKeyAbsentValue
 Body: {
    assertFalse(getMap().remove(k3(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapRemoveEntryTester
 Method: testRemove_supportedPresentKeyWrongValue
 Body: {
    assertFalse(getMap().remove(k0(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapRemoveEntryTester
 Method: testRemove_supportedPresent
 Body: {
    assertTrue(getMap().remove(k0(), v0()));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapRemoveEntryTester
 Method: testRemove_supportedWrongKeyPresentValue
 Body: {
    assertFalse(getMap().remove(k3(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testCloseQuietly_inputStreamWithEatenException
 Body: {
    TestInputStream in =
        new TestInputStream(new ByteArrayInputStream(new byte[1]), TestOption.CLOSE_THROWS);
    Closeables.closeQuietly(in);
    assertTrue(in.closed());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: closeQuietly (Alternative Action: closed=1 ) - Predicate: closed - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: CloseablesTest
 Method: testCloseQuietly_readerWithEatenException
 Body: {
    TestReader in = new TestReader(TestOption.CLOSE_THROWS);
    Closeables.closeQuietly(in);
    assertTrue(in.closed());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: closeQuietly (Alternative Action: closed=1 ) - Predicate: closed - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: MapReplaceTester
 Method: testReplace_supportedAbsent
 Body: {
    assertNull(getMap().replace(k3(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapReplaceTester
 Method: testReplace_supportedPresentNoChange
 Body: {
    assertEquals(v0(), getMap().replace(k0(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: v0=2 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: BloomFilterTest
 Method: testEqualsWithCustomFunnel
 Body: {
    BloomFilter<Long> bf1 = BloomFilter.create(new CustomFunnel(), 100);
    BloomFilter<Long> bf2 = BloomFilter.create(new CustomFunnel(), 100);
    assertEquals(bf1, bf2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: bf1 (Alternative Scenario: bf1=1 )

Project: guava
 Class: MapsTransformValuesUnmodifiableIteratorTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTransformValuesUnmodifiableIteratorTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: ElementTest
 Method: testTransientField
 Body: {
    Element element = A.field("transientField");
    assertTrue(element.isTransient());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: field=1 ) - Predicate: isTransient - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: ElementTest
 Method: testUnannotatedMethod
 Body: {
    Element element = A.method("notAnnotatedMethod");
    assertFalse(element.isAnnotationPresent(Tested.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=1 ) - Predicate: isAnnotationPresent - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: ElementTest
 Method: testSynchronizedMethod
 Body: {
    Element element = A.method("synchronizedMethod");
    assertTrue(element.isSynchronized());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=1 ) - Predicate: isSynchronized - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: ElementTest
 Method: testNativeMethod
 Body: {
    Element element = A.method("nativeMethod");
    assertTrue(element.isNative());
    assertTrue(element.isPackagePrivate());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=1 ) - Predicate: isPackagePrivate - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: ElementTest
 Method: testStaticField
 Body: {
    Element element = A.field("staticField");
    assertTrue(element.isStatic());
    assertTrue(element.isAnnotationPresent(Tested.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isStatic=1 ) - Predicate: isAnnotationPresent - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: ElementTest
 Method: testVolatileField
 Body: {
    Element element = A.field("volatileField");
    assertTrue(element.isVolatile());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: field=1 ) - Predicate: isVolatile - Scenario: element (Alternative Scenario: element=1 )

Project: guava
 Class: MapsTransformValuesTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTransformValuesTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: SetAddAllTester
 Method: testAddAll_supportedAllPresent
 Body: {
    assertFalse("add(allPresent) should return false", getSet().addAll(MinimalCollection.of(e0())));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getSet=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: SetAddAllTester
 Method: testAddAll_supportedSomePresent
 Body: {
    assertTrue(
        "add(somePresent) should return true", getSet().addAll(MinimalCollection.of(e3(), e0())));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: SetAddAllTester
 Method: testAddAll_withDuplicates
 Body: {
    MinimalCollection<E> elementsToAdd = MinimalCollection.of(e3(), e4(), e3(), e4());
    assertTrue("add(hasDuplicates) should return true", getSet().addAll(elementsToAdd));
    expectAdded(e3(), e4());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=3 ) - Predicate: addAll - Scenario: elementsToAdd (Alternative Scenario: elementsToAdd=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearTailClosed
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.headMultiset(b.getElement(), OPEN).entrySet());
    sortedMultiset.tailMultiset(b.getElement(), CLOSED).clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: copyToList=2 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearHeadOpenEntrySet
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.tailMultiset(b.getElement(), CLOSED).entrySet());
    sortedMultiset.headMultiset(b.getElement(), OPEN).entrySet().clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: entrySet=3 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearTailOpen
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.headMultiset(b.getElement(), CLOSED).entrySet());
    sortedMultiset.tailMultiset(b.getElement(), OPEN).clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: copyToList=2 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearTailOpenEntrySet
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.headMultiset(b.getElement(), CLOSED).entrySet());
    sortedMultiset.tailMultiset(b.getElement(), OPEN).entrySet().clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: entrySet=3 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearHeadOpen
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.tailMultiset(b.getElement(), CLOSED).entrySet());
    sortedMultiset.headMultiset(b.getElement(), OPEN).clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: copyToList=2 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearHeadClosedEntrySet
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.tailMultiset(b.getElement(), OPEN).entrySet());
    sortedMultiset.headMultiset(b.getElement(), CLOSED).entrySet().clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: entrySet=3 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearTailClosedEntrySet
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.headMultiset(b.getElement(), OPEN).entrySet());
    sortedMultiset.tailMultiset(b.getElement(), CLOSED).entrySet().clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: entrySet=3 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetNavigationTester
 Method: testClearHeadClosed
 Body: {
    List<Entry<E>> expected =
        copyToList(sortedMultiset.tailMultiset(b.getElement(), OPEN).entrySet());
    sortedMultiset.headMultiset(b.getElement(), CLOSED).clear();
    assertEquals(expected, copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: copyToList=2 ) - Predicate: copyToList - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MapPutIfAbsentTester
 Method: testPutIfAbsent_supportedAbsent
 Body: {
    assertNull(
        "putIfAbsent(notPresent, value) should return null", getMap().putIfAbsent(k3(), v3()));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: k3=1 ) - Predicate: putIfAbsent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutIfAbsentTester
 Method: testPutIfAbsent_supportedPresent
 Body: {
    assertEquals(
        "putIfAbsent(present, value) should return existing value",
        v0(),
        getMap().putIfAbsent(k0(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: SetEqualsTester
 Method: testEquals_smallerSet
 Body: {
    Collection<E> fewerElements = getSampleElements(getNumElements() - 1);
    assertFalse(
        "Sets of different sizes should not be equal.",
        getSet().equals(MinimalSet.from(fewerElements)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: fewerElements (Alternative Scenario: fewerElements=1 )

Project: guava
 Class: SetEqualsTester
 Method: testEquals_otherSetWithDifferentElements
 Body: {
    Collection<E> elements = getSampleElements(getNumElements() - 1);
    elements.add(getSubjectGenerator().samples().e3());

    assertFalse(
        "A Set should not equal another Set containing different elements.",
        getSet().equals(MinimalSet.from(elements)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: add (Alternative Action: add=1 ) - Predicate: equals - Scenario: elements (Alternative Scenario: elements=1 )

Project: guava
 Class: SetEqualsTester
 Method: testEquals_largerSet
 Body: {
    Collection<E> moreElements = getSampleElements(getNumElements() + 1);
    assertFalse(
        "Sets of different sizes should not be equal.",
        getSet().equals(MinimalSet.from(moreElements)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: moreElements (Alternative Scenario: moreElements=1 )

Project: guava
 Class: AbstractPackageSanityTestsTest
 Method: testFindClassesToTest_ignoreClasses
 Body: {
    sanityTests.ignoreClasses(Predicates.<Object>equalTo(PublicFoo.class));
    assertThat(findClassesToTest(ImmutableList.of(PublicFoo.class))).isEmpty();
    assertThat(findClassesToTest(ImmutableList.of(Foo.class))).contains(Foo.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: ignoreClasses (Alternative Action: findClassesToTest=2 ) - Predicate: N/A - Scenario: sanityTests (Alternative Scenario:  )

Project: guava
 Class: AbstractPackageSanityTestsTest
 Method: testFindClassesToTeset_ignoreUnderscores
 Body: {
    assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class)))
        .containsExactly(Foo.class, Foo_Bar.class);
    sanityTests.ignoreClasses(AbstractPackageSanityTests.UNDERSCORE_IN_NAME);
    assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class)))
        .containsExactly(Foo.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: ignoreClasses (Alternative Action: findClassesToTest=2 ) - Predicate: N/A - Scenario: sanityTests (Alternative Scenario:  )

Project: guava
 Class: AbstractPackageSanityTestsTest
 Method: testFindClassesToTest_withCorrespondingTestClassAndExplicitlyTested
 Body: {
    ImmutableList<Class<?>> classes = ImmutableList.of(Foo.class, FooTest.class);
    assertThat(findClassesToTest(classes, "testPublic")).isEmpty();
    assertThat(findClassesToTest(classes, "testNotThere", "testPublic")).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: findClassesToTest=2 ) - Predicate: N/A - Scenario: classes (Alternative Scenario: classes=1 )

Project: guava
 Class: AbstractPackageSanityTestsTest
 Method: testFindClassesToTest_publicApiOnly
 Body: {
    sanityTests.publicApiOnly();
    assertThat(findClassesToTest(ImmutableList.of(Foo.class))).isEmpty();
    assertThat(findClassesToTest(ImmutableList.of(PublicFoo.class))).contains(PublicFoo.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: publicApiOnly (Alternative Action: findClassesToTest=2 ) - Predicate: N/A - Scenario: sanityTests (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_replaceWithNullValueSupported
 Body: {
    assertEquals(
        "put(present, null) should return the associated value",
        v0(),
        put(presentKeyNullValueEntry));
    expectReplacement(presentKeyNullValueEntry);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: v0=1 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_replaceNullValueWithNullSupported
 Body: {
    initMapWithNullValue();
    assertNull(
        "put(present, null) should return the associated value (null)",
        getMap().put(getKeyForNullValue(), null));
    expectContents(createArrayWithNullValue());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: createArrayWithNullValue=1 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_supportedNotPresent
 Body: {
    assertNull("put(notPresent, value) should return null", put(e3()));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=2 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_supportedPresent
 Body: {
    assertEquals("put(present, value) should return the old value", v0(), getMap().put(k0(), v3()));
    expectReplacement(entry(k0(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: k0=2 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_nullValueSupported
 Body: {
    assertNull("put(key, null) should return null", put(nullValueEntry));
    expectAdded(nullValueEntry);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: expectAdded=1 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_nullKeySupportedNotPresent
 Body: {
    assertNull("put(null, value) should return null", put(nullKeyEntry));
    expectAdded(nullKeyEntry);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: expectAdded=1 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapPutTester
 Method: testPut_nullKeyAndValueSupported
 Body: {
    assertNull("put(null, null) should return null", put(nullKeyValueEntry));
    expectAdded(nullKeyValueEntry);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: expectAdded=1 ) - Predicate: put - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: JdkFutureAdaptersTest
 Method: testListenInPoolThreadReturnsSameFuture
 Body: {
    ListenableFuture<String> listenableFuture = immediateFuture(DATA1);
    assertSame(listenableFuture, listenInPoolThread(listenableFuture));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immediateFuture=1 ) - Predicate: listenInPoolThread - Scenario: listenableFuture (Alternative Scenario: listenableFuture=1 )

Project: guava
 Class: AbstractInvocationHandlerTest
 Method: testToString
 Body: {
    List<String> proxy = newDelegatingList(LIST1);
    assertEquals(Proxy.getInvocationHandler(proxy).toString(), proxy.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=2 ) - Predicate: toString - Scenario: proxy (Alternative Scenario: proxy=1 )

Project: guava
 Class: ThreadFactoryBuilderTest
 Method: testDaemon_true
 Body: {
    ThreadFactory factory = builder.setDaemon(true).build();
    Thread thread = factory.newThread(monitoredRunnable);
    assertTrue(thread.isDaemon());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setDaemon=1 ) - Predicate: isDaemon - Scenario: factory (Alternative Scenario: factory=1 )

Project: guava
 Class: ThreadFactoryBuilderTest
 Method: testDaemon_false
 Body: {
    ThreadFactory factory = builder.setDaemon(false).build();
    Thread thread = factory.newThread(monitoredRunnable);
    assertFalse(thread.isDaemon());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setDaemon=1 ) - Predicate: isDaemon - Scenario: factory (Alternative Scenario: factory=1 )

Project: guava
 Class: ImmutableEnumMapTest
 Method: testEmptyImmutableEnumMap
 Body: {
    ImmutableMap<AnEnum, String> map = Maps.immutableEnumMap(ImmutableMap.<AnEnum, String>of());
    assertEquals(ImmutableMap.of(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableEnumMapTest
 Method: testImmutableEnumMapOrdering
 Body: {
    ImmutableMap<AnEnum, String> map =
        Maps.immutableEnumMap(ImmutableMap.of(AnEnum.C, "c", AnEnum.A, "a", AnEnum.E, "e"));

    assertThat(map.entrySet())
        .containsExactly(
            Helpers.mapEntry(AnEnum.A, "a"),
            Helpers.mapEntry(AnEnum.C, "c"),
            Helpers.mapEntry(AnEnum.E, "e"))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: mapEntry=3 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableEnumMapTest
 Method: testIteratesOnce
 Body: {
    Map<AnEnum, AnEnum> map =
        Maps.asMap(
            ImmutableSet.of(AnEnum.A),
            new Function<AnEnum, AnEnum>() {
              boolean used = false;

              @Override
              public AnEnum apply(AnEnum ae) {
                checkState(!used, "should not be applied more than once");
                used = true;
                return ae;
              }
            });
    ImmutableMap<AnEnum, AnEnum> copy = Maps.immutableEnumMap(map);
    assertThat(copy.entrySet()).containsExactly(Helpers.mapEntry(AnEnum.A, AnEnum.A));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: entrySet=1 ) - Predicate: mapEntry - Scenario: map (Alternative Scenario: copy=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenSizeTwoSmallerThanActual
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in, 98);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataInput_readBoolean
 Body: {
    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);
    assertTrue(in.readBoolean());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDataInput=1 ) - Predicate: readBoolean - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_writeDouble
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    out.writeDouble(Double.longBitsToDouble(0x1234567876543210L));
    assertEquals(bytes, out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeDouble (Alternative Action: newDataOutput=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testByteProcessorStopEarly
 Body: {
    byte[] array = newPreFilledByteArray(10000);
    assertEquals(
        (Integer) 42,
        ByteStreams.readBytes(
            new ByteArrayInputStream(array),
            new ByteProcessor<Integer>() {
              @Override
              public boolean processBytes(byte[] buf, int off, int len) {
                assertEquals(copyOfRange(buf, off, off + len), newPreFilledByteArray(8192));
                return false;
              }

              @Override
              public Integer getResult() {
                return 42;
              }
            }));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newPreFilledByteArray=2 ) - Predicate: readBytes - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataInput_readDouble
 Body: {
    byte[] data = {0x12, 0x34, 0x56, 0x78, 0x76, 0x54, 0x32, 0x10};
    ByteArrayDataInput in = ByteStreams.newDataInput(data);
    assertEquals(Double.longBitsToDouble(0x1234567876543210L), in.readDouble(), 0.0);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDataInput=1 ) - Predicate: longBitsToDouble - Scenario: data (Alternative Scenario: data=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_empty
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    assertEquals(0, out.toByteArray().length);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDataOutput=1 ) - Predicate: N/A - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_writeByteArray
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    out.write(bytes);
    assertEquals(bytes, out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: write (Alternative Action: newDataOutput=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testUtf16Expected
 Body: {
    byte[] hardcodedExpected = utf16ExpectedWithBom;
    byte[] computedExpected = "r\u00C9sum\u00C9".getBytes(Charsets.UTF_16);
    assertEquals(hardcodedExpected, computedExpected);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getBytes=1 ) - Predicate: N/A - Scenario: hardcodedExpected (Alternative Scenario: hardcodedExpected=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenLargerSize
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in, 120);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenSmallerSize
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in, 80);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testReadBytes
 Body: {
    final byte[] array = newPreFilledByteArray(1000);
    assertEquals(
        array, ByteStreams.readBytes(new ByteArrayInputStream(array), new TestByteProcessor()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: readBytes=1 ) - Predicate: readBytes - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataInput_readLong
 Body: {
    byte[] data = {0x12, 0x34, 0x56, 0x78, 0x76, 0x54, 0x32, 0x10};
    ByteArrayDataInput in = ByteStreams.newDataInput(data);
    assertEquals(0x1234567876543210L, in.readLong());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDataInput=1 ) - Predicate: readLong - Scenario: data (Alternative Scenario: data=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenSizeOneSmallerThanActual
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    // this results in toByteArrayInternal being called when the stream is actually exhausted
    byte[] b = ByteStreams.toByteArray(in, 99);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_writeChar
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    out.writeChar('a');
    assertEquals(new byte[] {0, 97}, out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeChar (Alternative Action: writeChar=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_emptyStream
 Body: {
    InputStream in = newTestStream(0);
    byte[] b = ByteStreams.toByteArray(in);
    assertEquals(new byte[0], b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataInput_skip
 Body: {
    ByteArrayDataInput in = ByteStreams.newDataInput(new byte[2]);
    assertEquals(2, in.skipBytes(2));
    assertEquals(0, in.skipBytes(1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: skipBytes=2 ) - Predicate: skipBytes - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenSizeZero
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in, 0);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_writeShort
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    out.writeShort(0x1234);
    assertEquals(new byte[] {0x12, 0x34}, out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeShort (Alternative Action: newDataOutput=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataInput_BAIS
 Body: {
    ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {0x12, 0x34, 0x56, 0x78});
    ByteArrayDataInput in = ByteStreams.newDataInput(bais);
    assertEquals(0x12345678, in.readInt());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDataInput=1 ) - Predicate: readInt - Scenario: bais (Alternative Scenario: in=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testToByteArray_withSize_givenCorrectSize
 Body: {
    InputStream in = new ByteArrayInputStream(PRE_FILLED_100);
    byte[] b = ByteStreams.toByteArray(in, 100);
    assertEquals(PRE_FILLED_100, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toByteArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: b=1 )

Project: guava
 Class: ByteStreamsTest
 Method: testNewDataOutput_writeLong
 Body: {
    ByteArrayDataOutput out = ByteStreams.newDataOutput();
    out.writeLong(0x1234567876543210L);
    assertEquals(bytes, out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLong (Alternative Action: writeLong=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ConcurrentMapRemoveTester
 Method: testRemove_supportedPresent
 Body: {
    assertTrue(getMap().remove(k0(), v0()));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapRemoveTester
 Method: testRemove_supportedWrongKeyPresentValue
 Body: {
    assertFalse(getMap().remove(k3(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapRemoveTester
 Method: testRemove_supportedAbsentKeyAbsentValue
 Body: {
    assertFalse(getMap().remove(k3(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapRemoveTester
 Method: testRemove_supportedPresentKeyWrongValue
 Body: {
    assertFalse(getMap().remove(k0(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapContainsValueTester
 Method: testContainsNullValueYes
 Body: {
    initMultimapWithNullValue();
    assertTrue(multimap().containsValue(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullValue (Alternative Action: initMultimapWithNullValue=1 ) - Predicate: containsValue - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveIfTester
 Method: testRemoveIf_alwaysFalse
 Body: {
    assertFalse("removeIf(x -> false) should return false", collection.removeIf(x -> false));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: removeIf - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveIfTester
 Method: testRemoveIf_sometimesTrue
 Body: {
    assertTrue(
        "removeIf(isEqual(present)) should return true",
        collection.removeIf(Predicate.isEqual(samples.e0())));
    expectMissing(samples.e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: removeIf - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveIfTester
 Method: testRemoveIf_allPresent
 Body: {
    assertTrue("removeIf(x -> true) should return true", collection.removeIf(x -> true));
    expectContents();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: removeIf - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetAddTester
 Method: testAddOccurrences
 Body: {
    int originalCount = getMultiset().count(e0());
    assertEquals("old count", originalCount, getMultiset().add(e0(), 2));
    assertEquals("old count", originalCount + 2, getMultiset().count(e0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: e0=3 ) - Predicate: count - Scenario: originalCount (Alternative Scenario: originalCount=1 )

Project: guava
 Class: MultisetAddTester
 Method: testAddAll_emptySet
 Body: {
    assertFalse(getMultiset().addAll(Collections.<E>emptySet()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: emptySet=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetAddTester
 Method: testAddAll_nonEmptyList
 Body: {
    assertTrue(getMultiset().addAll(Arrays.asList(e3(), e4(), e3())));
    expectAdded(e3(), e4(), e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=4 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetAddTester
 Method: testAddOccurrencesZero
 Body: {
    int originalCount = getMultiset().count(e0());
    assertEquals("old count", originalCount, getMultiset().add(e0(), 0));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: e0=2 ) - Predicate: add - Scenario: originalCount (Alternative Scenario: originalCount=1 )

Project: guava
 Class: MultisetAddTester
 Method: testAddMeansAddOne
 Body: {
    int originalCount = getMultiset().count(e0());
    assertTrue(getMultiset().add(e0()));
    assertEquals(originalCount + 1, getMultiset().count(e0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: e0=3 ) - Predicate: count - Scenario: originalCount (Alternative Scenario: originalCount=1 )

Project: guava
 Class: MultisetAddTester
 Method: testAddAll_nonEmptyMultiset
 Body: {
    assertTrue(getMultiset().addAll(getSubjectGenerator().create(e3(), e4(), e3())));
    expectAdded(e3(), e4(), e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=4 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetAddTester
 Method: testAddAll_emptyMultiset
 Body: {
    assertFalse(getMultiset().addAll(getSubjectGenerator().create()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getSubjectGenerator=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapRemoveTester
 Method: testRemove_nullSupportedMissing
 Body: {
    assertNull("remove(null) should return null", getMap().remove(null));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapRemoveTester
 Method: testRemove_notPresent
 Body: {
    assertNull("remove(notPresent) should return null", getMap().remove(k3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: target_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: edges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.edges()).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: edges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: adjacentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: incidentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);
    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: incidentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentEdges(N1)).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentEdges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: adjacentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentEdges(E11)).containsExactly(E12);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: source_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ResourcesTest
 Method: testToToByteArray
 Body: {
    byte[] data = Resources.toByteArray(classfile(Resources.class));
    assertEquals(0xCAFEBABE, new DataInputStream(new ByteArrayInputStream(data)).readInt());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: classfile=1 ) - Predicate: readInt - Scenario: data (Alternative Scenario: data=1 )

Project: guava
 Class: ResourcesTest
 Method: testReadLines
 Body: {
    // TODO(chrisn): Check in a better resource
    URL resource = getClass().getResource("testdata/i18n.txt");
    assertEquals(ImmutableList.of(I18N), Resources.readLines(resource, Charsets.UTF_8));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: of - Scenario: resource (Alternative Scenario: resource=1 )

Project: guava
 Class: ResourcesTest
 Method: testToString
 Body: {
    URL resource = getClass().getResource("testdata/i18n.txt");
    assertEquals(I18N, Resources.toString(resource, Charsets.UTF_8));
    assertThat(Resources.toString(resource, Charsets.US_ASCII)).isNotEqualTo(I18N);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=2 ) - Predicate: N/A - Scenario: resource (Alternative Scenario: resource=1 )

Project: guava
 Class: ArrayBasedEscaperMapTest
 Method: testEmptyMap
 Body: {
    Map<Character, String> map = ImmutableMap.of();
    ArrayBasedEscaperMap fem = ArrayBasedEscaperMap.create(map);
    // Non-null array of zero length.
    assertEquals(0, fem.getReplacementArray().length);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getReplacementArray=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ArrayBasedEscaperMapTest
 Method: testMapLength
 Body: {
    Map<Character, String> map =
        ImmutableMap.of(
            'a', "first",
            'z', "last");
    ArrayBasedEscaperMap fem = ArrayBasedEscaperMap.create(map);
    // Array length is highest character value + 1
    assertEquals('z' + 1, fem.getReplacementArray().length);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getReplacementArray=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MultimapPutAllMultimapTester
 Method: testPutAllIntoEmpty
 Body: {
    Multimap<K, V> target = getSubjectGenerator().create();
    assertEquals(!multimap().isEmpty(), target.putAll(multimap()));
    assertEquals(multimap(), target);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: multimap=3 ) - Predicate: multimap - Scenario: target (Alternative Scenario: target=1 )

Project: guava
 Class: MultimapPutAllMultimapTester
 Method: testPutAllWithNullKey
 Body: {
    Multimap<K, V> source = getSubjectGenerator().create(Helpers.mapEntry(null, v0()));
    assertTrue(multimap().putAll(source));
    assertTrue(multimap().containsEntry(null, v0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: v0=2 ) - Predicate: containsEntry - Scenario: source (Alternative Scenario: source=1 )

Project: guava
 Class: MultimapPutAllMultimapTester
 Method: testPutAllWithNullValue
 Body: {
    Multimap<K, V> source = getSubjectGenerator().create(Helpers.mapEntry(k0(), null));
    assertTrue(multimap().putAll(source));
    assertTrue(multimap().containsEntry(k0(), null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: k0=2 ) - Predicate: containsEntry - Scenario: source (Alternative Scenario: source=1 )

Project: guava
 Class: SuppliersTest
 Method: testOfInstanceSuppliesNull
 Body: {
    Supplier<Integer> nullSupplier = Suppliers.ofInstance(null);
    assertNull(nullSupplier.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: ofInstance=1 ) - Predicate: get - Scenario: nullSupplier (Alternative Scenario: nullSupplier=1 )

Project: guava
 Class: SuppliersTest
 Method: testSupplierFunction
 Body: {
    Supplier<Integer> supplier = Suppliers.ofInstance(14);
    Function<Supplier<Integer>, Integer> supplierFunction = Suppliers.supplierFunction();

    assertEquals(14, (int) supplierFunction.apply(supplier));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: supplierFunction=1 ) - Predicate: N/A - Scenario: supplier (Alternative Scenario: supplierFunction=1 )

Project: guava
 Class: CharSourceTester
 Method: testReadLines_withProcessor
 Body: {
    List<String> list =
        source.readLines(
            new LineProcessor<List<String>>() {
              List<String> list = Lists.newArrayList();

              @Override
              public boolean processLine(String line) throws IOException {
                list.add(line);
                return true;
              }

              @Override
              public List<String> getResult() {
                return list;
              }
            });

    assertExpectedLines(list);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CharSourceTester
 Method: testRead_toString
 Body: {
    String string = source.read();
    assertExpectedString(string);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: read=1 ) - Predicate: N/A - Scenario: string (Alternative Scenario: string=1 )

Project: guava
 Class: CharSourceTester
 Method: testForEachLine
 Body: {
    ImmutableList.Builder<String> builder = ImmutableList.builder();
    source.forEachLine(builder::add);
    assertExpectedLines(builder.build());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEachLine (Alternative Action: build=1 ) - Predicate: build - Scenario: builder (Alternative Scenario: builder=1 )

Project: guava
 Class: CharSourceTester
 Method: testCopyTo_charSink
 Body: {
    TestCharSink sink = new TestCharSink();

    assertEquals(expected.length(), source.copyTo(sink));

    assertExpectedString(sink.getString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyTo=1 ) - Predicate: getString - Scenario: sink (Alternative Scenario: sink=1 )

Project: guava
 Class: CharSourceTester
 Method: testCopyTo_appendable
 Body: {
    StringBuilder builder = new StringBuilder();

    assertEquals(expected.length(), source.copyTo(builder));

    assertExpectedString(builder.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyTo=1 ) - Predicate: toString - Scenario: builder (Alternative Scenario: builder=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_undirectedNetwork
 Body: {
    Network<Integer, String> undirectedGraph = buildUndirectedNetwork();

    Network<Integer, String> copy = copyOf(undirectedGraph);
    assertThat(copy).isEqualTo(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_directedGraph
 Body: {
    Graph<Integer> directedGraph = buildDirectedGraph();

    Graph<Integer> copy = copyOf(directedGraph);
    assertThat(copy).isEqualTo(directedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: directedGraph (Alternative Scenario: directedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_undirectedValueGraph
 Body: {
    ValueGraph<Integer, String> undirectedGraph = buildUndirectedValueGraph();

    ValueGraph<Integer, String> copy = copyOf(undirectedGraph);
    assertThat(copy).isEqualTo(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: buildUndirectedValueGraph=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: transpose_undirectedValueGraph
 Body: {
    MutableValueGraph<Integer, String> undirectedGraph = ValueGraphBuilder.undirected().build();
    undirectedGraph.putEdgeValue(N1, N2, E12);

    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdgeValue (Alternative Action: undirected=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_undirectedGraph
 Body: {
    Graph<Integer> undirectedGraph = buildUndirectedGraph();

    Graph<Integer> copy = copyOf(undirectedGraph);
    assertThat(copy).isEqualTo(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: buildUndirectedGraph=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_directedNetwork
 Body: {
    Network<Integer, String> directedGraph = buildDirectedNetwork();

    Network<Integer, String> copy = copyOf(directedGraph);
    assertThat(copy).isEqualTo(directedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: buildDirectedNetwork=1 ) - Predicate: N/A - Scenario: directedGraph (Alternative Scenario: directedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: transpose_undirectedGraph
 Body: {
    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().build();
    undirectedGraph.putEdge(N1, N2);

    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdge (Alternative Action: undirected=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: copyOf_directedValueGraph
 Body: {
    ValueGraph<Integer, String> directedGraph = buildDirectedValueGraph();

    ValueGraph<Integer, String> copy = copyOf(directedGraph);
    assertThat(copy).isEqualTo(directedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: buildDirectedValueGraph=1 ) - Predicate: N/A - Scenario: directedGraph (Alternative Scenario: directedGraph=1 )

Project: guava
 Class: GraphsTest
 Method: transpose_undirectedNetwork
 Body: {
    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected().build();
    undirectedGraph.addEdge(N1, N2, E12);

    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: undirected=1 ) - Predicate: N/A - Scenario: undirectedGraph (Alternative Scenario: undirectedGraph=1 )

Project: guava
 Class: ImmutableMultimapTest
 Method: testBuilder_withImmutableEntry
 Body: {
    ImmutableMultimap<String, Integer> multimap =
        new Builder<String, Integer>().put(Maps.immutableEntry("one", 1)).build();
    assertEquals(Arrays.asList(1), multimap.get("one"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: asList - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: MapsTransformValuesUnmodifiableIteratorTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: MapsTransformValuesUnmodifiableIteratorTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: QueuePollTester
 Method: testPoll_size1
 Body: {
    assertEquals("size1Queue.poll() should return first element", e0(), getQueue().poll());
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueuePollTester
 Method: testPoll_empty
 Body: {
    assertNull("emptyQueue.poll() should return null", getQueue().poll());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: poll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueuePollTester
 Method: testPoll_sizeMany
 Body: {
    assertEquals("sizeManyQueue.poll() should return first element", e0(), getQueue().poll());
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_emptyArrayOfWrongTypeForEmptyCollection
 Body: {
    WrongType[] array = new WrongType[0];
    assertSame(
        "toArray(sameSizeNotAssignableTo[]) should return the given array",
        array,
        collection.toArray(array));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toArray=1 ) - Predicate: toArray - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_rightSizedArray
 Body: {
    E[] array = getSubjectGenerator().createArray(getNumElements());
    assertSame(
        "toArray(sameSizeE[]) should return the given array", array, collection.toArray(array));
    expectArrayContentsAnyOrder(createSamplesArray(), array);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectArrayContentsAnyOrder (Alternative Action: createArray=1 ) - Predicate: toArray - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_rightSizedArray_ordered
 Body: {
    E[] array = getSubjectGenerator().createArray(getNumElements());
    assertSame(
        "toArray(sameSizeE[]) should return the given array", array, collection.toArray(array));
    expectArrayContentsInOrder(getOrderedElements(), array);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectArrayContentsInOrder (Alternative Action: createArray=1 ) - Predicate: toArray - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_rightSizedArrayOfObject_ordered
 Body: {
    Object[] array = new Object[getNumElements()];
    assertSame(
        "toArray(sameSizeObject[]) should return the given array",
        array,
        collection.toArray(array));
    expectArrayContentsInOrder(getOrderedElements(), array);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectArrayContentsInOrder (Alternative Action: toArray=1 ) - Predicate: toArray - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_rightSizedArrayOfObject
 Body: {
    Object[] array = new Object[getNumElements()];
    assertSame(
        "toArray(sameSizeObject[]) should return the given array",
        array,
        collection.toArray(array));
    expectArrayContentsAnyOrder(createSamplesArray(), array);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectArrayContentsAnyOrder (Alternative Action: toArray=1 ) - Predicate: toArray - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CollectionToArrayTester
 Method: testToArray_isPlainObjectArray
 Body: {
    Object[] array = collection.toArray();
    assertEquals(Object[].class, array.getClass());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: getClass - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: ImmutableClassToInstanceMapTest
 Method: testCopyOf_imap_empty
 Body: {
    Map<Class<?>, Object> in = Collections.emptyMap();
    ClassToInstanceMap<Object> map = ImmutableClassToInstanceMap.copyOf(in);
    assertTrue(map.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: ImmutableClassToInstanceMapTest
 Method: testOf_one
 Body: {
    ImmutableClassToInstanceMap<Number> map = ImmutableClassToInstanceMap.of(int.class, 1);
    assertEquals(1, map.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: FloatsTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<float[]> comparator = Floats.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_setDefault
 Body: {
    NotInstantiable x = new NotInstantiable();
    tester.setDefault(NotInstantiable.class, x);
    assertNotNull(tester.instantiate(ConstructorParameterNotInstantiable.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: setDefault (Alternative Action: instantiate=1 ) - Predicate: instantiate - Scenario: x (Alternative Scenario: x=1 )

Project: guava
 Class: MoreFilesTest
 Method: testCreateParentDirectories_noParentsNeeded
 Body: {
    Path path = tempDir.resolve("nonexistent.file");
    assertTrue(Files.exists(path.getParent()));
    MoreFiles.createParentDirectories(path); // test that there's no exception
  }
 Pattern Name: NormalPattern_2/3LOC - Action: createParentDirectories (Alternative Action: getParent=1 ) - Predicate: exists - Scenario: path (Alternative Scenario: path=1 )

Project: guava
 Class: MultimapBuilderTest
 Method: testTreeKeys
 Body: {
    ListMultimap<String, Integer> multimap = MultimapBuilder.treeKeys().arrayListValues().build();
    assertTrue(multimap.keySet() instanceof SortedSet);
    assertTrue(multimap.asMap() instanceof SortedMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: arrayListValues=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: MultimapBuilderTest
 Method: testTreeKeys_gwtCompatible
 Body: {
    ListMultimap<String, Integer> multimap =
        MultimapBuilder.treeKeys().arrayListValues().<String, Integer>build();
    assertTrue(multimap.keySet() instanceof SortedSet);
    assertTrue(multimap.asMap() instanceof SortedMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: arrayListValues=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testEmptySubSet
 Body: {
    NavigableSet<E> empty = navigableSet.subSet(e0(), false, e0(), false);
    assertEquals(new TreeSet<E>(), empty);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: e0=2 ) - Predicate: N/A - Scenario: empty (Alternative Scenario: empty=1 )

Project: guava
 Class: CreationTests
 Method: testSingletonBuilder
 Body: {
      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>().put("one", 1).build();
      assertMapEquals(map, "one", 1);
      assertMapEquals(map.inverse(), 1, "one");
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=1 ) - Predicate: inverse - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testFromImmutableMap
 Body: {
      ImmutableBiMap<String, Integer> bimap =
          ImmutableBiMap.copyOf(
              new ImmutableMap.Builder<String, Integer>()
                  .put("one", 1)
                  .put("two", 2)
                  .put("three", 3)
                  .put("four", 4)
                  .put("five", 5)
                  .build());
      assertMapEquals(bimap, "one", 1, "two", 2, "three", 3, "four", 4, "five", 5);
      assertMapEquals(bimap.inverse(), 1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: inverse - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder_orderEntriesByValue
 Body: {
      ImmutableBiMap<String, Integer> map =
          ImmutableBiMap.<String, Integer>builder()
              .orderEntriesByValue(Ordering.natural())
              .put("three", 3)
              .put("one", 1)
              .put("five", 5)
              .put("four", 4)
              .put("two", 2)
              .build();
      assertMapEquals(map, "one", 1, "two", 2, "three", 3, "four", 4, "five", 5);
      assertMapEquals(map.inverse(), 1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: inverse - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder
 Body: {
      ImmutableBiMap<String, Integer> map =
          ImmutableBiMap.<String, Integer>builder()
              .put("one", 1)
              .put("two", 2)
              .put("three", 3)
              .put("four", 4)
              .put("five", 5)
              .build();
      assertMapEquals(map, "one", 1, "two", 2, "three", 3, "four", 4, "five", 5);
      assertMapEquals(map.inverse(), 1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: inverse - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testEmpty
 Body: {
      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.of();
      assertEquals(Collections.<String, Integer>emptyMap(), bimap);
      assertEquals(Collections.<String, Integer>emptyMap(), bimap.inverse());
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=2 ) - Predicate: emptyMap - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: CreationTests
 Method: testBuilderPutAllWithEmptyMap
 Body: {
      ImmutableBiMap<String, Integer> map =
          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();
      assertEquals(Collections.<String, Integer>emptyMap(), map);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=2 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOfSingletonMap
 Body: {
      ImmutableBiMap<String, Integer> copy =
          ImmutableBiMap.copyOf(Collections.singletonMap("one", 1));
      assertMapEquals(copy, "one", 1);
      assertSame(copy, ImmutableBiMap.copyOf(copy));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=2 ) - Predicate: copyOf - Scenario: copy (Alternative Scenario: copy=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder_withImmutableEntry
 Body: {
      ImmutableBiMap<String, Integer> map =
          new Builder<String, Integer>().put(Maps.immutableEntry("one", 1)).build();
      assertMapEquals(map, "one", 1);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_somePresentLargeCollectionToRemove
 Body: {
    assertTrue(
        "removeAll(largeIntersectingCollection) should return true",
        collection.removeAll(MinimalCollection.of(e0(), e0(), e0(), e3(), e3(), e3())));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=4 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_containsNullNoButAllowed
 Body: {
    MinimalCollection<?> containsNull = MinimalCollection.of((Object) null);
    assertFalse("removeAll(containsNull) should return false", collection.removeAll(containsNull));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: containsNull (Alternative Scenario: containsNull=1 )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_allPresent
 Body: {
    assertTrue(
        "removeAll(intersectingCollection) should return true",
        collection.removeAll(MinimalCollection.of(e0())));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_emptyCollection
 Body: {
    assertFalse(
        "removeAll(emptyCollection) should return false",
        collection.removeAll(MinimalCollection.of()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_containsNullYes
 Body: {
    initCollectionWithNullElement();
    assertTrue(
        "removeAll(containsNull) should return true",
        collection.removeAll(Collections.singleton(null)));
    // TODO: make this work with MinimalCollection
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initCollectionWithNullElement (Alternative Action: singleton=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_somePresent
 Body: {
    assertTrue(
        "removeAll(intersectingCollection) should return true",
        collection.removeAll(MinimalCollection.of(e0(), e3())));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: e0=2 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveAllTester
 Method: testRemoveAll_nonePresent
 Body: {
    assertFalse(
        "removeAll(disjointCollection) should return false",
        collection.removeAll(MinimalCollection.of(e3())));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: removeAll=1 ) - Predicate: removeAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: EscapersTest
 Method: testBuilderInitialStateNoReplacement
 Body: {
    // Unsafe characters aren't modified by default (unsafeReplacement == null).
    Escaper escaper = Escapers.builder().setSafeRange('a', 'z').build();
    assertEquals("The Quick Brown Fox", escaper.escape("The Quick Brown Fox"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: escape - Scenario: escaper (Alternative Scenario: escaper=1 )

Project: guava
 Class: EscapersTest
 Method: testBuilderInitialStateNoneUnsafe
 Body: {
    // No characters are unsafe by default (safeMin == 0, safeMax == 0xFFFF).
    Escaper escaper = Escapers.builder().setUnsafeReplacement("X").build();
    assertEquals("\0\uFFFF", escaper.escape("\0\uFFFF"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setUnsafeReplacement=1 ) - Predicate: escape - Scenario: escaper (Alternative Scenario: escaper=1 )

Project: guava
 Class: ClassPathTest
 Method: testJarFileWithSpaces
 Body: {
    URL url = makeJarUrlWithName("To test unescaped spaces in jar file name.jar");
    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);
    assertThat(ClassPath.from(classloader).getTopLevelClasses()).isNotEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getTopLevelClasses=1 ) - Predicate: N/A - Scenario: url (Alternative Scenario: classloader=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_emptyClassPath
 Body: {
    File jarFile = new File("base.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifestClasspath("")))
        .isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClassPathFromManifest=1 ) - Predicate: N/A - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testClassPathEntries_notURLClassLoader_withParent
 Body: {
    URL url = new URL("file:/a");
    URLClassLoader parent = new URLClassLoader(new URL[] {url}, null);
    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}))
        .containsExactly(new File("/a"), parent);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClassPathEntries=1 ) - Predicate: N/A - Scenario: url (Alternative Scenario: parent=1 )

Project: guava
 Class: ClassPathTest
 Method: testClassPathEntries_URLClassLoader_pathWithSpace
 Body: {
    URL url = new URL("file:///c:/Documents and Settings/");
    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);
    assertThat(ClassPath.Scanner.getClassPathEntries(classloader))
        .containsExactly(new File("/c:/Documents and Settings/"), classloader);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClassPathEntries=1 ) - Predicate: N/A - Scenario: url (Alternative Scenario: classloader=1 )

Project: guava
 Class: ClassPathTest
 Method: testClassPathEntries_URLClassLoader_pathWithEscapedSpace
 Body: {
    URL url = new URL("file:///c:/Documents%20and%20Settings/");
    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);
    assertThat(ClassPath.Scanner.getClassPathEntries(classloader))
        .containsExactly(new File("/c:/Documents and Settings/"), classloader);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClassPathEntries=1 ) - Predicate: N/A - Scenario: url (Alternative Scenario: classloader=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_multiplePaths
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath("file:/with/absolute.jar relative.jar  relative/dir");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(
            fullpath("/with/absolute.jar"),
            fullpath("base/relative.jar"),
            fullpath("base/relative/dir"))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=3 ) - Predicate: N/A - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_noClassPath
 Body: {
    File jarFile = new File("base.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest(""))).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: manifest=1 ) - Predicate: N/A - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_pathWithStrangeCharacter
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath("file:the^file.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/the^file.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_relativeJar
 Body: {
    File jarFile = new File("base/some.jar");
    // with/relative/directory is the Class-Path value in the mf file.
    Manifest manifest = manifestClasspath("with/relative.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/with/relative.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_leadingBlanks
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath(" relative.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/relative.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_trailingBlanks
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath("relative.jar ");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/relative.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_relativeDirectory
 Body: {
    File jarFile = new File("base/some.jar");
    // with/relative/directory is the Class-Path value in the mf file.
    Manifest manifest = manifestClasspath("with/relative/dir");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/with/relative/dir"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_jarInCurrentDirectory
 Body: {
    File jarFile = new File("base/some.jar");
    // with/relative/directory is the Class-Path value in the mf file.
    Manifest manifest = manifestClasspath("current.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("base/current.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_badClassPath
 Body: {
    File jarFile = new File("base.jar");
    Manifest manifest = manifestClasspath("nosuchscheme:an_invalid^path");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest)).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClassPathFromManifest=1 ) - Predicate: N/A - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testResourceScanner
 Body: {
    ResourceScanner scanner = new ResourceScanner();
    scanner.scan(ClassLoader.getSystemClassLoader());
    assertThat(scanner.resources).contains("com/google/common/reflect/ClassPathTest.class");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: scan (Alternative Action: scan=1 ) - Predicate: N/A - Scenario: scanner (Alternative Scenario: scanner=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_absoluteDirectory
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath("file:/with/absolute/dir");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("/with/absolute/dir"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: ClassPathTest
 Method: testGetClassPathFromManifest_absoluteJar
 Body: {
    File jarFile = new File("base/some.jar");
    Manifest manifest = manifestClasspath("file:/with/absolute.jar");
    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))
        .containsExactly(fullpath("/with/absolute.jar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fullpath=1 ) - Predicate: fullpath - Scenario: jarFile (Alternative Scenario: jarFile=1 )

Project: guava
 Class: MultisetElementSetTester
 Method: testElementSetRemoveAbsent
 Body: {
    Set<E> elementSet = getMultiset().elementSet();
    assertFalse(elementSet.remove(e3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: elementSet=1 ) - Predicate: remove - Scenario: elementSet (Alternative Scenario: elementSet=1 )

Project: guava
 Class: MultisetElementSetTester
 Method: testElementSetClear
 Body: {
    getMultiset().elementSet().clear();
    assertEmpty(getMultiset());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: getMultiset=2 ) - Predicate: getMultiset - Scenario: getMultiset().elementSet() (Alternative Scenario:  )

Project: guava
 Class: StopwatchTest
 Method: testCreateStarted
 Body: {
    Stopwatch startedStopwatch = Stopwatch.createStarted();
    assertTrue(startedStopwatch.isRunning());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isRunning=1 ) - Predicate: isRunning - Scenario: startedStopwatch (Alternative Scenario: startedStopwatch=1 )

Project: guava
 Class: StopwatchTest
 Method: testCreateUnstarted
 Body: {
    Stopwatch unstartedStopwatch = Stopwatch.createUnstarted();
    assertFalse(unstartedStopwatch.isRunning());
    assertEquals(0, unstartedStopwatch.elapsed(NANOSECONDS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: elapsed=1 ) - Predicate: elapsed - Scenario: unstartedStopwatch (Alternative Scenario: unstartedStopwatch=1 )

Project: guava
 Class: StopwatchTest
 Method: testStop
 Body: {
    stopwatch.start();
    assertSame(stopwatch, stopwatch.stop());
    assertFalse(stopwatch.isRunning());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: start (Alternative Action: stop=1 ) - Predicate: isRunning - Scenario: stopwatch (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testForEachPair
 Body: {
    List<String> list = new ArrayList<>();
    Streams.forEachPair(
        Stream.of("a", "b", "c"), Stream.of(1, 2, 3), (a, b) -> list.add(a + ":" + b));
    Truth.assertThat(list).containsExactly("a:1", "b:2", "c:3");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEachPair (Alternative Action: of=2 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: StreamsTest
 Method: testForEachPair_differingLengths1
 Body: {
    List<String> list = new ArrayList<>();
    Streams.forEachPair(
        Stream.of("a", "b", "c", "d"), Stream.of(1, 2, 3), (a, b) -> list.add(a + ":" + b));
    Truth.assertThat(list).containsExactly("a:1", "b:2", "c:3");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEachPair (Alternative Action: of=2 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: StreamsTest
 Method: testForEachPair_finiteWithInfinite
 Body: {
    List<String> list = new ArrayList<>();
    Streams.forEachPair(
        Stream.of("a", "b", "c"), Stream.iterate(1, i -> i + 1), (a, b) -> list.add(a + ":" + b));
    Truth.assertThat(list).containsExactly("a:1", "b:2", "c:3");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEachPair (Alternative Action: add=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: StreamsTest
 Method: testConcat_refStream
 Body: {
    assertThat(Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d")))
        .containsExactly("a", "b", "c", "d")
        .inOrder();
    SpliteratorTester.of(
            () ->
                Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d"))
                    .spliterator())
        .expect("a", "b", "c", "d");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expect (Alternative Action: of=7 ) - Predicate: N/A - Scenario: SpliteratorTester.of(
            () ->
                Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d"))
                    .spliterator()) (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testForEachPair_differingLengths2
 Body: {
    List<String> list = new ArrayList<>();
    Streams.forEachPair(
        Stream.of("a", "b", "c"), Stream.of(1, 2, 3, 4), (a, b) -> list.add(a + ":" + b));
    Truth.assertThat(list).containsExactly("a:1", "b:2", "c:3");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEachPair (Alternative Action: of=2 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentFutureTest
 Method: testTransformAsync
 Body: {
    FluentFuture<Integer> f =
        FluentFuture.from(immediateFuture(1))
            .transformAsync(
                new AsyncFunction<Integer, Integer>() {
                  @Override
                  public ListenableFuture<Integer> apply(Integer input) {
                    return immediateFuture(input + 1);
                  }
                },
                directExecutor());
    assertThat(f.get()).isEqualTo(2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immediateFuture=2 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: FluentFutureTest
 Method: testCatchingAsync
 Body: {
    FluentFuture<?> f =
        FluentFuture.from(immediateFailedFuture(new RuntimeException()))
            .catchingAsync(
                Throwable.class,
                new AsyncFunction<Throwable, Class<?>>() {
                  @Override
                  public ListenableFuture<Class<?>> apply(Throwable input) {
                    return Futures.<Class<?>>immediateFuture(input.getClass());
                  }
                },
                directExecutor());
    assertThat(f.get()).isEqualTo(RuntimeException.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: FluentFutureTest
 Method: testCatching
 Body: {
    FluentFuture<?> f =
        FluentFuture.from(immediateFailedFuture(new RuntimeException()))
            .catching(
                Throwable.class,
                new Function<Throwable, Class<?>>() {
                  @Override
                  public Class<?> apply(Throwable input) {
                    return input.getClass();
                  }
                },
                directExecutor());
    assertThat(f.get()).isEqualTo(RuntimeException.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: FluentFutureTest
 Method: testTransform
 Body: {
    FluentFuture<Integer> f =
        FluentFuture.from(immediateFuture(1))
            .transform(
                new Function<Integer, Integer>() {
                  @Override
                  public Integer apply(Integer input) {
                    return input + 1;
                  }
                },
                directExecutor());
    assertThat(f.get()).isEqualTo(2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: FluentFutureTest
 Method: testFromFluentFuture
 Body: {
    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());
    assertThat(FluentFuture.from(f)).isSameAs(f);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: from=2 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: FluentFutureTest
 Method: testFromNonFluentFuture
 Body: {
    ListenableFuture<String> f =
        new SimpleForwardingListenableFuture<String>(immediateFuture("a")) {};
    verify(!(f instanceof FluentFuture));
    assertThat(FluentFuture.from(f).get()).isEqualTo("a");
    // TODO(cpovirk): Test forwarding more extensively.
  }
 Pattern Name: NormalPattern_2/3LOC - Action: verify (Alternative Action: get=1 ) - Predicate: N/A - Scenario: f (Alternative Scenario: f=1 )

Project: guava
 Class: TopKSelectorTest
 Method: testNoElementsOffered
 Body: {
    TopKSelector<Integer> top = TopKSelector.least(10);
    assertThat(top.topK()).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: topK=1 ) - Predicate: N/A - Scenario: top (Alternative Scenario: top=1 )

Project: guava
 Class: TopKSelectorTest
 Method: testDifferentComparator
 Body: {
    TopKSelector<String> top = TopKSelector.least(3, String.CASE_INSENSITIVE_ORDER);
    top.offerAll(ImmutableList.of("a", "B", "c", "D", "e", "F"));
    assertThat(top.topK()).containsExactly("a", "B", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: offerAll (Alternative Action: topK=1 ) - Predicate: N/A - Scenario: top (Alternative Scenario: top=1 )

Project: guava
 Class: FuturesTest
 Method: testCatchingAsync_getThrowsError
 Body: {
    ListenableFuture<Object> input = UncheckedThrowingFuture.throwingError(new MyError());

    // We'd catch only MyError.class here, but then the test won't compile under GWT.
    ListenableFuture<Object> output =
        catchingAsync(input, Throwable.class, asyncIdentity(), directExecutor());
    assertThat(getDone(output)).isInstanceOf(MyError.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: directExecutor=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: output=1 )

Project: guava
 Class: FuturesTest
 Method: testCatching_getThrowsError
 Body: {
    ListenableFuture<Object> input = UncheckedThrowingFuture.throwingError(new MyError());

    // We'd catch only MyError.class here, but then the test won't compile under GWT.
    ListenableFuture<Object> output =
        catching(input, Throwable.class, identity(), directExecutor());
    assertThat(getDone(output)).isInstanceOf(MyError.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: catching=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: output=1 )

Project: guava
 Class: FuturesTest
 Method: testImmediateCancelledFutureBasic
 Body: {
    ListenableFuture<String> future = CallerClass1.makeImmediateCancelledFuture();
    assertTrue(future.isCancelled());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isCancelled=1 ) - Predicate: isCancelled - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: FuturesTest
 Method: testCatchingAsync_getThrowsRuntimeException
 Body: {
    ListenableFuture<Object> input =
        UncheckedThrowingFuture.throwingRuntimeException(new MyRuntimeException());

    // We'd catch only MyRuntimeException.class here, but then the test won't compile under GWT.
    ListenableFuture<Object> output =
        catchingAsync(input, Throwable.class, asyncIdentity(), directExecutor());
    assertThat(getDone(output)).isInstanceOf(MyRuntimeException.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: throwingRuntimeException=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: output=1 )

Project: guava
 Class: FuturesTest
 Method: testTransform_genericsNull
 Body: {
    ListenableFuture<?> nullFuture = immediateFuture(null);
    ListenableFuture<?> transformedFuture = transform(nullFuture, constant(null), directExecutor());
    assertNull(getDone(transformedFuture));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transform=1 ) - Predicate: getDone - Scenario: nullFuture (Alternative Scenario: nullFuture=1 )

Project: guava
 Class: FuturesTest
 Method: testCatching_getThrowsRuntimeException
 Body: {
    ListenableFuture<Object> input =
        UncheckedThrowingFuture.throwingRuntimeException(new MyRuntimeException());

    // We'd catch only MyRuntimeException.class here, but then the test won't compile under GWT.
    ListenableFuture<Object> output =
        catching(input, Throwable.class, identity(), directExecutor());
    assertThat(getDone(output)).isInstanceOf(MyRuntimeException.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: throwingRuntimeException=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: output=1 )

Project: guava
 Class: FuturesTest
 Method: testTransformAsync_genericsWildcard_AsyncFunction
 Body: {
    ListenableFuture<?> nullFuture = immediateFuture(null);
    ListenableFuture<?> chainedFuture =
        transformAsync(nullFuture, constantAsyncFunction(nullFuture), directExecutor());
    assertNull(getDone(chainedFuture));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformAsync=1 ) - Predicate: getDone - Scenario: nullFuture (Alternative Scenario: nullFuture=1 )

Project: guava
 Class: SetAddTester
 Method: testAdd_supportedPresent
 Body: {
    assertFalse("add(present) should return false", getSet().add(e0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: add=1 ) - Predicate: add - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: EnumsTest
 Method: testStringConverter_nullConversions
 Body: {
    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
    assertNull(converter.convert(null));
    assertNull(converter.reverse().convert(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: convert=2 ) - Predicate: convert - Scenario: converter (Alternative Scenario: converter=1 )

Project: guava
 Class: BooleansTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<boolean[]> comparator = Booleans.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: OptionalTest
 Method: testAbsent
 Body: {
    Optional<String> optionalName = Optional.absent();
    assertFalse(optionalName.isPresent());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isPresent=1 ) - Predicate: isPresent - Scenario: optionalName (Alternative Scenario: optionalName=1 )

Project: guava
 Class: OptionalTest
 Method: testPresentInstances_allAbsent
 Body: {
    List<Optional<Object>> optionals = ImmutableList.of(Optional.absent(), Optional.absent());
    assertThat(Optional.presentInstances(optionals)).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: absent=2 ) - Predicate: N/A - Scenario: optionals (Alternative Scenario: optionals=1 )

Project: guava
 Class: OptionalTest
 Method: testOr_nullSupplier_present
 Body: {
    Supplier<String> nullSupplier = Suppliers.ofInstance(null);
    assertEquals("a", Optional.of("a").or(nullSupplier));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: ofInstance=1 ) - Predicate: or - Scenario: nullSupplier (Alternative Scenario: nullSupplier=1 )

Project: guava
 Class: OptionalTest
 Method: testFromNullable
 Body: {
    Optional<String> optionalName = Optional.fromNullable("bob");
    assertEquals("bob", optionalName.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fromNullable=1 ) - Predicate: get - Scenario: optionalName (Alternative Scenario: optionalName=1 )

Project: guava
 Class: OptionalTest
 Method: testPresentInstances_somePresent
 Body: {
    List<Optional<String>> optionals =
        ImmutableList.of(Optional.of("a"), Optional.<String>absent(), Optional.of("c"));
    assertThat(Optional.presentInstances(optionals)).containsExactly("a", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=3 ) - Predicate: N/A - Scenario: optionals (Alternative Scenario: optionals=1 )

Project: guava
 Class: OptionalTest
 Method: testPresentInstances_wildcards
 Body: {
    List<Optional<? extends Number>> optionals =
        ImmutableList.<Optional<? extends Number>>of(Optional.<Double>absent(), Optional.of(2));
    Iterable<Number> onlyPresent = Optional.presentInstances(optionals);
    assertThat(onlyPresent).containsExactly(2).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: N/A - Scenario: optionals (Alternative Scenario: onlyPresent=1 )

Project: guava
 Class: OptionalTest
 Method: testAsSet_present
 Body: {
    Set<String> expected = Collections.singleton("a");
    assertEquals(expected, Optional.of("a").asSet());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singleton=1 ) - Predicate: asSet - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: OptionalTest
 Method: testPresentInstances_allPresent
 Body: {
    List<Optional<String>> optionals =
        ImmutableList.of(Optional.of("a"), Optional.of("b"), Optional.of("c"));
    assertThat(Optional.presentInstances(optionals)).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=4 ) - Predicate: N/A - Scenario: optionals (Alternative Scenario: optionals=1 )

Project: guava
 Class: QueueElementTester
 Method: testElement_size1
 Body: {
    assertEquals("size1Queue.element() should return first element", e0(), getQueue().element());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueueElementTester
 Method: testElement_sizeMany
 Body: {
    assertEquals("sizeManyQueue.element() should return first element", e0(), getQueue().element());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: FeatureUtilTest
 Method: testImpliedFeatures_returnsNewSetInstance
 Body: {
    Set<Feature<?>> features = Sets.<Feature<?>>newHashSet(ExampleBaseFeature.BASE_FEATURE_1);
    assertNotSame(features, FeatureUtil.impliedFeatures(features));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newHashSet=1 ) - Predicate: impliedFeatures - Scenario: features (Alternative Scenario: features=1 )

Project: guava
 Class: FeatureUtilTest
 Method: testAddImpliedFeatures_returnsSameSetInstance
 Body: {
    Set<Feature<?>> features = Sets.<Feature<?>>newHashSet(ExampleBaseFeature.BASE_FEATURE_1);
    assertSame(features, FeatureUtil.addImpliedFeatures(features));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newHashSet=1 ) - Predicate: addImpliedFeatures - Scenario: features (Alternative Scenario: features=1 )

Project: guava
 Class: CacheBuilderTest
 Method: testMaximumSize_largerThanInt
 Body: {
    CacheBuilder<Object, Object> builder =
        CacheBuilder.newBuilder().initialCapacity(512).maximumSize(Long.MAX_VALUE);
    LocalCache<?, ?> cache = ((LocalCache.LocalManualCache<?, ?>) builder.build()).localCache;
    assertThat(cache.segments.length * cache.segments[0].table.length()).isEqualTo(512);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: N/A - Scenario: builder (Alternative Scenario: cache=1 )

Project: guava
 Class: CacheBuilderTest
 Method: testConcurrencyLevel_small
 Body: {
    LoadingCache<?, ?> cache =
        CacheBuilder.newBuilder().concurrencyLevel(1).build(identityLoader());
    LocalCache<?, ?> map = CacheTesting.toLocalCache(cache);
    assertThat(map.segments).hasLength(1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concurrencyLevel=1 ) - Predicate: N/A - Scenario: cache (Alternative Scenario: cache=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testMultimapWrites
 Body: {
    Multimap<String, Integer> multimap = createMultimap();
    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, "bar", 2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createMultimap=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testEmptySerialization
 Body: {
    Multimap<String, Integer> multimap = ImmutableListMultimap.of();
    assertSame(multimap, SerializableTester.reserialize(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserialize - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testBuilder_withImmutableEntry
 Body: {
    ImmutableListMultimap<String, Integer> multimap =
        new Builder<String, Integer>().put(Maps.immutableEntry("one", 1)).build();
    assertEquals(Arrays.asList(1), multimap.get("one"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: asList - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testEmptyMultimapWrites
 Body: {
    Multimap<String, Integer> multimap = ImmutableListMultimap.of();
    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, "foo", 1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testCopyOfImmutableListMultimap
 Body: {
    Multimap<String, Integer> multimap = createMultimap();
    assertSame(multimap, ImmutableListMultimap.copyOf(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createMultimap=1 ) - Predicate: copyOf - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testInverseMinimizesWork
 Body: {
    ImmutableListMultimap<String, Character> multimap =
        ImmutableListMultimap.<String, Character>builder()
            .put("foo", 'f')
            .put("foo", 'o')
            .put("foo", 'o')
            .put("poo", 'p')
            .put("poo", 'o')
            .put("poo", 'o')
            .build();
    assertSame(multimap.inverse(), multimap.inverse());
    assertSame(multimap, multimap.inverse().inverse());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=6 ) - Predicate: inverse - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: MapMergeTester
 Method: testMappedToNull
 Body: {
    initMapWithNullValue();
    assertEquals(
        "Map.merge(keyMappedToNull, value, function) should return value",
        v3(),
        getMap()
            .merge(
                getKeyForNullValue(),
                v3(),
                (oldV, newV) -> {
                  throw new AssertionFailedError(
                      "Should not call merge function if key was mapped to null");
                }));
    expectReplacement(entry(getKeyForNullValue(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: v3=3 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapMergeTester
 Method: testMergeAbsentNullKey
 Body: {
    assertEquals(
        "Map.merge(null, value, function) should return value",
        v3(),
        getMap()
            .merge(
                null,
                v3(),
                (oldV, newV) -> {
                  throw new AssertionFailedError(
                      "Should not call merge function if key was absent");
                }));
    expectAdded(entry(null, v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: v3=3 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapMergeTester
 Method: testMergePresentToNull
 Body: {
    assertNull(
        "Map.merge(present, value, functionReturningNull) should return null",
        getMap()
            .merge(
                k0(),
                v3(),
                (oldV, newV) -> {
                  assertEquals(v0(), oldV);
                  assertEquals(v3(), newV);
                  return null;
                }));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: v3=2 ) - Predicate: merge - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapMergeTester
 Method: testMergePresent
 Body: {
    assertEquals(
        "Map.merge(present, value, function) should return function result",
        v4(),
        getMap()
            .merge(
                k0(),
                v3(),
                (oldV, newV) -> {
                  assertEquals(v0(), oldV);
                  assertEquals(v3(), newV);
                  return v4();
                }));
    expectReplacement(entry(k0(), v4()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: v4=3 ) - Predicate: v4 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapMergeTester
 Method: testAbsent
 Body: {
    assertEquals(
        "Map.merge(absent, value, function) should return value",
        v3(),
        getMap()
            .merge(
                k3(),
                v3(),
                (oldV, newV) -> {
                  throw new AssertionFailedError(
                      "Should not call merge function if key was absent");
                }));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: v3=2 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: PercentEscaperTest
 Method: testCustomEscaper_withpercent
 Body: {
    UnicodeEscaper e = new PercentEscaper("%", false);
    assertEquals("foo%7Cbar", e.escape("foo|bar"));
    assertEquals("foo%7Cbar", e.escape("foo%7Cbar")); // idempotent
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escape=2 ) - Predicate: N/A - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: Collections2Test
 Method: testPermutationSetOneElement
 Body: {
    Iterator<List<Integer>> permutations =
        Collections2.permutations(Collections.<Integer>singletonList(1)).iterator();
    assertNextPermutation(newArrayList(1), permutations);
    assertNoMorePermutations(permutations);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: permutations (Alternative Scenario: permutations=1 )

Project: guava
 Class: Collections2Test
 Method: testOrderedPermutationSetRepeatedElementsSize
 Body: {
    List<Integer> list = newArrayList(1, 1, 1, 1, 2, 2, 3);
    Collection<List<Integer>> permutations =
        Collections2.orderedPermutations(list, Ordering.natural());

    assertPermutationsCount(105, permutations);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: natural=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: permutations=1 )

Project: guava
 Class: FunctionsTest
 Method: testIdentity_notSame
 Body: {
    Function<Long, Long> identity = Functions.identity();
    assertNotSame(new Long(135135L), identity.apply(new Long(135135L)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=1 ) - Predicate: apply - Scenario: identity (Alternative Scenario: identity=1 )

Project: guava
 Class: FunctionsTest
 Method: testIdentity_same
 Body: {
    Function<String, String> identity = Functions.identity();
    assertNull(identity.apply(null));
    assertSame("foo", identity.apply("foo"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: identity (Alternative Scenario: identity=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_recursiveMapping
 Body: {
    Type t1 = new TypeCapture<T1>() {}.capture();
    Type t2 = new TypeCapture<T2>() {}.capture();
    assertEquals(t2, new TypeResolver().where(t1, t2).resolveType(t1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=2 ) - Predicate: resolveType - Scenario: t1 (Alternative Scenario: t1=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_primitiveArrayMapping
 Body: {
    Type t = new TypeCapture<T>() {}.capture();
    assertEquals(
        int.class,
        new TypeResolver().where(new TypeCapture<T[]>() {}.capture(), int[].class).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=2 ) - Predicate: resolveType - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_genericArraySelfMapping
 Body: {
    TypeResolver resolver = new TypeResolver();
    Type t = new TypeCapture<T[]>() {}.capture();
    assertEquals(t, resolver.where(t, t).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_wildcardSelfMapping
 Body: {
    TypeResolver resolver = new TypeResolver();
    Type t = aWildcardType();
    assertEquals(t, resolver.where(t, t).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_genericArrayMapping
 Body: {
    Type t = new TypeCapture<T>() {}.capture();
    assertEquals(
        String.class,
        new TypeResolver()
            .where(new TypeCapture<T[]>() {}.capture(), String[].class)
            .resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=2 ) - Predicate: resolveType - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_noMapping
 Body: {
    Type t = aTypeVariable();
    assertEquals(t, new TypeResolver().resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_parameterizedSelfMapping
 Body: {
    TypeResolver resolver = new TypeResolver();
    Type t = new TypeCapture<List<T>>() {}.capture();
    assertEquals(t, resolver.where(t, t).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_indirectMapping
 Body: {
    Type t1 = new TypeCapture<T>() {}.capture();
    Type t2 = aTypeVariable();
    assertEquals(
        String.class, new TypeResolver().where(t1, t2).where(t2, String.class).resolveType(t1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: where=2 ) - Predicate: resolveType - Scenario: t1 (Alternative Scenario: t1=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_rawClassSelfMapping
 Body: {
    TypeResolver resolver = new TypeResolver();
    assertEquals(
        String.class, resolver.where(String.class, String.class).resolveType(String.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_typeVariableSelfMapping
 Body: {
    TypeResolver resolver = new TypeResolver();
    Type t = aTypeVariable();
    assertEquals(t, resolver.where(t, t).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_mapFromWildcard
 Body: {
    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();
    assertEquals(
        new TypeCapture<TypedKeyMap<String>>() {}.capture(),
        new TypeResolver()
            .where(
                new TypeCapture<Map<Integer, T>>() {}.capture(),
                new TypeCapture<Map<?, String>>() {}.capture())
            .resolveType(subtype));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=4 ) - Predicate: capture - Scenario: subtype (Alternative Scenario: subtype=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_mapFromWildcardToParameterized
 Body: {
    Type subtype = new TypeCapture<TypedListKeyMap<T>>() {}.capture();
    assertEquals(
        new TypeCapture<TypedListKeyMap<String>>() {}.capture(),
        new TypeResolver()
            .where(
                new TypeCapture<Map<List<Integer>, T>>() {}.capture(),
                new TypeCapture<Map<?, String>>() {}.capture())
            .resolveType(subtype));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=4 ) - Predicate: capture - Scenario: subtype (Alternative Scenario: subtype=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_typeVariableMapping
 Body: {
    Type t = aTypeVariable();
    assertEquals(String.class, new TypeResolver().where(t, String.class).resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: resolveType - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_actualArgHasWildcard
 Body: {
    TypeResolver resolver =
        new TypeResolver()
            .where(
                new TypeCapture<Iterable<Map<?, V>>>() {}.capture(),
                new TypeCapture<Iterable<Map<String, Integer>>>() {}.capture());
    assertEquals(
        new TypeCapture<K>() {}.capture(), resolver.resolveType(new TypeCapture<K>() {}.capture()));
    assertEquals(Integer.class, resolver.resolveType(new TypeCapture<V>() {}.capture()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=5 ) - Predicate: resolveType - Scenario: resolver (Alternative Scenario: resolver=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_wildcardTypeMapping
 Body: {
    Type t = new TypeCapture<T>() {}.capture();
    assertEquals(
        String.class,
        new TypeResolver()
            .where(
                new TypeCapture<List<? extends T>>() {}.capture(),
                new TypeCapture<List<? extends String>>() {}.capture())
            .resolveType(t));
    assertEquals(
        String.class,
        new TypeResolver()
            .where(
                new TypeCapture<List<? super T>>() {}.capture(),
                new TypeCapture<List<? super String>>() {}.capture())
            .resolveType(t));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: capture=5 ) - Predicate: resolveType - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: PreconditionsTest
 Method: testCheckNotNull_simple_success
 Body: {
    String result = Preconditions.checkNotNull(NON_NULL_STRING);
    assertSame(NON_NULL_STRING, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: checkNotNull=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: PreconditionsTest
 Method: testCheckNotNull_simpleMessage_success
 Body: {
    String result = Preconditions.checkNotNull(NON_NULL_STRING, IGNORE_ME);
    assertSame(NON_NULL_STRING, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: checkNotNull=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: PreconditionsTest
 Method: testCheckNotNull_complexMessage_success
 Body: {
    String result = Preconditions.checkNotNull(NON_NULL_STRING, "%s", IGNORE_ME);
    assertSame(NON_NULL_STRING, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: checkNotNull=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultisetCountTester
 Method: testCount_3
 Body: {
    initThreeCopies();
    assertEquals("multiset.count(thriceContained) didn't return 3", 3, getMultiset().count(e0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initThreeCopies (Alternative Action: initThreeCopies=1 ) - Predicate: count - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetCountTester
 Method: testCount_nullPresent
 Body: {
    initCollectionWithNullElement();
    assertEquals(1, getMultiset().count(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: count - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<short[]> comparator = Shorts.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: DoublesTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<double[]> comparator = Doubles.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_withDefault_empty
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertEquals("bar", Iterables.getLast(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getLast - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testSize_collection_doesntIterate
 Body: {
    List<Integer> nums = asList(1, 2, 3, 4, 5);
    List<Integer> collection =
        new ArrayList<Integer>(nums) {
          @Override
          public Iterator<Integer> iterator() {
            throw new AssertionFailedError("Don't iterate me!");
          }
        };
    assertEquals(5, Iterables.size(collection));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: nums (Alternative Scenario: collection=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_skipNone
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b");
    assertEquals(newArrayList("a", "b"), newArrayList(skip(set, 0)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: newArrayList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGet_withDefault_simple
 Body: {
    ArrayList<String> list = newArrayList("a", "b", "c");
    assertEquals("b", Iterables.get(list, 1, "d"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: get - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_nonnull_iterable_no
 Body: {
    Iterable<String> set = iterable("a", "b");
    assertFalse(Iterables.contains(set, "c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGetOnlyElement_noDefault_valid
 Body: {
    Iterable<String> iterable = Collections.singletonList("foo");
    assertEquals("foo", Iterables.getOnlyElement(iterable));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: getOnlyElement - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_simple
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b", "c", "d", "e");
    assertEquals(newArrayList("c", "d", "e"), newArrayList(skip(set, 2)));
    assertEquals("[c, d, e]", skip(set, 2).toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: toString - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGet_withDefault_doesntIterate
 Body: {
    List<String> list = new DiesOnIteratorArrayList();
    list.add("a");
    assertEquals("a", Iterables.get(list, 0, "b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: add (Alternative Action: add=1 ) - Predicate: get - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testGet_withDefault_lastPlusOne
 Body: {
    ArrayList<String> list = newArrayList("a", "b", "c");
    assertEquals("d", Iterables.get(list, 3, "d"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: get - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testSize1Collection
 Body: {
    Iterable<String> iterable = Collections.singleton("a");
    assertEquals(1, Iterables.size(iterable));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singleton=1 ) - Predicate: size - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_null_iterable_no
 Body: {
    Iterable<String> set = iterable("a", "b");
    assertFalse(Iterables.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGetOnlyElement_withDefault_empty_null
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertNull(Iterables.getOnlyElement(iterable, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getOnlyElement - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_null_set_no
 Body: {
    Iterable<String> set = Sets.newHashSet("a", "b");
    assertFalse(Iterables.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testSize2NonCollection
 Body: {
    Iterable<Integer> iterable =
        new Iterable<Integer>() {
          @Override
          public Iterator<Integer> iterator() {
            return asList(0, 1).iterator();
          }
        };
    assertEquals(2, Iterables.size(iterable));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: size - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_skipNoneList
 Body: {
    Collection<String> list = newArrayList("a", "b");
    assertEquals(newArrayList("a", "b"), newArrayList(skip(list, 0)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=3 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_iterable
 Body: {
    Set<String> set = ImmutableSet.of("a", "b", "c");
    assertEquals("c", Iterables.getLast(set));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: getLast - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGet_withDefault_iterable
 Body: {
    Set<String> set = ImmutableSet.of("a", "b", "c");
    assertEquals("b", Iterables.get(set, 1, "d"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_nonnull_set_no
 Body: {
    Iterable<String> set = Sets.newHashSet("a", "b");
    assertFalse(Iterables.contains(set, "c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGetFirst_withDefault_singleton
 Body: {
    Iterable<String> iterable = Collections.singletonList("foo");
    assertEquals("foo", Iterables.getFirst(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getFirst=1 ) - Predicate: getFirst - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testToArrayEmpty
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    String[] array = Iterables.toArray(iterable, String.class);
    assertTrue(Arrays.equals(new String[0], array));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: equals - Scenario: iterable (Alternative Scenario: array=1 )

Project: guava
 Class: IterablesTest
 Method: testGetFirst_withDefault_empty
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertEquals("bar", Iterables.getFirst(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getFirst - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGetFirst_withDefault_multiple
 Body: {
    Iterable<String> iterable = asList("foo", "bar");
    assertEquals("foo", Iterables.getFirst(iterable, "qux"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getFirst=1 ) - Predicate: getFirst - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGet_withDefault_last
 Body: {
    ArrayList<String> list = newArrayList("a", "b", "c");
    assertEquals("c", Iterables.get(list, 2, "d"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: get - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testPartition_empty
 Body: {
    Iterable<Integer> source = Collections.emptySet();
    Iterable<List<Integer>> partitions = Iterables.partition(source, 1);
    assertTrue(Iterables.isEmpty(partitions));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: isEmpty - Scenario: source (Alternative Scenario: partitions=1 )

Project: guava
 Class: IterablesTest
 Method: testConsumingIterable_noIteratorCall
 Body: {
    Queue<Integer> queue = new UnIterableQueue<>(Lists.newLinkedList(asList(5, 14)));

    Iterator<Integer> consumingIterator = Iterables.consumingIterable(queue).iterator();
    /*
     * Make sure that we can get an element off without calling
     * UnIterableQueue.iterator().
     */
    assertEquals(5, consumingIterator.next().intValue());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: next=1 ) - Predicate: intValue - Scenario: queue (Alternative Scenario: consumingIterator=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_pastEnd
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b");
    assertEquals(emptyList(), newArrayList(skip(set, 20)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_withDefault_not_empty_list
 Body: {
    // TODO: verify that this is the best testing strategy.
    List<String> diesOnIteratorList = new DiesOnIteratorArrayList();
    diesOnIteratorList.add("bar");

    assertEquals("bar", Iterables.getLast(diesOnIteratorList, "qux"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: add (Alternative Action: add=1 ) - Predicate: getLast - Scenario: diesOnIteratorList (Alternative Scenario: diesOnIteratorList=1 )

Project: guava
 Class: IterablesTest
 Method: testIndexOf_oneElement
 Body: {
    List<String> list = Lists.newArrayList("bob");
    assertEquals(0, Iterables.indexOf(list, Predicates.equalTo("bob")));
    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo("jack")));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: equalTo=2 ) - Predicate: indexOf - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_withDefault_empty_null
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertNull(Iterables.getLast(iterable, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getLast - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGetOnlyElement_withDefault_singleton
 Body: {
    Iterable<String> iterable = Collections.singletonList("foo");
    assertEquals("foo", Iterables.getOnlyElement(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: getOnlyElement - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_list
 Body: {
    List<String> list = newArrayList("a", "b", "c");
    assertEquals("c", Iterables.getLast(list));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: getLast - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testSize0
 Body: {
    Iterable<String> iterable = Collections.emptySet();
    assertEquals(0, Iterables.size(iterable));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: size - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_withDefault_multiple
 Body: {
    Iterable<String> iterable = asList("foo", "bar");
    assertEquals("bar", Iterables.getLast(iterable, "qux"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getLast=1 ) - Predicate: getLast - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_simpleList
 Body: {
    Collection<String> list = newArrayList("a", "b", "c", "d", "e");
    assertEquals(newArrayList("c", "d", "e"), newArrayList(skip(list, 2)));
    assertEquals("[c, d, e]", skip(list, 2).toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=3 ) - Predicate: toString - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_null_set_yes
 Body: {
    Iterable<String> set = Sets.newHashSet("a", null, "b");
    assertTrue(Iterables.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testIndexOf_empty
 Body: {
    List<String> list = new ArrayList<>();
    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo("")));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: equalTo=1 ) - Predicate: indexOf - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: testIndexOf_genericPredicate2
 Body: {
    List<String> sequences = Lists.newArrayList("bob", "charlie", "henry", "apple", "lemon");
    assertEquals(3, Iterables.indexOf(sequences, STARTSWITH_A));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: indexOf - Scenario: sequences (Alternative Scenario: sequences=1 )

Project: guava
 Class: IterablesTest
 Method: testGetFirst_withDefault_empty_null
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertNull(Iterables.getFirst(iterable, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getFirst - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_withDefault_singleton
 Body: {
    Iterable<String> iterable = Collections.singletonList("foo");
    assertEquals("foo", Iterables.getLast(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: getLast - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_nonnull_iterable_yes
 Body: {
    Iterable<String> set = iterable("a", null, "b");
    assertTrue(Iterables.contains(set, "b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testToArraySingleton
 Body: {
    Iterable<String> iterable = Collections.singletonList("a");
    String[] array = Iterables.toArray(iterable, String.class);
    assertTrue(Arrays.equals(new String[] {"a"}, array));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: equals=1 ) - Predicate: equals - Scenario: iterable (Alternative Scenario: array=1 )

Project: guava
 Class: IterablesTest
 Method: testGetOnlyElement_withDefault_empty
 Body: {
    Iterable<String> iterable = Collections.emptyList();
    assertEquals("bar", Iterables.getOnlyElement(iterable, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: getOnlyElement - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_null_iterable_yes
 Body: {
    Iterable<String> set = iterable("a", null, "b");
    assertTrue(Iterables.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IterablesTest
 Method: testGetLast_sortedSet
 Body: {
    SortedSet<String> sortedSet = ImmutableSortedSet.of("b", "c", "a");
    assertEquals("c", Iterables.getLast(sortedSet));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: getLast - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: IterablesTest
 Method: testSkip_pastEndList
 Body: {
    Collection<String> list = newArrayList("a", "b");
    assertEquals(emptyList(), newArrayList(skip(list, 20)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: IterablesTest
 Method: test_contains_nonnull_set_yes
 Body: {
    Iterable<String> set = Sets.newHashSet("a", null, "b");
    assertTrue(Iterables.contains(set, "b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableRangeSetTest
 Method: testDifference
 Body: {
    RangeSet<Integer> expected =
        ImmutableRangeSet.<Integer>builder()
            .add(Range.openClosed(3, 4))
            .add(Range.open(8, 10))
            .add(Range.openClosed(15, 17))
            .build();

    assertThat(RANGE_SET_ONE.difference(RANGE_SET_TWO)).isEqualTo(expected);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=3 ) - Predicate: N/A - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: ImmutableRangeSetTest
 Method: testIntersection
 Body: {
    RangeSet<Integer> expected =
        ImmutableRangeSet.<Integer>builder()
            .add(Range.closed(2, 3))
            .add(Range.open(6, 7))
            .add(Range.singleton(8))
            .build();

    assertThat(RANGE_SET_ONE.intersection(RANGE_SET_TWO)).isEqualTo(expected);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=3 ) - Predicate: N/A - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: ImmutableRangeSetTest
 Method: testUnion
 Body: {
    RangeSet<Integer> expected =
        ImmutableRangeSet.<Integer>builder()
            .add(Range.openClosed(0, 4))
            .add(Range.closedOpen(5, 10))
            .add(Range.closedOpen(12, 15))
            .add(Range.openClosed(15, 17))
            .add(Range.open(19, 20))
            .build();

    assertThat(RANGE_SET_ONE.union(RANGE_SET_TWO)).isEqualTo(expected);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=5 ) - Predicate: N/A - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultimapForEachTester
 Method: testForEach
 Body: {
    List<Entry<K, V>> entries = new ArrayList<>();
    multimap().forEach((k, v) -> entries.add(mapEntry(k, v)));
    assertEqualIgnoringOrder(getSampleElements(), multimap().entries());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: multimap=2 ) - Predicate: getSampleElements - Scenario: entries (Alternative Scenario: entries=1 )

Project: guava
 Class: MultimapForEachTester
 Method: testForEachOrder
 Body: {
    List<Entry<K, V>> entries = new ArrayList<>();
    multimap().forEach((k, v) -> entries.add(mapEntry(k, v)));
    assertEqualIgnoringOrder(getSampleElements(), multimap().entries());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: multimap=2 ) - Predicate: getSampleElements - Scenario: entries (Alternative Scenario: entries=1 )

Project: guava
 Class: ArrayListMultimapTest
 Method: testCreate
 Body: {
    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create();
    assertEquals(3, multimap.expectedValuesPerKey);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ArrayListMultimapTest
 Method: testCreateFromArrayListMultimap
 Body: {
    ArrayListMultimap<String, Integer> original = ArrayListMultimap.create(15, 20);
    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(original);
    assertEquals(20, multimap.expectedValuesPerKey);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: original (Alternative Scenario: original=1 )

Project: guava
 Class: ArrayListMultimapTest
 Method: testCreateFromSizes
 Body: {
    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(15, 20);
    assertEquals(20, multimap.expectedValuesPerKey);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ArrayListMultimapTest
 Method: testCreateFromHashMultimap
 Body: {
    Multimap<String, Integer> original = HashMultimap.create();
    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(original);
    assertEquals(3, multimap.expectedValuesPerKey);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: original (Alternative Scenario: original=1 )

Project: guava
 Class: RateLimiterTest
 Method: testImmediateTryAcquire
 Body: {
    RateLimiter r = RateLimiter.create(1);
    assertTrue("Unable to acquire initial permit", r.tryAcquire());
    assertFalse("Capable of acquiring secondary permit", r.tryAcquire());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryAcquire=2 ) - Predicate: tryAcquire - Scenario: r (Alternative Scenario: r=1 )

Project: guava
 Class: ImmutableNetworkTest
 Method: copyOfImmutableNetwork_optimized
 Body: {
    Network<String, String> network1 =
        ImmutableNetwork.copyOf(NetworkBuilder.directed().<String, String>build());
    Network<String, String> network2 = ImmutableNetwork.copyOf(network1);

    assertThat(network2).isSameAs(network1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=2 ) - Predicate: N/A - Scenario: network1 (Alternative Scenario: network1=1 )

Project: guava
 Class: EvictingQueueTest
 Method: testRemainingCapacity_maxSize0
 Body: {
    EvictingQueue<String> queue = EvictingQueue.create(0);
    assertEquals(0, queue.remainingCapacity());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: remainingCapacity - Scenario: queue (Alternative Scenario: queue=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_typeVariable_boundIsTypeVariableAndInterface
 Body: {
    makeUnmodifiable(TypeToken.of(new TypeCapture<T2>() {}.capture()).getGenericInterfaces())
        .containsExactly(TypeToken.of(new TypeCapture<T1>() {}.capture()));
    assertHasArrayInterfaces(new TypeToken<T2[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: of=2 ) - Predicate: N/A - Scenario: makeUnmodifiable(TypeToken.of(new TypeCapture<T2>() {}.capture()).getGenericInterfaces()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSubtype_fromWildcard
 Body: {
    @SuppressWarnings("unchecked") // can't do new TypeToken<? extends ...>() {}
    TypeToken<? super Iterable<String>> type =
        (TypeToken<? super Iterable<String>>)
            TypeToken.of(Types.supertypeOf(new TypeToken<Iterable<String>>() {}.getType()));
    assertEquals(new TypeToken<List<String>>() {}, type.getSubtype(List.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getType=1 ) - Predicate: getSubtype - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: TypeTokenTest
 Method: testAssignableClassToArrayType
 Body: {
    TypeToken<List<String>[]> tokenL = new TypeToken<List<String>[]>() {};
    assertTrue(tokenL.isSupertypeOf(StringList[].class));
    assertFalse(tokenL.isSupertypeOf(List[].class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isSupertypeOf=2 ) - Predicate: isSupertypeOf - Scenario: tokenL (Alternative Scenario: tokenL=1 )

Project: guava
 Class: TypeTokenTest
 Method: testValueEqualityNotInstanceEquality
 Body: {
    TypeToken<List<String>> a = new TypeToken<List<String>>() {};
    TypeToken<List<String>> b = new TypeToken<List<String>>() {};
    assertEquals(a, b);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action:  ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: TypeTokenTest
 Method: testMethod_declaredBySuperclass
 Body: {
    Method toStringMethod = Object.class.getMethod("toString");
    ImmutableList<String> list = ImmutableList.of("foo");
    assertEquals(list.toString(), TypeToken.of(List.class).method(toStringMethod).invoke(list));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: toString - Scenario: toStringMethod (Alternative Scenario: toStringMethod=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_chained
 Body: {
    @SuppressWarnings("unchecked") // StringListIterable extensd ListIterable<String>
    TypeToken<ListIterable<String>> listIterableType =
        (TypeToken<ListIterable<String>>)
            TypeToken.of(StringListIterable.class).getSupertype(ListIterable.class);
    ParameterizedType expectedType =
        Types.newParameterizedType(
            Iterable.class, Types.newParameterizedType(List.class, String.class));
    assertEquals(expectedType, listIterableType.getSupertype(Iterable.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newParameterizedType=2 ) - Predicate: getType - Scenario: listIterableType (Alternative Scenario: listIterableType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_typeVariable_boundsAreClassWithFBoundedInterface
 Body: {
    makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces())
        .containsExactly(new TypeToken<Iterable<T>>() {});
    assertHasArrayInterfaces(new TypeToken<T[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: containsExactly=1 ) - Predicate: N/A - Scenario: makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testResolveType
 Body: {
    Method getFromList = List.class.getMethod("get", int.class);
    TypeToken<?> returnType =
        new TypeToken<List<String>>() {}.resolveType(getFromList.getGenericReturnType());
    assertEquals(String.class, returnType.getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: getType - Scenario: getFromList (Alternative Scenario: getFromList=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGenericArrayType
 Body: {
    TypeToken<List<String>[]> token = new TypeToken<List<String>[]>() {};
    assertEquals(List[].class, token.getRawType());
    assertThat(token.getType()).isInstanceOf(GenericArrayType.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRawType=1 ) - Predicate: N/A - Scenario: token (Alternative Scenario: token=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_fullySpecializedType
 Body: {
    Type expectedType = new TypeToken<Map<String, List<Object>>>() {}.getType();
    assertEquals(
        expectedType,
        new TypeToken<ListMap<String, Object>>() {}.getSupertype(Map.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getType=2 ) - Predicate: getType - Scenario: expectedType (Alternative Scenario: expectedType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testMethod_returnType_resolvedAgainstTypeBound
 Body: {
    Method getMethod = List.class.getMethod("get", int.class);
    Invokable<T, String> invokable =
        new TypeToken<T>(getClass()) {}.method(getMethod).returning(String.class);
    assertEquals(TypeToken.of(String.class), invokable.getReturnType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: of - Scenario: getMethod (Alternative Scenario: invokable=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_typeVariable_boundsAreInterfaces
 Body: {
    makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces())
        .containsExactly(TypeToken.of(CharSequence.class), new TypeToken<Iterable<String>>() {});
    assertHasArrayInterfaces(new TypeToken<T[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: of=2 ) - Predicate: N/A - Scenario: makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetClass
 Body: {
    TypeToken<List> token = TypeToken.of(List.class);
    assertEquals(new TypeToken<List>() {}, token);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: token (Alternative Scenario: token=1 )

Project: guava
 Class: TypeTokenTest
 Method: testMethod_getOwnerType
 Body: {
    Method sizeMethod = List.class.getMethod("size");
    assertEquals(
        TypeToken.of(List.class), TypeToken.of(List.class).method(sizeMethod).getOwnerType());
    assertEquals(
        new TypeToken<List<String>>() {},
        new TypeToken<List<String>>() {}.method(sizeMethod).getOwnerType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=2 ) - Predicate: getOwnerType - Scenario: sizeMethod (Alternative Scenario: sizeMethod=1 )

Project: guava
 Class: TypeTokenTest
 Method: testMethod_exceptionTypes
 Body: {
    Method failMethod = Loser.class.getMethod("lose");
    Invokable<T, ?> invokable = new TypeToken<T>(getClass()) {}.method(failMethod);
    assertThat(invokable.getExceptionTypes()).contains(TypeToken.of(AssertionError.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getExceptionTypes=1 ) - Predicate: of - Scenario: failMethod (Alternative Scenario: failMethod=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_wildcard_boundIsInterface
 Body: {
    TypeToken<Iterable<String>> interfaceType = new TypeToken<Iterable<String>>() {};
    makeUnmodifiable(TypeToken.of(Types.subtypeOf(interfaceType.getType())).getGenericInterfaces())
        .containsExactly(interfaceType);
    assertHasArrayInterfaces(new TypeToken<Iterable<String>[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: containsExactly=1 ) - Predicate: N/A - Scenario: interfaceType (Alternative Scenario: interfaceType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testTypeIsCorrect
 Body: {
    TypeToken<List<String>> token = new TypeToken<List<String>>() {};
    assertEquals(StringList.class.getGenericInterfaces()[0], token.getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getType=1 ) - Predicate: getType - Scenario: token (Alternative Scenario: token=1 )

Project: guava
 Class: TypeTokenTest
 Method: testConstructor_getOwnerType
 Body: {
    @SuppressWarnings("rawtypes") // raw class ArrayList.class
    Constructor<ArrayList> constructor = ArrayList.class.getConstructor();
    assertEquals(
        TypeToken.of(ArrayList.class),
        TypeToken.of(ArrayList.class).constructor(constructor).getOwnerType());
    assertEquals(
        new TypeToken<ArrayList<String>>() {},
        new TypeToken<ArrayList<String>>() {}.constructor(constructor).getOwnerType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: getOwnerType - Scenario: constructor (Alternative Scenario: constructor=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_fullyGenericType
 Body: {
    ParameterizedType expectedType =
        Types.newParameterizedType(
            Map.class,
            ListMap.class.getTypeParameters()[0],
            Types.newParameterizedType(List.class, ListMap.class.getTypeParameters()[1]));
    assertEquals(expectedType, TypeToken.of(ListMap.class).getSupertype(Map.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newParameterizedType=2 ) - Predicate: getType - Scenario: expectedType (Alternative Scenario: expectedType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testResolveType_fromWildcard
 Body: {
    ParameterizedType withWildcardType =
        (ParameterizedType) new TypeCapture<Comparable<? extends Iterable<String>>>() {}.capture();
    TypeToken<?> wildcardType = TypeToken.of(withWildcardType.getActualTypeArguments()[0]);
    assertEquals(
        String.class, wildcardType.resolveType(Iterable.class.getTypeParameters()[0]).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: getType - Scenario: withWildcardType (Alternative Scenario: withWildcardType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_fromTypeVariable
 Body: {
    @SuppressWarnings("unchecked") // to construct TypeToken<T> from TypeToken.of()
    TypeToken<T> typeVariableToken = (TypeToken<T>) TypeToken.of(new TypeCapture<T>() {}.capture());
    assertEquals(
        new TypeToken<Iterable<String>>() {}, typeVariableToken.getSupertype(Iterable.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: getSupertype - Scenario: typeVariableToken (Alternative Scenario: typeVariableToken=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_withoutTypeVariable
 Body: {
    ParameterizedType expectedType =
        Types.newParameterizedType(
            Iterable.class, Types.newParameterizedType(List.class, String.class));
    assertEquals(
        expectedType,
        TypeToken.of(StringListIterable.class).getSupertype(Iterable.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newParameterizedType=2 ) - Predicate: getType - Scenario: expectedType (Alternative Scenario: expectedType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_withTypeVariable
 Body: {
    ParameterizedType expectedType =
        Types.newParameterizedType(
            Iterable.class,
            Types.newParameterizedType(List.class, ListIterable.class.getTypeParameters()[0]));
    assertEquals(
        expectedType, TypeToken.of(ListIterable.class).getSupertype(Iterable.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newParameterizedType=2 ) - Predicate: getType - Scenario: expectedType (Alternative Scenario: expectedType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testRawTypeIsCorrect
 Body: {
    TypeToken<List<String>> token = new TypeToken<List<String>>() {};
    assertEquals(List.class, token.getRawType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRawType=1 ) - Predicate: getRawType - Scenario: token (Alternative Scenario: token=1 )

Project: guava
 Class: TypeTokenTest
 Method: testMultiDimensionalGenericArrayType
 Body: {
    TypeToken<List<Long>[][][]> token = new TypeToken<List<Long>[][][]>() {};
    assertEquals(List[][][].class, token.getRawType());
    assertThat(token.getType()).isInstanceOf(GenericArrayType.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRawType=1 ) - Predicate: N/A - Scenario: token (Alternative Scenario: token=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_partiallySpecializedType
 Body: {
    Type expectedType = new TypeToken<Map<String, List<V>>>() {}.getType();
    assertEquals(
        expectedType, new TypeToken<StringListMap<V>>() {}.getSupertype(Map.class).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getType=2 ) - Predicate: getType - Scenario: expectedType (Alternative Scenario: expectedType=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_typeVariable_boundsAreClassWithInterface
 Body: {
    makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces())
        .containsExactly(new TypeToken<Iterable<String>>() {});
    assertHasArrayInterfaces(new TypeToken<T[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: containsExactly=1 ) - Predicate: N/A - Scenario: makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetType
 Body: {
    TypeToken<?> t = TypeToken.of(StringList.class.getGenericInterfaces()[0]);
    assertEquals(new TypeToken<List<String>>() {}, t);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: t (Alternative Scenario: t=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericInterfaces_typeVariable_boundsAreFBoundedInterfaces
 Body: {
    makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces())
        .containsExactly(TypeToken.of(CharSequence.class), new TypeToken<Iterable<T>>() {});
    assertHasArrayInterfaces(new TypeToken<T[]>() {});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: containsExactly (Alternative Action: of=2 ) - Predicate: N/A - Scenario: makeUnmodifiable(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testConstructor_exceptionTypes
 Body: {
    @SuppressWarnings("rawtypes") // Reflection API skew
    Constructor<CannotConstruct> constructor = CannotConstruct.class.getConstructor();
    Invokable<T, ?> invokable = new TypeToken<T>(getClass()) {}.constructor(constructor);
    assertThat(invokable.getExceptionTypes()).contains(TypeToken.of(AssertionError.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getExceptionTypes=1 ) - Predicate: of - Scenario: constructor (Alternative Scenario: constructor=1 )

Project: guava
 Class: TypeTokenTest
 Method: testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed
 Body: {
    TypeToken<?> e = TypeToken.of(new TypeCapture<E>() {}.capture());
    assertEquals(Integer.class, e.resolveType(Iterable.class.getTypeParameters()[0]).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: getType - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_fromWildcard
 Body: {
    @SuppressWarnings("unchecked") // can't do new TypeToken<? extends ...>() {}
    TypeToken<? extends List<String>> type =
        (TypeToken<? extends List<String>>)
            TypeToken.of(Types.subtypeOf(new TypeToken<List<String>>() {}.getType()));
    assertEquals(new TypeToken<Iterable<String>>() {}, type.getSupertype(Iterable.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getType=1 ) - Predicate: getSupertype - Scenario: type (Alternative Scenario: type=1 )

Project: guava
 Class: CycleDetectingLockFactoryTest
 Method: testReentrancy_noDeadlock
 Body: {
    lockA.lock();
    lockB.lock();
    lockA.lock(); // Should not assert on lockB -> reentrant(lockA)
  }
 Pattern Name: NormalPattern_2/3LOC - Action: lock (Alternative Action: lock=3 ) - Predicate: N/A - Scenario: lockA (Alternative Scenario:  )

Project: guava
 Class: ElementOrderTest
 Method: edgeOrder_none
 Body: {
    MutableNetwork<Integer, String> network =
        NetworkBuilder.directed().edgeOrder(unordered()).build();

    assertThat(network.edgeOrder()).isEqualTo(unordered());
    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: unordered=2 ) - Predicate: N/A - Scenario: network (Alternative Scenario: network=1 )

Project: guava
 Class: ElementOrderTest
 Method: nodeOrder_none
 Body: {
    MutableGraph<Integer> graph = GraphBuilder.directed().nodeOrder(unordered()).build();

    assertThat(graph.nodeOrder()).isEqualTo(unordered());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: unordered=2 ) - Predicate: unordered - Scenario: graph (Alternative Scenario: graph=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder_withImmutableEntry
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>naturalOrder()
              .put(Maps.immutableEntry("one", 1))
              .build();
      assertMapEquals(map, "one", 1);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: naturalOrder=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilderPutAllWithEmptyMap
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>naturalOrder()
              .putAll(Collections.<String, Integer>emptyMap())
              .build();
      assertEquals(Collections.<String, Integer>emptyMap(), map);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=2 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testEmptyBuilder
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>naturalOrder().build();
      assertEquals(Collections.<String, Integer>emptyMap(), map);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: naturalOrder=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testSingletonBuilder
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>naturalOrder().put("one", 1).build();
      assertMapEquals(map, "one", 1);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: naturalOrder=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>naturalOrder()
              .put("one", 1)
              .put("two", 2)
              .put("three", 3)
              .put("four", 4)
              .put("five", 5)
              .build();
      assertMapEquals(map, "five", 5, "four", 4, "one", 1, "three", 3, "two", 2);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilderReverseOrder
 Body: {
      ImmutableSortedMap<String, Integer> map =
          ImmutableSortedMap.<String, Integer>reverseOrder()
              .put("one", 1)
              .put("two", 2)
              .put("three", 3)
              .put("four", 4)
              .put("five", 5)
              .build();
      assertMapEquals(map, "two", 2, "three", 3, "one", 1, "four", 4, "five", 5);
      assertEquals(Ordering.natural().reverse(), map.comparator());
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: reverse - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: DefaultNetworkImplementationsTest
 Method: edgesConnecting_parallelSelfLoopEdges
 Body: {
    network.addEdge(N1, N1, E11);
    network.addEdge(N1, N1, E11_A);
    assertThat(network.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: network (Alternative Scenario:  )

Project: guava
 Class: DefaultNetworkImplementationsTest
 Method: edgesConnecting_disconnectedNodes
 Body: {
    network.addNode(N1);
    network.addNode(N2);
    assertThat(networkForTest.edgesConnecting(N1, N2)).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addNode (Alternative Action: addNode=2 ) - Predicate: N/A - Scenario: network (Alternative Scenario:  )

Project: guava
 Class: EnumHashBiMapTest
 Method: testKeyType
 Body: {
    EnumHashBiMap<Currency, String> bimap = EnumHashBiMap.create(Currency.class);
    assertEquals(Currency.class, bimap.keyType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: keyType - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testSubtypeOfInnerClass_nonStaticAnonymousClass_typeParameterOfOwnerTypeNotMatch
 Body: {
    TypeToken<?> supertype = new TypeToken<Mall<Outdoor>.Shop<Electronics>>() {};
    Class<?> subclass = new Mall<Indoor>().new Shop<Electronics>() {}.getClass();
    assertFalse(TypeToken.of(subclass).isSubtypeOf(supertype));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isSubtypeOf=1 ) - Predicate: isSubtypeOf - Scenario: supertype (Alternative Scenario: supertype=1 )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testSubtypeOfInnerClass_nonStaticAnonymousClass_typeParameterOfInnerTypeNotMatch
 Body: {
    TypeToken<?> supertype = new TypeToken<Mall<Outdoor>.Shop<Electronics>>() {};
    Class<?> subclass = new Mall<Outdoor>().new Shop<Grocery>() {}.getClass();
    assertFalse(TypeToken.of(subclass).isSubtypeOf(supertype));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isSubtypeOf=1 ) - Predicate: isSubtypeOf - Scenario: supertype (Alternative Scenario: supertype=1 )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testSubtypeOfInnerClass_nonStaticAnonymousClass
 Body: {
    TypeToken<?> supertype = new TypeToken<Mall<Outdoor>.Shop<Electronics>>() {};
    Class<?> subclass = new Mall<Outdoor>().new Shop<Electronics>() {}.getClass();
    assertTrue(TypeToken.of(subclass).isSubtypeOf(supertype));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isSubtypeOf=1 ) - Predicate: isSubtypeOf - Scenario: supertype (Alternative Scenario: supertype=1 )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testSubtypeOfNonStaticAnonymousClass
 Body: {
    Class<?> superclass = new Mall<Outdoor>().new Shop<Electronics>() {}.getClass();
    assertTrue(TypeToken.of(superclass).isSubtypeOf(superclass));
    assertFalse(
        TypeToken.of(new Mall<Outdoor>().new Shop<Electronics>() {}.getClass())
            .isSubtypeOf(superclass));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isSubtypeOf=2 ) - Predicate: isSubtypeOf - Scenario: superclass (Alternative Scenario: superclass=1 )

Project: guava
 Class: CharsTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<char[]> comparator = Chars.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: MapReplaceEntryTester
 Method: testReplaceEntry_nullDifferentFromAbsent
 Body: {
    assertFalse(getMap().replace(k3(), null, v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapReplaceEntryTester
 Method: testReplaceEntry_supportedPresentUnchanged
 Body: {
    assertTrue(getMap().replace(k0(), v0(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: v0=2 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapReplaceEntryTester
 Method: testReplaceEntry_supportedWrongValue
 Body: {
    assertFalse(getMap().replace(k0(), v3(), v4()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapReplaceEntryTester
 Method: testReplaceEntry_supportedAbsentKey
 Body: {
    assertFalse(getMap().replace(k3(), v3(), v4()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllEmptyIterableOnAbsentKey
 Body: {
    Iterable<V> iterable =
        new Iterable<V>() {
          @Override
          public Iterator<V> iterator() {
            return ImmutableSet.<V>of().iterator();
          }
        };

    assertFalse(multimap().putAll(k3(), iterable));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: iterator=1 ) - Predicate: putAll - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllEmptyCollectionOnAbsentKey
 Body: {
    assertFalse(multimap().putAll(k3(), Collections.<V>emptyList()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: emptyList=1 ) - Predicate: putAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetEntrySetTester
 Method: testEntrySet_clear
 Body: {
    getMultiset().entrySet().clear();
    assertTrue("multiset not empty after entrySet().clear()", getMultiset().isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: getMultiset=2 ) - Predicate: isEmpty - Scenario: getMultiset().entrySet() (Alternative Scenario:  )

Project: guava
 Class: MultimapContainsKeyTester
 Method: testContainsKeyNullPresent
 Body: {
    initMultimapWithNullKey();
    assertTrue(multimap().containsKey(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: containsKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testStream
 Body: {
    ImmutableDoubleArray.of().stream().forEach(i -> fail());
    ImmutableDoubleArray.of(0, 1, 3).subArray(1, 1).stream().forEach(i -> fail());
    assertThat(ImmutableDoubleArray.of(0, 1, 3).stream().toArray())
        .isEqualTo(new double[] {0, 1, 3});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: stream=3 ) - Predicate: N/A - Scenario: ImmutableDoubleArray.of().stream() (Alternative Scenario:  )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testCopyOf_iterable_collection_empty
 Body: {
    Iterable<Double> iterable = Collections.emptySet();
    assertThat(ImmutableDoubleArray.copyOf(iterable)).isSameAs(ImmutableDoubleArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testCopyOf_iterable_notCollection_empty
 Body: {
    Iterable<Double> iterable = iterable(Collections.<Double>emptySet());
    assertThat(ImmutableDoubleArray.copyOf(iterable)).isSameAs(ImmutableDoubleArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testCopyOf_collection_empty
 Body: {
    Collection<Double> iterable = Collections.emptySet();
    assertThat(ImmutableDoubleArray.copyOf(iterable)).isSameAs(ImmutableDoubleArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: MultimapContainsEntryTester
 Method: testContainsEntryNullYes
 Body: {
    initMultimapWithNullKeyAndValue();
    assertTrue(multimap().containsEntry(null, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKeyAndValue (Alternative Action: containsEntry=1 ) - Predicate: containsEntry - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: GcFinalizationTest
 Method: testAwaitClear
 Body: {
    final WeakReference<Object> ref = new WeakReference<>(new Object());
    GcFinalization.awaitClear(ref);
    assertNull(ref.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: awaitClear (Alternative Action: get=1 ) - Predicate: get - Scenario: ref (Alternative Scenario: ref=1 )

Project: guava
 Class: EquivalenceTest
 Method: testWrap_get
 Body: {
    String test = "test";
    Wrapper<String> wrapper = LENGTH_EQUIVALENCE.wrap(test);
    assertSame(test, wrapper.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: test (Alternative Scenario: test=1 )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testGetAll
 Body: {
    when(mock.getAll(ImmutableList.of("key"))).thenReturn(ImmutableMap.of("key", Boolean.TRUE));
    assertEquals(ImmutableMap.of("key", Boolean.TRUE), forward.getAll(ImmutableList.of("key")));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: of=4 ) - Predicate: of - Scenario: when(mock.getAll(ImmutableList.of("key"))) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testAsMap
 Body: {
    when(mock.asMap()).thenReturn(null);
    assertNull(forward.asMap());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: when(mock.asMap()) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testGetUnchecked
 Body: {
    when(mock.getUnchecked("key")).thenReturn(Boolean.TRUE);
    assertSame(Boolean.TRUE, forward.getUnchecked("key"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: getUnchecked=2 ) - Predicate: getUnchecked - Scenario: when(mock.getUnchecked("key")) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testApply
 Body: {
    when(mock.apply("key")).thenReturn(Boolean.TRUE);
    assertSame(Boolean.TRUE, forward.apply("key"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: apply=2 ) - Predicate: apply - Scenario: when(mock.apply("key")) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testGet
 Body: {
    when(mock.get("key")).thenReturn(Boolean.TRUE);
    assertSame(Boolean.TRUE, forward.get("key"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: get=2 ) - Predicate: get - Scenario: when(mock.get("key")) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testStats
 Body: {
    when(mock.stats()).thenReturn(null);
    assertNull(forward.stats());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: stats=2 ) - Predicate: stats - Scenario: when(mock.stats()) (Alternative Scenario:  )

Project: guava
 Class: MakerTest
 Method: testReturnsPlainConcurrentHashMapWhenPossible
 Body: {
      Map<?, ?> map = new MapMaker().initialCapacity(5).makeMap();
      assertTrue(map instanceof ConcurrentHashMap);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: initialCapacity=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_shortcut_singleton
 Body: {
      Collection<String> c = ImmutableList.of("a");
      assertSame(c, ImmutableList.copyOf(c));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_plainIterable_iteratesOnce
 Body: {
      CountingIterable iterable = new CountingIterable();
      ImmutableList<String> unused = ImmutableList.copyOf(iterable);
      assertEquals(1, iterable.count);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_sevenElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f", "g");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f", "g"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf_natural_singleton
 Body: {
      Collection<Integer> c = MinimalCollection.of(100);
      ImmutableList<Integer> list = ImmutableList.sortedCopyOf(c);
      assertEquals(asList(100), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_eightElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_shortcut_immutableList
 Body: {
      Collection<String> c = ImmutableList.of("a", "b", "c");
      assertSame(c, ImmutableList.copyOf(c));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_plainIterable
 Body: {
      CountingIterable iterable = new CountingIterable();
      List<String> list = ImmutableList.copyOf(iterable);
      assertEquals(asList("a", "b", "a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: asList - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf_singleton
 Body: {
      Collection<String> c = MinimalCollection.of("a");
      List<String> list = ImmutableList.sortedCopyOf(String.CASE_INSENSITIVE_ORDER, c);
      assertEquals(asList("a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_noArgs
 Body: {
      List<String> list = ImmutableList.of();
      assertEquals(Collections.emptyList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_oneElement
 Body: {
      List<String> list = ImmutableList.of("a");
      assertEquals(Collections.singletonList("a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: singletonList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_threeElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c");
      assertEquals(Lists.newArrayList("a", "b", "c"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_thirteenElements
 Body: {
      List<String> list =
          ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m");
      assertEquals(
          Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"),
          list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_arrayOfArray
 Body: {
      String[] array = new String[] {"a"};
      List<String[]> list = ImmutableList.<String[]>of(array);
      assertEquals(Collections.singletonList(array), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: singletonList - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_twelveElements
 Body: {
      List<String> list =
          ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l");
      assertEquals(
          Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf_natural
 Body: {
      Collection<Integer> c = MinimalCollection.of(4, 16, 10, -1, 5);
      ImmutableList<Integer> list = ImmutableList.sortedCopyOf(c);
      assertEquals(asList(-1, 4, 5, 10, 16), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf_empty
 Body: {
      Collection<String> c = MinimalCollection.of();
      List<String> list = ImmutableList.sortedCopyOf(String.CASE_INSENSITIVE_ORDER, c);
      assertEquals(asList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_collection_oneElement
 Body: {
      Collection<String> c = MinimalCollection.of("a");
      List<String> list = ImmutableList.copyOf(c);
      assertEquals(Collections.singletonList("a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: singletonList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_sixElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_twoElements
 Body: {
      List<String> list = ImmutableList.of("a", "b");
      assertEquals(Lists.newArrayList("a", "b"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_collection_empty
 Body: {
      // "<String>" is required to work around a javac 1.5 bug.
      Collection<String> c = MinimalCollection.<String>of();
      List<String> list = ImmutableList.copyOf(c);
      assertEquals(Collections.emptyList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf
 Body: {
      Collection<String> c = MinimalCollection.of("a", "b", "A", "c");
      List<String> list = ImmutableList.sortedCopyOf(String.CASE_INSENSITIVE_ORDER, c);
      assertEquals(asList("a", "A", "b", "c"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_fiveElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_nineElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_emptyArray
 Body: {
      String[] array = new String[0];
      List<String> list = ImmutableList.copyOf(array);
      assertEquals(Collections.emptyList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CreationTests
 Method: testSortedCopyOf_natural_empty
 Body: {
      Collection<Integer> c = MinimalCollection.of();
      ImmutableList<Integer> list = ImmutableList.sortedCopyOf(c);
      assertEquals(asList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sortedCopyOf=1 ) - Predicate: asList - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_iterator_empty
 Body: {
      Iterator<String> iterator = Iterators.emptyIterator();
      List<String> list = ImmutableList.copyOf(iterator);
      assertEquals(Collections.emptyList(), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_iterator_oneElement
 Body: {
      Iterator<String> iterator = Iterators.singletonIterator("a");
      List<String> list = ImmutableList.copyOf(iterator);
      assertEquals(Collections.singletonList("a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonIterator=1 ) - Predicate: singletonList - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_shortcut_empty
 Body: {
      Collection<String> c = ImmutableList.of();
      assertSame(c, ImmutableList.copyOf(c));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_arrayOfOneElement
 Body: {
      String[] array = new String[] {"a"};
      List<String> list = ImmutableList.copyOf(array);
      assertEquals(Collections.singletonList("a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonList=1 ) - Predicate: singletonList - Scenario: array (Alternative Scenario: array=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_elevenElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOf_iterator_general
 Body: {
      Iterator<String> iterator = asList("a", "b", "a").iterator();
      List<String> list = ImmutableList.copyOf(iterator);
      assertEquals(asList("a", "b", "a"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_tenElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j");
      assertEquals(Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_fourteenElements
 Body: {
      List<String> list =
          ImmutableList.of("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n");
      assertEquals(
          Lists.newArrayList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"),
          list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: CreationTests
 Method: testCreation_fourElements
 Body: {
      List<String> list = ImmutableList.of("a", "b", "c", "d");
      assertEquals(Lists.newArrayList("a", "b", "c", "d"), list);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: MultimapEntriesTester
 Method: testContainsEntryWithNullValuePresent
 Body: {
    initMultimapWithNullValue();
    assertContains(multimap().entries(), Helpers.mapEntry(getKeyForNullValue(), (V) null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullValue (Alternative Action: entries=1 ) - Predicate: entries - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapEntriesTester
 Method: testContainsEntryWithNullKeyPresent
 Body: {
    initMultimapWithNullKey();
    assertContains(multimap().entries(), Helpers.mapEntry((K) null, getValueForNullKey()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: entries - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: IteratorTesterTest
 Method: testMismatchedException
 Body: {
    List<Integer> emptyList = emptyList();
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            1, MODIFIABLE, emptyList, IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return new Iterator<Integer>() {
              @Override
              public void remove() {
                // Wrong exception type.
                throw new IllegalArgumentException();
              }

              @Override
              public Integer next() {
                // Wrong exception type.
                throw new UnsupportedOperationException();
              }

              @Override
              public boolean hasNext() {
                return false;
              }
            };
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: N/A - Scenario: emptyList (Alternative Scenario: emptyList=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testCanCatchDifferentRemoveBehaviour
 Body: {
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            3, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return ImmutableList.of(1, 2).iterator();
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testCanCatchDifferentContents
 Body: {
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            3, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return Lists.newArrayList(1, 3, 2).iterator();
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testCanCatchDifferentLengthOfIteration
 Body: {
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            4, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return Lists.newArrayList(1, 2, 3, 4).iterator();
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testVerifyGetsCalled
 Body: {
    TesterThatCountsCalls tester = new TesterThatCountsCalls();

    tester.test();

    assertEquals(
        "Should have verified once per stimulus executed",
        tester.numCallsToVerify,
        tester.numCallsToNewTargetIterator * STEPS);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testMissingException
 Body: {
    List<Integer> emptyList = newArrayList();

    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            1, MODIFIABLE, emptyList, IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return new Iterator<Integer>() {
              @Override
              public void remove() {
                // We should throw here, but we won't!
              }

              @Override
              public Integer next() {
                // We should throw here, but we won't!
                return null;
              }

              @Override
              public boolean hasNext() {
                return false;
              }
            };
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: emptyList (Alternative Scenario: emptyList=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testUnknownOrderUnrecognizedElement
 Body: {
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            3, MODIFIABLE, newArrayList(1, 2, 50), IteratorTester.KnownOrder.UNKNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return newArrayList(2, 1, 3).iterator();
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: IteratorTesterTest
 Method: testUnexpectedException
 Body: {
    IteratorTester<Integer> tester =
        new IteratorTester<Integer>(
            1, MODIFIABLE, newArrayList(1), IteratorTester.KnownOrder.KNOWN_ORDER) {
          @Override
          protected Iterator<Integer> newTargetIterator() {
            return new ThrowingIterator<>(new IllegalStateException());
          }
        };
    assertFailure(tester);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: tester=1 )

Project: guava
 Class: QueuePeekTester
 Method: testPeek_empty
 Body: {
    assertNull("emptyQueue.peek() should return null", getQueue().peek());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: peek - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueuePeekTester
 Method: testPeek_size1
 Body: {
    assertEquals("size1Queue.peek() should return first element", e0(), getQueue().peek());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueuePeekTester
 Method: testPeek_sizeMany
 Body: {
    assertEquals("sizeManyQueue.peek() should return first element", e0(), getQueue().peek());
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: getQueue=1 ) - Predicate: e0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ArrayBasedUnicodeEscaperTest
 Method: testReplacementPriority
 Body: {
    UnicodeEscaper replacingEscaper =
        new ArrayBasedUnicodeEscaper(SIMPLE_REPLACEMENTS, ' ', '~', null) {
          private final char[] unknown = new char[] {'?'};

          @Override
          protected char[] escapeUnsafe(int c) {
            return unknown;
          }
        };
    EscaperAsserts.assertBasic(replacingEscaper);

    // Replacements are applied first regardless of whether the character is in
    // the safe range or not ('&' is a safe char while '\t' and '\n' are not).
    assertEquals(
        "<tab>Fish <and>? Chips?<newline>", replacingEscaper.escape("\tFish &\0 Chips\r\n"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escape=1 ) - Predicate: escape - Scenario: replacingEscaper (Alternative Scenario: replacingEscaper=1 )

Project: guava
 Class: ArrayBasedUnicodeEscaperTest
 Method: testSafeRange
 Body: {
    // Basic escaping of unsafe chars (wrap them in {,}'s)
    UnicodeEscaper wrappingEscaper =
        new ArrayBasedUnicodeEscaper(NO_REPLACEMENTS, 'A', 'Z', null) {
          @Override
          protected char[] escapeUnsafe(int c) {
            return ("{" + (char) c + "}").toCharArray();
          }
        };
    EscaperAsserts.assertBasic(wrappingEscaper);
    // '[' and '@' lie either side of [A-Z].
    assertEquals("{[}FOO{@}BAR{]}", wrappingEscaper.escape("[FOO@BAR]"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toCharArray=1 ) - Predicate: escape - Scenario: wrappingEscaper (Alternative Scenario: wrappingEscaper=1 )

Project: guava
 Class: ArrayBasedUnicodeEscaperTest
 Method: testDeleteUnsafeChars
 Body: {
    UnicodeEscaper deletingEscaper =
        new ArrayBasedUnicodeEscaper(NO_REPLACEMENTS, ' ', '~', null) {
          @Override
          protected char[] escapeUnsafe(int c) {
            return NO_CHARS;
          }
        };
    EscaperAsserts.assertBasic(deletingEscaper);
    assertEquals(
        "Everything outside the printable ASCII range is deleted.",
        deletingEscaper.escape(
            "\tEverything\0 outside the\uD800\uDC00 "
                + "printable ASCII \uFFFFrange is \u007Fdeleted.\n"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escape=1 ) - Predicate: escape - Scenario: deletingEscaper (Alternative Scenario: deletingEscaper=1 )

Project: guava
 Class: MapForEachTester
 Method: testForEachKnownOrder
 Body: {
    List<Entry<K, V>> entries = new ArrayList<>();
    getMap().forEach((k, v) -> entries.add(entry(k, v)));
    assertEquals(getOrderedElements(), entries);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: add=1 ) - Predicate: getOrderedElements - Scenario: entries (Alternative Scenario: entries=1 )

Project: guava
 Class: MapForEachTester
 Method: testForEachUnknownOrder
 Body: {
    List<Entry<K, V>> entries = new ArrayList<>();
    getMap().forEach((k, v) -> entries.add(entry(k, v)));
    Helpers.assertEqualIgnoringOrder(getSampleEntries(), entries);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: add=1 ) - Predicate: N/A - Scenario: entries (Alternative Scenario: entries=1 )

Project: guava
 Class: EventBusTest
 Method: testToString
 Body: {
    EventBus eventBus = new EventBus("a b ; - \" < > / \\ €");
    assertEquals("EventBus{a b ; - \" < > / \\ €}", eventBus.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=1 ) - Predicate: toString - Scenario: eventBus (Alternative Scenario: eventBus=1 )

Project: guava
 Class: FilesFileTraverserTest
 Method: testFileTraverser_nonExistingFile
 Body: {
    File file = new File(rootDir, "file-that-doesnt-exist");

    assertThat(Files.fileTraverser().breadthFirst(file)).containsExactly(file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: breadthFirst=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: FilesFileTraverserTest
 Method: testFileTraverser_file
 Body: {
    File file = newFile("some-file");

    assertThat(Files.fileTraverser().breadthFirst(file)).containsExactly(file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: breadthFirst=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: FilesFileTraverserTest
 Method: testFileTraverser_singleDirectory
 Body: {
    File file = newDir("some-dir");

    assertThat(Files.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDir=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: FilesFileTraverserTest
 Method: testFileTraverser_singleFile
 Body: {
    File file = newFile("some-file");

    assertThat(Files.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: breadthFirst=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: CountTest
 Method: testAddAndGet
 Body: {
    Count holder = new Count(20);
    assertEquals(21, holder.addAndGet(1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addAndGet=1 ) - Predicate: addAndGet - Scenario: holder (Alternative Scenario: holder=1 )

Project: guava
 Class: CountTest
 Method: testGetAndSet
 Body: {
    Count holder = new Count(10);
    assertEquals(10, holder.getAndSet(20));
    assertEquals(20, holder.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: holder (Alternative Scenario: holder=1 )

Project: guava
 Class: CountTest
 Method: testSet
 Body: {
    Count holder = new Count(10);
    holder.set(20);
    assertEquals(20, holder.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: get - Scenario: holder (Alternative Scenario: holder=1 )

Project: guava
 Class: VerifyTest
 Method: testVerifyNotNull_complexMessage_success
 Body: {
    String result = verifyNotNull(NON_NULL_STRING, "%s", IGNORE_ME);
    assertSame(NON_NULL_STRING, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: verifyNotNull=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: VerifyTest
 Method: testVerifyNotNull_simple_success
 Body: {
    String result = verifyNotNull(NON_NULL_STRING);
    assertSame(NON_NULL_STRING, result);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: verifyNotNull=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapClearTester
 Method: testClearThroughAsMap
 Body: {
    multimap().asMap().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: asMap=1 ) - Predicate: N/A - Scenario: multimap().asMap() (Alternative Scenario:  )

Project: guava
 Class: MultimapClearTester
 Method: testClearThroughEntries
 Body: {
    multimap().entries().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: entries=1 ) - Predicate: N/A - Scenario: multimap().entries() (Alternative Scenario:  )

Project: guava
 Class: MultimapClearTester
 Method: testClearPropagatesToEntries
 Body: {
    Collection<Entry<K, V>> entries = multimap().entries();
    multimap().clear();
    assertEmpty(entries);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: multimap=2 ) - Predicate: N/A - Scenario: entries (Alternative Scenario: entries=1 )

Project: guava
 Class: MultimapClearTester
 Method: testClearThroughKeySet
 Body: {
    multimap().keySet().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: clear=1 ) - Predicate: N/A - Scenario: multimap().keySet() (Alternative Scenario:  )

Project: guava
 Class: MultimapClearTester
 Method: testClearThroughValues
 Body: {
    multimap().values().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: values=1 ) - Predicate: N/A - Scenario: multimap().values() (Alternative Scenario:  )

Project: guava
 Class: MultimapClearTester
 Method: testClear
 Body: {
    multimap().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: clear=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapClearTester
 Method: testClearPropagatesToAsMap
 Body: {
    Map<K, Collection<V>> asMap = multimap().asMap();
    multimap().clear();
    assertEmpty(asMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: multimap=2 ) - Predicate: N/A - Scenario: asMap (Alternative Scenario: asMap=1 )

Project: guava
 Class: MultimapClearTester
 Method: testClearThroughKeys
 Body: {
    multimap().keys().clear();
    assertCleared();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: clear (Alternative Action: keys=1 ) - Predicate: N/A - Scenario: multimap().keys() (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedGraphTest
 Method: adjacentNodes_selfLoop
 Body: {
    putEdge(N1, N1);
    putEdge(N1, N2);
    assertThat(graph.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdge (Alternative Action: putEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedGraphTest
 Method: addEdge_existingSelfLoopEdgeBetweenSameNodes
 Body: {
    putEdge(N1, N1);
    assertThat(putEdge(N1, N1)).isFalse();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putEdge (Alternative Action: putEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: SimpleTimeLimiterTest
 Method: testRunUninterruptiblyWithTimeout_goodRunnableWithEnoughTime
 Body: {
    Stopwatch stopwatch = Stopwatch.createStarted();

    service.runUninterruptiblyWithTimeout(GOOD_RUNNABLE, ENOUGH_MS, MILLISECONDS);

    assertThat(stopwatch.elapsed(MILLISECONDS)).isIn(Range.closed(DELAY_MS, ENOUGH_MS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: runUninterruptiblyWithTimeout (Alternative Action: elapsed=1 ) - Predicate: closed - Scenario: stopwatch (Alternative Scenario: stopwatch=1 )

Project: guava
 Class: SimpleTimeLimiterTest
 Method: testRunWithTimeout_goodRunnableWithEnoughTime
 Body: {
    Stopwatch stopwatch = Stopwatch.createStarted();

    service.runWithTimeout(GOOD_RUNNABLE, ENOUGH_MS, MILLISECONDS);

    assertThat(stopwatch.elapsed(MILLISECONDS)).isIn(Range.closed(DELAY_MS, ENOUGH_MS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: runWithTimeout (Alternative Action: elapsed=1 ) - Predicate: closed - Scenario: stopwatch (Alternative Scenario: stopwatch=1 )

Project: guava
 Class: CreationTests
 Method: testSingletonBuilder
 Body: {
      ImmutableMap<String, Integer> map = new Builder<String, Integer>().put("one", 1).build();
      assertMapEquals(map, "one", 1);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOfSingletonMap
 Body: {
      ImmutableMap<String, Integer> copy = ImmutableMap.copyOf(Collections.singletonMap("one", 1));
      assertMapEquals(copy, "one", 1);
      assertSame(copy, ImmutableMap.copyOf(copy));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=2 ) - Predicate: copyOf - Scenario: copy (Alternative Scenario: copy=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder_orderEntriesByValue
 Body: {
      ImmutableMap<String, Integer> map =
          new Builder<String, Integer>()
              .orderEntriesByValue(Ordering.natural())
              .put("three", 3)
              .put("one", 1)
              .put("five", 5)
              .put("four", 4)
              .put("two", 2)
              .build();
      assertMapEquals(map, "one", 1, "two", 2, "three", 3, "four", 4, "five", 5);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder_withImmutableEntry
 Body: {
      ImmutableMap<String, Integer> map =
          new Builder<String, Integer>().put(Maps.immutableEntry("one", 1)).build();
      assertMapEquals(map, "one", 1);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testCopyOfEmptyMap
 Body: {
      ImmutableMap<String, Integer> copy =
          ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());
      assertEquals(Collections.<String, Integer>emptyMap(), copy);
      assertSame(copy, ImmutableMap.copyOf(copy));
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=2 ) - Predicate: copyOf - Scenario: copy (Alternative Scenario: copy=1 )

Project: guava
 Class: CreationTests
 Method: testBuilderPutAllWithEmptyMap
 Body: {
      ImmutableMap<String, Integer> map =
          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();
      assertEquals(Collections.<String, Integer>emptyMap(), map);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=2 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testEmptyBuilder
 Body: {
      ImmutableMap<String, Integer> map = new Builder<String, Integer>().build();
      assertEquals(Collections.<String, Integer>emptyMap(), map);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CreationTests
 Method: testBuilder
 Body: {
      ImmutableMap<String, Integer> map =
          new Builder<String, Integer>()
              .put("one", 1)
              .put("two", 2)
              .put("three", 3)
              .put("four", 4)
              .put("five", 5)
              .build();
      assertMapEquals(map, "one", 1, "two", 2, "three", 3, "four", 4, "five", 5);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MultisetSetCountConditionallyTester
 Method: testSetCountConditional_oldCountTooSmallZero
 Body: {
    assertFalse(
        "setCount() with a too-small oldCount should return false",
        getMultiset().setCount(e0(), 0, 2));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: e0=1 ) - Predicate: setCount - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetSetCountConditionallyTester
 Method: testSetCountConditional_oldCountTooSmallNonzero
 Body: {
    initThreeCopies();
    assertFalse(
        "setCount() with a too-small oldCount should return false",
        getMultiset().setCount(e0(), 1, 5));
    expectContents(nCopies(3, e0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initThreeCopies (Alternative Action: e0=2 ) - Predicate: setCount - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetSetCountConditionallyTester
 Method: testSetCountConditional_oldCountTooLarge
 Body: {
    assertFalse(
        "setCount() with a too-large oldCount should return false",
        getMultiset().setCount(e0(), 2, 3));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: e0=1 ) - Predicate: setCount - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapSizeTester
 Method: testSizeNullKey
 Body: {
    initMultimapWithNullKey();
    assertEquals(getNumElements(), multimap().size());
    assertFalse(multimap().isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKey (Alternative Action: multimap=2 ) - Predicate: isEmpty - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapSizeTester
 Method: testSizeNullKeyAndValue
 Body: {
    initMultimapWithNullKeyAndValue();
    assertEquals(getNumElements(), multimap().size());
    assertFalse(multimap().isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullKeyAndValue (Alternative Action: multimap=2 ) - Predicate: isEmpty - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapSizeTester
 Method: testSizeNullValue
 Body: {
    initMultimapWithNullValue();
    assertEquals(getNumElements(), multimap().size());
    assertFalse(multimap().isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMultimapWithNullValue (Alternative Action: multimap=2 ) - Predicate: isEmpty - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testFailsToForwardEquals
 Body: {
    tester.includingEquals();
    assertFailure(
        Runnable.class,
        new Function<Runnable, Runnable>() {
          @Override
          public Runnable apply(final Runnable runnable) {
            return new ForwardingRunnable(runnable) {
              @Override
              public int hashCode() {
                return runnable.hashCode();
              }
            };
          }
        },
        "Runnable");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: includingEquals (Alternative Action: includingEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testFailsToForwardHashCode
 Body: {
    tester.includingEquals();
    assertFailure(
        Runnable.class,
        new Function<Runnable, Runnable>() {
          @Override
          public Runnable apply(final Runnable runnable) {
            return new ForwardingRunnable(runnable) {
              @Override
              public boolean equals(Object o) {
                if (o instanceof ForwardingRunnable) {
                  ForwardingRunnable that = (ForwardingRunnable) o;
                  return runnable.equals(that.runnable);
                }
                return false;
              }
            };
          }
        },
        "Runnable");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: includingEquals (Alternative Action: includingEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: that=1 )

Project: guava
 Class: MapsSortedTransformValuesTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: MapsSortedTransformValuesTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: CollectionContainsTester
 Method: testContains_nullContained
 Body: {
    initCollectionWithNullElement();
    assertTrue("contains(null) should return true", collection.contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: contains - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionContainsTester
 Method: testContains_nonNullWhenNullContained
 Body: {
    initCollectionWithNullElement();
    assertFalse("contains(notPresent) should return false", collection.contains(e3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: contains - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveTester
 Method: testRemove_notPresent
 Body: {
    assertFalse("remove(notPresent) should return false", collection.remove(e3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CollectionRemoveTester
 Method: testRemove_nullAllowed
 Body: {
    assertFalse("remove(null) should return false", collection.remove(null));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfAbsentTester
 Method: testComputeIfAbsent_supportedAbsent
 Body: {
    assertEquals(
        "computeIfAbsent(notPresent, function) should return new value",
        v3(),
        getMap()
            .computeIfAbsent(
                k3(),
                k -> {
                  assertEquals(k3(), k);
                  return v3();
                }));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: k3=2 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfAbsentTester
 Method: testComputeIfAbsent_functionReturnsNullNotInserted
 Body: {
    assertNull(
        "computeIfAbsent(absent, returnsNull) should return null",
        getMap()
            .computeIfAbsent(
                k3(),
                k -> {
                  assertEquals(k3(), k);
                  return null;
                }));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=2 ) - Predicate: computeIfAbsent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfAbsentTester
 Method: testComputeIfAbsent_nullTreatedAsAbsent
 Body: {
    initMapWithNullValue();
    assertEquals(
        "computeIfAbsent(presentAssignedToNull, function) should return newValue",
        getValueForNullKey(),
        getMap()
            .computeIfAbsent(
                getKeyForNullValue(),
                k -> {
                  assertEquals(getKeyForNullValue(), k);
                  return getValueForNullKey();
                }));
    expectReplacement(entry(getKeyForNullValue(), getValueForNullKey()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: getValueForNullKey=3 ) - Predicate: getValueForNullKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfAbsentTester
 Method: testComputeIfAbsent_nullKeySupported
 Body: {
    getMap()
        .computeIfAbsent(
            null,
            k -> {
              assertNull(k);
              return v3();
            });
    expectAdded(entry(null, v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: v3=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfAbsentTester
 Method: testComputeIfAbsent_supportedPresent
 Body: {
    assertEquals(
        "computeIfAbsent(present, function) should return existing value",
        v0(),
        getMap()
            .computeIfAbsent(
                k0(),
                k -> {
                  throw new AssertionFailedError();
                }));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_timedGetNegativeTimeoutAttempted
 Body: {
    SettableFuture<String> future = SettableFuture.create();
    future.set(RESULT);
    /*
     * The getUninterruptibly should call the timed get method once with a
     * wait of -1 seconds (and it should succeed, since the result is already
     * available).
     */
    assertEquals(RESULT, getUninterruptibly(future, -1, SECONDS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: getUninterruptibly - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_timedGetZeroTimeoutAttempted
 Body: {
    SettableFuture<String> future = SettableFuture.create();
    future.set(RESULT);
    /*
     * getUninterruptibly should call the timed get method once with a
     * wait of 0 seconds (and it should succeed, since the result is already
     * available).
     */
    assertEquals(RESULT, getUninterruptibly(future, 0, SECONDS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: getUninterruptibly - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: HashingTest
 Method: testHashIntReverseBytesVsHashBytesIntsToByteArray
 Body: {
    int input = 42;
    assertEquals(
        Hashing.md5().hashBytes(Ints.toByteArray(input)),
        Hashing.md5().hashInt(Integer.reverseBytes(input)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: md5=2 ) - Predicate: hashBytes - Scenario: input (Alternative Scenario: input=1 )

Project: guava
 Class: EnumBiMapTest
 Method: testKeyType
 Body: {
    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);
    assertEquals(Currency.class, bimap.keyType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: keyType - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: EnumBiMapTest
 Method: testValueType
 Body: {
    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);
    assertEquals(Country.class, bimap.valueType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: valueType=1 ) - Predicate: valueType - Scenario: bimap (Alternative Scenario: bimap=1 )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testCopyOf_iterable_collection_empty
 Body: {
    Iterable<Integer> iterable = Collections.emptySet();
    assertThat(ImmutableIntArray.copyOf(iterable)).isSameAs(ImmutableIntArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testCopyOf_iterable_notCollection_empty
 Body: {
    Iterable<Integer> iterable = iterable(Collections.<Integer>emptySet());
    assertThat(ImmutableIntArray.copyOf(iterable)).isSameAs(ImmutableIntArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testCopyOf_collection_empty
 Body: {
    Collection<Integer> iterable = Collections.emptySet();
    assertThat(ImmutableIntArray.copyOf(iterable)).isSameAs(ImmutableIntArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testStream
 Body: {
    ImmutableIntArray.of().stream().forEach(i -> fail());
    ImmutableIntArray.of(0, 1, 3).subArray(1, 1).stream().forEach(i -> fail());
    assertThat(ImmutableIntArray.of(0, 1, 3).stream().toArray()).isEqualTo(new int[] {0, 1, 3});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: stream=3 ) - Predicate: N/A - Scenario: ImmutableIntArray.of().stream() (Alternative Scenario:  )

Project: guava
 Class: TypesTest
 Method: testNewArrayType_upperBoundedWildcard
 Body: {
    Type wildcard = Types.subtypeOf(Number.class);
    assertEquals(Types.subtypeOf(Number[].class), Types.newArrayType(wildcard));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtypeOf=2 ) - Predicate: subtypeOf - Scenario: wildcard (Alternative Scenario: wildcard=1 )

Project: guava
 Class: TypesTest
 Method: testNewArrayType_lowerBoundedWildcard
 Body: {
    Type wildcard = Types.supertypeOf(Number.class);
    assertEquals(Types.supertypeOf(Number[].class), Types.newArrayType(wildcard));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: supertypeOf=2 ) - Predicate: supertypeOf - Scenario: wildcard (Alternative Scenario: wildcard=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testTrustedGetFailure_NotCompleted
 Body: {
    SettableFuture<String> future = SettableFuture.create();
    assertThat(future.isDone()).isFalse();
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryInternalFastPathGetFailure=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testTrustedGetFailure_CanceledNoCause
 Body: {
    SettableFuture<String> future = SettableFuture.create();
    future.cancel(false);
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: cancel (Alternative Action: cancel=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testGetFailure_NotCompleted
 Body: {
    AbstractFuture<String> future = new AbstractFuture<String>() {};
    assertThat(future.isDone()).isFalse();
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryInternalFastPathGetFailure=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testSetSelf_toString
 Body: {
    SettableFuture<Object> orig = SettableFuture.create();
    orig.set(orig);
    assertThat(orig.toString()).contains("[status=SUCCESS, result=[this future]]");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: N/A - Scenario: orig (Alternative Scenario: orig=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testGetFailure_CanceledNoCause
 Body: {
    AbstractFuture<String> future = new AbstractFuture<String>() {};
    future.cancel(false);
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: cancel (Alternative Action: cancel=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testTrustedGetFailure_Completed
 Body: {
    SettableFuture<String> future = SettableFuture.create();
    future.set("261");
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: tryInternalFastPathGetFailure=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testSetFutureSelf_toString
 Body: {
    SettableFuture<String> orig = SettableFuture.create();
    orig.setFuture(orig);
    assertThat(orig.toString()).contains("[status=PENDING, info=[setFuture=[this future]]]");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: setFuture (Alternative Action: setFuture=1 ) - Predicate: N/A - Scenario: orig (Alternative Scenario: orig=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testGetWithTimeoutDoneFuture
 Body: {
    AbstractFuture<String> future =
        new AbstractFuture<String>() {
          {
            set("foo");
          }
        };
    assertEquals("foo", future.get(0, TimeUnit.SECONDS));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: set=1 ) - Predicate: get - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testSuccess
 Body: {
    final Object value = new Object();
    assertSame(
        value,
        new AbstractFuture<Object>() {
          {
            set(value);
          }
        }.get());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: set=1 ) - Predicate: get - Scenario: value (Alternative Scenario: value=1 )

Project: guava
 Class: AbstractFutureTest
 Method: testGetFailure_Completed
 Body: {
    AbstractFuture<String> future = new AbstractFuture<String>() {};
    future.set("261");
    assertThat(future.tryInternalFastPathGetFailure()).isNull();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: tryInternalFastPathGetFailure=1 ) - Predicate: N/A - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: MediaTypeTest
 Method: testCreateApplicationType
 Body: {
    MediaType newType = MediaType.createApplicationType("yams");
    assertEquals("application", newType.type());
    assertEquals("yams", newType.subtype());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtype=1 ) - Predicate: subtype - Scenario: newType (Alternative Scenario: newType=1 )

Project: guava
 Class: MediaTypeTest
 Method: testCreateImageType
 Body: {
    MediaType newType = MediaType.createImageType("yams");
    assertEquals("image", newType.type());
    assertEquals("yams", newType.subtype());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtype=1 ) - Predicate: subtype - Scenario: newType (Alternative Scenario: newType=1 )

Project: guava
 Class: MediaTypeTest
 Method: testCreateTextType
 Body: {
    MediaType newType = MediaType.createTextType("yams");
    assertEquals("text", newType.type());
    assertEquals("yams", newType.subtype());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtype=1 ) - Predicate: subtype - Scenario: newType (Alternative Scenario: newType=1 )

Project: guava
 Class: MediaTypeTest
 Method: testCreateVideoType
 Body: {
    MediaType newType = MediaType.createVideoType("yams");
    assertEquals("video", newType.type());
    assertEquals("yams", newType.subtype());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtype=1 ) - Predicate: subtype - Scenario: newType (Alternative Scenario: newType=1 )

Project: guava
 Class: MediaTypeTest
 Method: testCreateAudioType
 Body: {
    MediaType newType = MediaType.createAudioType("yams");
    assertEquals("audio", newType.type());
    assertEquals("yams", newType.subtype());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subtype=1 ) - Predicate: subtype - Scenario: newType (Alternative Scenario: newType=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_emptyArray
 Body: {
    String[] array = new String[0];
    Multiset<String> multiset = ImmutableMultiset.copyOf(array);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: array (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_multiset_oneElement
 Body: {
    Multiset<String> c = HashMultiset.create(asList("a"));
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_hashMultiset
 Body: {
    Multiset<String> iterable = HashMultiset.create(asList("a", "b", "a"));
    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: iterable (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testBuilderAddCopies
 Body: {
    ImmutableMultiset<String> multiset =
        new ImmutableMultiset.Builder<String>()
            .addCopies("a", 2)
            .addCopies("b", 3)
            .addCopies("c", 0)
            .build();
    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addCopies=3 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testSerialization_empty
 Body: {
    Collection<String> c = ImmutableMultiset.of();
    assertSame(c, SerializableTester.reserialize(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserialize - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_oneElement
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a");
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_twoElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b");
    assertEquals(HashMultiset.create(asList("a", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_fourElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "c", "d");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testSerialization_multiple
 Body: {
    Collection<String> c = ImmutableMultiset.of("a", "b", "a");
    Collection<String> copy = SerializableTester.reserializeAndAssert(c);
    assertThat(copy).containsExactly("a", "a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_arrayOfOneElement
 Body: {
    String[] array = new String[] {"a"};
    Multiset<String> multiset = ImmutableMultiset.copyOf(array);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: create - Scenario: array (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testBuilderAdd
 Body: {
    ImmutableMultiset<String> multiset =
        new ImmutableMultiset.Builder<String>().add("a").add("b").add("a").add("c").build();
    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=4 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_collection_empty
 Body: {
    // "<String>" is required to work around a javac 1.5 bug.
    Collection<String> c = MinimalCollection.<String>of();
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: isEmpty - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_fiveElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "c", "d", "e");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testBuilderSetCount
 Body: {
    ImmutableMultiset<String> multiset =
        new ImmutableMultiset.Builder<String>().add("a").setCount("a", 2).setCount("b", 3).build();
    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setCount=2 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_threeElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "c");
    assertEquals(HashMultiset.create(asList("a", "b", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testIterationOrder
 Body: {
    Collection<String> c = ImmutableMultiset.of("a", "b", "a");
    assertThat(c).containsExactly("a", "a", "b").inOrder();
    assertThat(ImmutableMultiset.of("c", "b", "a", "c").elementSet())
        .containsExactly("c", "b", "a")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_multiset_empty
 Body: {
    Multiset<String> c = HashMultiset.create();
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testSerialization_elementSet
 Body: {
    Multiset<String> c = ImmutableMultiset.of("a", "b", "a");
    Collection<String> copy = LenientSerializableTester.reserializeAndAssertLenient(c.elementSet());
    assertThat(copy).containsExactly("a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: elementSet=1 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_multiset_general
 Body: {
    Multiset<String> c = HashMultiset.create(asList("a", "b", "a"));
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_shortcut_singleton
 Body: {
    Collection<String> c = ImmutableMultiset.of("a");
    assertSame(c, ImmutableMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_iterator_empty
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: isEmpty - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_sixElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "c", "d", "e", "f");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e", "f")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_sevenElements
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "c", "d", "e", "f", "g");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e", "f", "g")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testMultisetWrites
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of("a", "b", "a");
    UnmodifiableCollectionTests.assertMultisetIsUnmodifiable(multiset, "test");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_iterator_oneElement
 Body: {
    Iterator<String> iterator = Iterators.singletonIterator("a");
    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonIterator=1 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_shortcut_immutableMultiset
 Body: {
    Collection<String> c = ImmutableMultiset.of("a", "b", "c");
    assertSame(c, ImmutableMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testBuilderAddAllIterator
 Body: {
    Iterator<String> iterator = asList("a", "b", "a", "c").iterator();
    ImmutableMultiset<String> multiset =
        new ImmutableMultiset.Builder<String>().addAll(iterator).build();
    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_treeMultiset
 Body: {
    Multiset<String> iterable = TreeMultiset.create(asList("a", "b", "a"));
    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: iterable (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCreation_noArgs
 Body: {
    Multiset<String> multiset = ImmutableMultiset.of();
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: isEmpty - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_collection_general
 Body: {
    Collection<String> c = MinimalCollection.of("a", "b", "a");
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_iterator_general
 Body: {
    Iterator<String> iterator = asList("a", "b", "a").iterator();
    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_collection_oneElement
 Body: {
    Collection<String> c = MinimalCollection.of("a");
    Multiset<String> multiset = ImmutableMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableMultisetTest
 Method: testCopyOf_shortcut_empty
 Body: {
    Collection<String> c = ImmutableMultiset.of();
    assertSame(c, ImmutableMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ByteSourceTester
 Method: testRead
 Body: {
    byte[] readBytes = source.read();
    assertExpectedBytes(readBytes);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: read=1 ) - Predicate: N/A - Scenario: readBytes (Alternative Scenario: readBytes=1 )

Project: guava
 Class: ByteSourceTester
 Method: testCopyTo_byteSink
 Body: {
    final ByteArrayOutputStream out = new ByteArrayOutputStream();
    // HERESY! but it's ok just for this I guess
    source.copyTo(
        new ByteSink() {
          @Override
          public OutputStream openStream() throws IOException {
            return out;
          }
        });
    assertExpectedBytes(out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: copyTo (Alternative Action: copyTo=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: ByteSourceTester
 Method: testRead_usingByteProcessor
 Body: {
    byte[] readBytes =
        source.read(
            new ByteProcessor<byte[]>() {
              final ByteArrayOutputStream out = new ByteArrayOutputStream();

              @Override
              public boolean processBytes(byte[] buf, int off, int len) throws IOException {
                out.write(buf, off, len);
                return true;
              }

              @Override
              public byte[] getResult() {
                return out.toByteArray();
              }
            });

    assertExpectedBytes(readBytes);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: read=1 ) - Predicate: N/A - Scenario: readBytes (Alternative Scenario: readBytes=1 )

Project: guava
 Class: ByteSourceTester
 Method: testHash
 Body: {
    HashCode expectedHash = Hashing.md5().hashBytes(expected);
    assertEquals(expectedHash, source.hash(Hashing.md5()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: md5=2 ) - Predicate: hash - Scenario: expectedHash (Alternative Scenario: expectedHash=1 )

Project: guava
 Class: ByteSourceTester
 Method: testCopyTo_outputStream
 Body: {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    source.copyTo(out);
    assertExpectedBytes(out.toByteArray());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: copyTo (Alternative Action: copyTo=1 ) - Predicate: toByteArray - Scenario: out (Alternative Scenario: out=1 )

Project: guava
 Class: UrlEscapersTest
 Method: testUrlPathSegmentEscaper
 Body: {
    UnicodeEscaper e = (UnicodeEscaper) urlPathSegmentEscaper();
    assertPathEscaper(e);
    assertUnescaped(e, '+');
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: urlPathSegmentEscaper=1 ) - Predicate: N/A - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testConcatEmptyEmpty
 Body: {
    String[] result = ObjectArrays.concat(new String[0], new String[0], String.class);
    assertEquals(String[].class, result.getClass());
    assertThat(result).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testConcatWithMoreGeneralType
 Body: {
    Serializable[] result = ObjectArrays.concat(new String[0], new String[0], Serializable.class);
    assertEquals(Serializable[].class, result.getClass());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: getClass - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testConcatBasic
 Body: {
    String[] result =
        ObjectArrays.concat(new String[] {"a", "b"}, new String[] {"c", "d"}, String.class);
    assertEquals(String[].class, result.getClass());
    assertThat(result).asList().containsExactly("a", "b", "c", "d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testPrependOneElement
 Body: {
    String[] result = ObjectArrays.concat("foo", new String[] {"bar"});
    assertThat(result).asList().containsExactly("foo", "bar").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testNewArray_fromArray_Empty
 Body: {
    String[] in = new String[0];
    String[] empty = ObjectArrays.newArray(in, 0);
    assertThat(empty).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArray=1 ) - Predicate: N/A - Scenario: in (Alternative Scenario: in=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testConcatNonemptyEmpty
 Body: {
    String[] result = ObjectArrays.concat(new String[] {"a", "b"}, new String[0], String.class);
    assertEquals(String[].class, result.getClass());
    assertThat(result).asList().containsExactly("a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testNewArray_fromClass_Empty
 Body: {
    String[] empty = ObjectArrays.newArray(String.class, 0);
    assertEquals(String[].class, empty.getClass());
    assertThat(empty).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: empty (Alternative Scenario: empty=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testPrependZeroElements
 Body: {
    String[] result = ObjectArrays.concat("foo", new String[] {});
    assertThat(result).asList().contains("foo");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testAppendTwoElements
 Body: {
    String[] result = ObjectArrays.concat(new String[] {"foo", "bar"}, "baz");
    assertThat(result).asList().containsExactly("foo", "bar", "baz").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testConcatEmptyNonempty
 Body: {
    String[] result = ObjectArrays.concat(new String[0], new String[] {"a", "b"}, String.class);
    assertEquals(String[].class, result.getClass());
    assertThat(result).asList().containsExactly("a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testPrependTwoElements
 Body: {
    String[] result = ObjectArrays.concat("foo", new String[] {"bar", "baz"});
    assertThat(result).asList().containsExactly("foo", "bar", "baz").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testAppendZeroElements
 Body: {
    String[] result = ObjectArrays.concat(new String[] {}, "foo");
    assertThat(result).asList().contains("foo");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ObjectArraysTest
 Method: testAppendOneElement
 Body: {
    String[] result = ObjectArrays.concat(new String[] {"foo"}, "bar");
    assertThat(result).asList().containsExactly("foo", "bar").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: concat=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: MultimapsTest
 Method: testIndexIterator
 Body: {
    final Multimap<String, Object> stringToObject =
        new ImmutableMultimap.Builder<String, Object>()
            .put("1", 1)
            .put("1", 1L)
            .put("1", "1")
            .put("2", 2)
            .put("2", 2L)
            .build();

    ImmutableMultimap<String, Object> outputMap =
        Multimaps.index(stringToObject.values().iterator(), Functions.toStringFunction());
    assertEquals(stringToObject, outputMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: N/A - Scenario: stringToObject (Alternative Scenario: outputMap=1 )

Project: guava
 Class: MultimapsTest
 Method: testAsMap_sortedSetMultimap
 Body: {
    SortedSetMultimap<String, Integer> sortedSetMultimap = TreeMultimap.create();
    Map<String, SortedSet<Integer>> map = Multimaps.asMap(sortedSetMultimap);
    assertSame(sortedSetMultimap.asMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: sortedSetMultimap (Alternative Scenario: sortedSetMultimap=1 )

Project: guava
 Class: MultimapsTest
 Method: testIndex
 Body: {
    final Multimap<String, Object> stringToObject =
        new ImmutableMultimap.Builder<String, Object>()
            .put("1", 1)
            .put("1", 1L)
            .put("1", "1")
            .put("2", 2)
            .put("2", 2L)
            .build();

    ImmutableMultimap<String, Object> outputMap =
        Multimaps.index(stringToObject.values(), Functions.toStringFunction());
    assertEquals(stringToObject, outputMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=5 ) - Predicate: N/A - Scenario: stringToObject (Alternative Scenario: outputMap=1 )

Project: guava
 Class: MultimapsTest
 Method: testAsMap_listMultimap
 Body: {
    ListMultimap<String, Integer> listMultimap = ArrayListMultimap.create();
    Map<String, List<Integer>> map = Multimaps.asMap(listMultimap);
    assertSame(listMultimap.asMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: listMultimap (Alternative Scenario: listMultimap=1 )

Project: guava
 Class: MultimapsTest
 Method: testAsMap_setMultimap
 Body: {
    SetMultimap<String, Integer> setMultimap = LinkedHashMultimap.create();
    Map<String, Set<Integer>> map = Multimaps.asMap(setMultimap);
    assertSame(setMultimap.asMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: setMultimap (Alternative Scenario: map=1 )

Project: guava
 Class: MultimapsTest
 Method: testAsMap_multimap
 Body: {
    Multimap<String, Integer> multimap =
        Multimaps.newMultimap(new HashMap<String, Collection<Integer>>(), new QueueSupplier());
    Map<String, Collection<Integer>> map = Multimaps.asMap(multimap);
    assertSame(multimap.asMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LongsTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<long[]> comparator = Longs.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: LongMathTest
 Method: testSqrtOfLongIsAtMostFloorSqrtMaxLong
 Body: {
    long sqrtMaxLong = (long) Math.sqrt(Long.MAX_VALUE);
    assertTrue(sqrtMaxLong <= LongMath.FLOOR_SQRT_MAX_LONG);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sqrt=1 ) - Predicate: N/A - Scenario: sqrtMaxLong (Alternative Scenario: sqrtMaxLong=1 )

Project: guava
 Class: ImmutableGraphTest
 Method: copyOfImmutableGraph_optimized
 Body: {
    Graph<String> graph1 = ImmutableGraph.copyOf(GraphBuilder.directed().<String>build());
    Graph<String> graph2 = ImmutableGraph.copyOf(graph1);

    assertThat(graph2).isSameAs(graph1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=2 ) - Predicate: N/A - Scenario: graph1 (Alternative Scenario: graph2=1 )

Project: guava
 Class: ImmutableGraphTest
 Method: copyOfImmutableValueGraph_optimized
 Body: {
    ValueGraph<String, Integer> graph1 =
        ImmutableValueGraph.copyOf(ValueGraphBuilder.directed().<String, Integer>build());
    ValueGraph<String, Integer> graph2 = ImmutableValueGraph.copyOf(graph1);

    assertThat(graph2).isSameAs(graph1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=2 ) - Predicate: N/A - Scenario: graph1 (Alternative Scenario: graph2=1 )

Project: guava
 Class: OrderingTest
 Method: testBinarySearch
 Body: {
    List<Integer> ints = Lists.newArrayList(0, 2, 3, 5, 7, 9);
    assertEquals(4, numberOrdering.binarySearch(ints, 7));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: binarySearch - Scenario: ints (Alternative Scenario: ints=1 )

Project: guava
 Class: OrderingTest
 Method: testLeastOfIteratorLargeK
 Body: {
    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);
    assertEquals(
        Arrays.asList(1, 2, 3, 4, 5),
        Ordering.natural().leastOf(list.iterator(), Integer.MAX_VALUE));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: OrderingTest
 Method: testGreatestOfIterable_simple
 Body: {
    /*
     * If greatestOf() promised to be implemented as reverse().leastOf(), this
     * test would be enough. It doesn't... but we'll cheat and act like it does
     * anyway. There's a comment there to remind us to fix this if we change it.
     */
    List<Integer> list = Arrays.asList(3, 1, 3, 2, 4, 2, 4, 3);
    assertEquals(Arrays.asList(4, 4, 3, 3), numberOrdering.greatestOf(list, 4));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: OrderingTest
 Method: testGreatestOfIterator_simple
 Body: {
    /*
     * If greatestOf() promised to be implemented as reverse().leastOf(), this
     * test would be enough. It doesn't... but we'll cheat and act like it does
     * anyway. There's a comment there to remind us to fix this if we change it.
     */
    List<Integer> list = Arrays.asList(3, 1, 3, 2, 4, 2, 4, 3);
    assertEquals(Arrays.asList(4, 4, 3, 3), numberOrdering.greatestOf(list.iterator(), 4));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: OrderingTest
 Method: testLeastOfIterableLargeK
 Body: {
    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);
    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural().leastOf(list, Integer.MAX_VALUE));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: AbstractSequentialIteratorTest
 Method: testSampleCode
 Body: {
    Iterable<Integer> actual =
        new Iterable<Integer>() {
          @Override
          public Iterator<Integer> iterator() {
            Iterator<Integer> powersOfTwo =
                new AbstractSequentialIterator<Integer>(1) {
                  protected Integer computeNext(Integer previous) {
                    return (previous == 1 << 30) ? null : previous * 2;
                  }
                };
            return powersOfTwo;
          }
        };
    assertThat(actual)
        .containsExactly(
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            262144,
            524288,
            1048576,
            2097152,
            4194304,
            8388608,
            16777216,
            33554432,
            67108864,
            134217728,
            268435456,
            536870912,
            1073741824)
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action:  ) - Predicate: N/A - Scenario: actual (Alternative Scenario: actual=1 )

Project: guava
 Class: AbstractSequentialIteratorTest
 Method: testDoubler
 Body: {
    Iterable<Integer> doubled =
        new Iterable<Integer>() {
          @Override
          public Iterator<Integer> iterator() {
            return newDoubler(2, 32);
          }
        };
    assertThat(doubled).containsExactly(2, 4, 8, 16, 32).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDoubler=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testCreate
 Body: {
    ConcurrentHashMultiset<Integer> multiset = ConcurrentHashMultiset.create();
    assertTrue(multiset.isEmpty());
    reserializeAndAssert(multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testRemove_zeroFromSome
 Body: {
    final int INITIAL_COUNT = 14;
    when(backingMap.get(KEY)).thenReturn(new AtomicInteger(INITIAL_COUNT));

    assertEquals(INITIAL_COUNT, multiset.remove(KEY, 0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: remove - Scenario: INITIAL_COUNT (Alternative Scenario: INITIAL_COUNT=1 )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testCount_elementAbsent
 Body: {
    when(backingMap.get(KEY)).thenReturn(null);

    assertEquals(0, multiset.count(KEY));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: count - Scenario: when(backingMap.get(KEY)) (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testCount_elementPresent
 Body: {
    final int COUNT = 12;
    when(backingMap.get(KEY)).thenReturn(new AtomicInteger(COUNT));

    assertEquals(COUNT, multiset.count(KEY));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: count - Scenario: COUNT (Alternative Scenario: COUNT=1 )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testAdd_zero
 Body: {
    final int INITIAL_COUNT = 32;

    when(backingMap.get(KEY)).thenReturn(new AtomicInteger(INITIAL_COUNT));
    assertEquals(INITIAL_COUNT, multiset.add(KEY, 0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: add=1 ) - Predicate: add - Scenario: INITIAL_COUNT (Alternative Scenario: INITIAL_COUNT=1 )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testRemove_zeroFromNone
 Body: {
    when(backingMap.get(KEY)).thenReturn(null);

    assertEquals(0, multiset.remove(KEY, 0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: remove - Scenario: when(backingMap.get(KEY)) (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testRemove_nonePresent
 Body: {
    when(backingMap.get(KEY)).thenReturn(null);

    assertEquals(0, multiset.remove(KEY, 400));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: remove - Scenario: when(backingMap.get(KEY)) (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testSetCount_0_nonePresent
 Body: {
    when(backingMap.get(KEY)).thenReturn(null);

    assertEquals(0, multiset.setCount(KEY, 0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: thenReturn=1 ) - Predicate: setCount - Scenario: when(backingMap.get(KEY)) (Alternative Scenario:  )

Project: guava
 Class: AbstractCacheTest
 Method: testGetAllPresent_empty
 Body: {
    Cache<Object, Object> cache =
        new AbstractCache<Object, Object>() {
          @Override
          public Object getIfPresent(Object key) {
            return null;
          }
        };

    assertEquals(ImmutableMap.of(), cache.getAllPresent(ImmutableList.of(new Object())));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: cache (Alternative Scenario: cache=1 )

Project: guava
 Class: EnumMultisetTest
 Method: testSerializable
 Body: {
    Multiset<Color> ms = EnumMultiset.create(asList(Color.RED, Color.YELLOW, Color.RED));
    assertEquals(ms, SerializableTester.reserialize(ms));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: reserialize - Scenario: ms (Alternative Scenario: ms=1 )

Project: guava
 Class: FuturesTransformAsyncTest
 Method: testAsyncToString
 Body: {
    inputFuture.set(SLOW_OUTPUT_VALID_INPUT_DATA);
    assertThat(resultFuture.toString()).contains(outputFuture.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: toString=2 ) - Predicate: toString - Scenario: inputFuture (Alternative Scenario:  )

Project: guava
 Class: FuturesTransformAsyncTest
 Method: testFutureGetThrowsFunctionException
 Body: {
    inputFuture.set(EXCEPTION_DATA);
    listener.assertException(EXCEPTION);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: set=1 ) - Predicate: N/A - Scenario: inputFuture (Alternative Scenario:  )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPreOrder_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).depthFirstPreOrder('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPreOrderIterable_singleRoot
 Body: {
    Iterable<Character> result =
        Traverser.forGraph(SINGLE_ROOT).depthFirstPreOrder(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPostOrder_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).depthFirstPostOrder('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPostOrder_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPostOrder('a');

    assertEqualCharNodes(result, "ba");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPreOrder_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).depthFirstPreOrder('a');

    assertEqualCharNodes(result, "abecfd");
    assertEqualCharNodes(result, "abecfd");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPostOrderIterable_singleRoot
 Body: {
    Iterable<Character> result =
        Traverser.forTree(SINGLE_ROOT).depthFirstPostOrder(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result =
        Traverser.forGraph(JAVADOC_GRAPH).depthFirstPreOrder(charactersOf("bc"));

    assertEqualCharNodes(result, "bacefd");
    assertEqualCharNodes(result, "bacefd");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPostOrder_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).depthFirstPostOrder('a');
    assertEqualCharNodes(result, "fcebda");
    assertEqualCharNodes(result, "fcebda");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_breadthFirst_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forGraph(TWO_TREES).breadthFirst('a');

    assertEqualCharNodes(result, "ab");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPreOrderIterable_singleRoot
 Body: {
    Iterable<Character> result =
        Traverser.forTree(SINGLE_ROOT).depthFirstPreOrder(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPostOrderIterable_singleRoot
 Body: {
    Iterable<Character> result =
        Traverser.forGraph(SINGLE_ROOT).depthFirstPostOrder(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_breadthFirst_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).breadthFirst(charactersOf("bf"));

    assertEqualCharNodes(result, "bfaecd");
    assertEqualCharNodes(result, "bfaecd");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_breadthFirst_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).breadthFirst('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_depthFirstPreOrder_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPreOrder('a');

    assertEqualCharNodes(result, "ab");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPostOrder_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPostOrder('a');

    assertEqualCharNodes(result, "ba");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPostOrder_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPostOrder('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPostOrderIterable_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result =
        Traverser.forGraph(JAVADOC_GRAPH).depthFirstPostOrder(charactersOf("bf"));
    assertEqualCharNodes(result, "efcdab");
    assertEqualCharNodes(result, "efcdab");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_breadthFirst_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forTree(TWO_TREES).breadthFirst('a');

    assertEqualCharNodes(result, "ab");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_breadthFirstIterable_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes
 Body: {
    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).breadthFirst('a');

    assertEqualCharNodes(result, "abcdef");
    assertEqualCharNodes(result, "abcdef");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forTree_breadthFirstIterable_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).breadthFirst(charactersOf("a"));

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forTree=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPreOrder_singleRoot
 Body: {
    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPreOrder('a');

    assertEqualCharNodes(result, "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: TraverserTest
 Method: forGraph_depthFirstPreOrder_twoTrees
 Body: {
    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPreOrder('a');

    assertEqualCharNodes(result, "ab");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forGraph=1 ) - Predicate: N/A - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: ImmutableTableTest
 Method: testBuilder_withImmutableCell
 Body: {
    ImmutableTable.Builder<Character, Integer, String> builder = new ImmutableTable.Builder<>();
    assertEquals(
        ImmutableTable.of('a', 1, "foo"), builder.put(Tables.immutableCell('a', 1, "foo")).build());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: of - Scenario: builder (Alternative Scenario: builder=1 )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: adjacentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: incidentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).nodeU()).isEqualTo(N1);
    assertThat(network.incidentNodes(E11).nodeV()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: incidentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentEdges(N1)).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentEdges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: edges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.edges()).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: edges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: adjacentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentEdges(E11)).containsExactly(E12);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_collection_empty
 Body: {
    // "<String>" is required to work around a javac 1.5 bug.
    Collection<String> c = MinimalCollection.<String>of();
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: isEmpty - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_noArgs
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of();
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: isEmpty - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testBuilderAddAllIterator
 Body: {
    Iterator<String> iterator = asList("a", "b", "a", "c").iterator();
    ImmutableSortedMultiset<String> multiset =
        ImmutableSortedMultiset.<String>naturalOrder().addAll(iterator).build();
    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testSerialization_empty
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of();
    assertSame(c, SerializableTester.reserialize(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserialize - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_sevenElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "c", "d", "e", "f", "g");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e", "f", "g")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_multiset_empty
 Body: {
    Multiset<String> c = HashMultiset.create();
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_threeElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "c");
    assertEquals(HashMultiset.create(asList("a", "b", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_emptyArray
 Body: {
    String[] array = new String[0];
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(array);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isEmpty=1 ) - Predicate: isEmpty - Scenario: array (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testBuilderSetCount
 Body: {
    ImmutableSortedMultiset<String> multiset =
        ImmutableSortedMultiset.<String>naturalOrder()
            .add("a")
            .setCount("a", 2)
            .setCount("b", 3)
            .build();
    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: setCount=2 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_twoElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b");
    assertEquals(HashMultiset.create(asList("a", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_iterator_general
 Body: {
    Iterator<String> iterator = asList("a", "b", "a").iterator();
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(iterator);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testSerialization_elementSet
 Body: {
    Multiset<String> c = ImmutableSortedMultiset.of("a", "b", "a");
    Collection<String> copy = SerializableTester.reserializeAndAssert(c.elementSet());
    assertThat(copy).containsExactly("a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: elementSet=1 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_shortcut_empty
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of();
    assertSame(c, ImmutableSortedMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_collection_oneElement
 Body: {
    Collection<String> c = MinimalCollection.of("a");
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_shortcut_immutableMultiset
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of("a", "b", "c");
    assertSame(c, ImmutableSortedMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testSerialization_multiple
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of("a", "b", "a");
    Collection<String> copy = SerializableTester.reserializeAndAssert(c);
    assertThat(copy).containsExactly("a", "a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_oneElement
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a");
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_fiveElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "c", "d", "e");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_multiset_oneElement
 Body: {
    Multiset<String> c = HashMultiset.create(asList("a"));
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testBuilderAddCopies
 Body: {
    ImmutableSortedMultiset<String> multiset =
        ImmutableSortedMultiset.<String>naturalOrder()
            .addCopies("a", 2)
            .addCopies("b", 3)
            .addCopies("c", 0)
            .build();
    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: addCopies=3 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_arrayOfOneElement
 Body: {
    String[] array = new String[] {"a"};
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(array);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: create - Scenario: array (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_multiset_general
 Body: {
    Multiset<String> c = HashMultiset.create(asList("a", "b", "a"));
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_sixElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "c", "d", "e", "f");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d", "e", "f")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testBuilderAdd
 Body: {
    ImmutableSortedMultiset<String> multiset =
        ImmutableSortedMultiset.<String>naturalOrder().add("a").add("b").add("a").add("c").build();
    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=4 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_iterator_oneElement
 Body: {
    Iterator<String> iterator = Iterators.singletonIterator("a");
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(iterator);
    assertEquals(HashMultiset.create(asList("a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singletonIterator=1 ) - Predicate: create - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_iterator_empty
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(iterator);
    assertTrue(multiset.isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: isEmpty - Scenario: iterator (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCreation_fourElements
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "c", "d");
    assertEquals(HashMultiset.create(asList("a", "b", "c", "d")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_collection_general
 Body: {
    Collection<String> c = MinimalCollection.of("a", "b", "a");
    Multiset<String> multiset = ImmutableSortedMultiset.copyOf(c);
    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: create - Scenario: c (Alternative Scenario: multiset=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testCopyOf_shortcut_singleton
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of("a");
    assertSame(c, ImmutableSortedMultiset.copyOf(c));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: copyOf - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testIterationOrder
 Body: {
    Collection<String> c = ImmutableSortedMultiset.of("a", "b", "a");
    assertThat(c).containsExactly("a", "a", "b").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: c (Alternative Scenario: c=1 )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testMultisetWrites
 Body: {
    Multiset<String> multiset = ImmutableSortedMultiset.of("a", "b", "a");
    UnmodifiableCollectionTests.assertMultisetIsUnmodifiable(multiset, "test");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: PredicatesTest
 Method: testIsNull_apply
 Body: {
    Predicate<Integer> isNull = Predicates.isNull();
    assertTrue(isNull.apply(null));
    assertFalse(isNull.apply(1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isNull (Alternative Scenario: isNull=1 )

Project: guava
 Class: PredicatesTest
 Method: testContainsPattern_apply
 Body: {
    Predicate<CharSequence> isFoobar = Predicates.containsPattern("^Fo.*o.*bar$");
    assertTrue(isFoobar.apply("Foxyzoabcbar"));
    assertFalse(isFoobar.apply("Foobarx"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isFoobar (Alternative Scenario: isFoobar=1 )

Project: guava
 Class: PredicatesTest
 Method: testSubtypeOf_subclass
 Body: {
    Predicate<Class<?>> isNumber = Predicates.subtypeOf(Number.class);

    assertTrue(isNumber.apply(Integer.class));
    assertTrue(isNumber.apply(Float.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isNumber (Alternative Scenario: isNumber=1 )

Project: guava
 Class: PredicatesTest
 Method: testNotNull_apply
 Body: {
    Predicate<Integer> notNull = Predicates.notNull();
    assertFalse(notNull.apply(null));
    assertTrue(notNull.apply(1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: notNull (Alternative Scenario: notNull=1 )

Project: guava
 Class: PredicatesTest
 Method: testContains_apply
 Body: {
    Predicate<CharSequence> isFoobar = Predicates.contains(Pattern.compile("^Fo.*o.*bar$"));

    assertTrue(isFoobar.apply("Foxyzoabcbar"));
    assertFalse(isFoobar.apply("Foobarx"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isFoobar (Alternative Scenario: isFoobar=1 )

Project: guava
 Class: PredicatesTest
 Method: testSubtypeOf_interface
 Body: {
    Predicate<Class<?>> isComparable = Predicates.subtypeOf(Comparable.class);

    assertTrue(isComparable.apply(Integer.class));
    assertTrue(isComparable.apply(Float.class));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isComparable (Alternative Scenario: isComparable=1 )

Project: guava
 Class: PredicatesTest
 Method: testOr_serializationIterable
 Body: {
    Predicate<Integer> pre = Predicates.or(Arrays.asList(TRUE, FALSE));
    Predicate<Integer> post = SerializableTester.reserializeAndAssert(pre);
    assertEquals(pre.apply(0), post.apply(0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: pre (Alternative Scenario: pre=1 )

Project: guava
 Class: PredicatesTest
 Method: testContainsPattern_serialization
 Body: {
    Predicate<CharSequence> pre = Predicates.containsPattern("foo");
    Predicate<CharSequence> post = SerializableTester.reserializeAndAssert(pre);
    assertEquals(pre.apply("foo"), post.apply("foo"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: pre (Alternative Scenario: pre=1 )

Project: guava
 Class: PredicatesTest
 Method: testIsEqualToNull_apply
 Body: {
    Predicate<Integer> isNull = Predicates.equalTo(null);
    assertTrue(isNull.apply(null));
    assertFalse(isNull.apply(1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: apply=2 ) - Predicate: apply - Scenario: isNull (Alternative Scenario: isNull=1 )

Project: guava
 Class: IteratorsTest
 Method: test_contains_null_no
 Body: {
    Iterator<String> set = asList("a", "b").iterator();
    assertFalse(Iterators.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IteratorsTest
 Method: testTryFind_firstElement
 Body: {
    Iterable<String> list = Lists.newArrayList("cool", "pants");
    Iterator<String> iterator = list.iterator();
    assertThat(Iterators.tryFind(iterator, Predicates.equalTo("cool"))).hasValue("cool");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryFind=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testSize1
 Body: {
    Iterator<Integer> iterator = Collections.singleton(0).iterator();
    assertEquals(1, Iterators.size(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: singleton=1 ) - Predicate: size - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testToStringWithNull
 Body: {
    Iterator<String> iterator = Lists.newArrayList("hello", null, "world").iterator();
    assertEquals("[hello, null, world]", Iterators.toString(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: toString - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetOnlyElement_withDefault_empty_null
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertNull(Iterators.getOnlyElement(iterator, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getOnlyElement - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetOnlyElement_withDefault_empty
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertEquals("bar", Iterators.getOnlyElement(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getOnlyElement - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testFind_matchAlways
 Body: {
    Iterable<String> list = Lists.newArrayList("cool", "pants");
    Iterator<String> iterator = list.iterator();
    assertEquals("cool", Iterators.find(iterator, Predicates.alwaysTrue()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: find - Scenario: list (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: test_contains_null_yes
 Body: {
    Iterator<String> set = asList("a", null, "b").iterator();
    assertTrue(Iterators.contains(set, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IteratorsTest
 Method: testToString
 Body: {
    Iterator<String> iterator = Lists.newArrayList("yam", "bam", "jam", "ham").iterator();
    assertEquals("[yam, bam, jam, ham]", Iterators.toString(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: toString - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetLast_withDefault_empty_null
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertNull(Iterators.getLast(iterator, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getLast - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testPaddedPartition_empty
 Body: {
    Iterator<Integer> source = Iterators.emptyIterator();
    Iterator<List<Integer>> partitions = Iterators.paddedPartition(source, 1);
    assertFalse(partitions.hasNext());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: hasNext - Scenario: source (Alternative Scenario: partitions=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetLast_withDefault_empty
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertEquals("bar", Iterators.getLast(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getLast - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testSize0
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertEquals(0, Iterators.size(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: size - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testTryFind_lastElement
 Body: {
    Iterable<String> list = Lists.newArrayList("cool", "pants");
    Iterator<String> iterator = list.iterator();
    assertThat(Iterators.tryFind(iterator, Predicates.equalTo("pants"))).hasValue("pants");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryFind=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: test_contains_nonnull_no
 Body: {
    Iterator<String> set = asList("a", "b").iterator();
    assertFalse(Iterators.contains(set, "c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IteratorsTest
 Method: test_contains_nonnull_yes
 Body: {
    Iterator<String> set = asList("a", null, "b").iterator();
    assertTrue(Iterators.contains(set, "b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: IteratorsTest
 Method: testTryFind_alwaysTrue
 Body: {
    Iterable<String> list = Lists.newArrayList("cool", "pants");
    Iterator<String> iterator = list.iterator();
    assertThat(Iterators.tryFind(iterator, Predicates.alwaysTrue())).hasValue("cool");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tryFind=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetLast_withDefault_two
 Body: {
    Iterator<String> iterator = asList("foo", "bar").iterator();
    assertEquals("bar", Iterators.getLast(iterator, "x"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getLast - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testToArraySingleton
 Body: {
    Iterator<String> iterator = Collections.singletonList("a").iterator();
    String[] array = Iterators.toArray(iterator, String.class);
    assertTrue(Arrays.equals(new String[] {"a"}, array));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: equals - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testToArrayEmpty
 Body: {
    Iterator<String> iterator = Collections.<String>emptyList().iterator();
    String[] array = Iterators.toArray(iterator, String.class);
    assertTrue(Arrays.equals(new String[0], array));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: equals - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetNext_withDefault_empty_null
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertNull(Iterators.getNext(iterator, null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getNext - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetOnlyElement_withDefault_singleton
 Body: {
    Iterator<String> iterator = Collections.singletonList("foo").iterator();
    assertEquals("foo", Iterators.getOnlyElement(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getOnlyElement - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testPartition_empty
 Body: {
    Iterator<Integer> source = Iterators.emptyIterator();
    Iterator<List<Integer>> partitions = Iterators.partition(source, 1);
    assertFalse(partitions.hasNext());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: hasNext - Scenario: source (Alternative Scenario: partitions=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetNext_withDefault_two
 Body: {
    Iterator<String> iterator = asList("foo", "bar").iterator();
    assertEquals("foo", Iterators.getNext(iterator, "x"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getNext - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testIndexOf_consumedDataNoMatch
 Body: {
    Iterator<String> iterator = Lists.newArrayList("manny", "mo", "mo", "jack").iterator();
    assertEquals(-1, Iterators.indexOf(iterator, Predicates.equalTo("bob")));
    assertFalse(iterator.hasNext());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: hasNext - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetNext_withDefault_empty
 Body: {
    Iterator<String> iterator = Iterators.emptyIterator();
    assertEquals("bar", Iterators.getNext(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyIterator=1 ) - Predicate: getNext - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetNext_withDefault_singleton
 Body: {
    Iterator<String> iterator = Collections.singletonList("foo").iterator();
    assertEquals("foo", Iterators.getNext(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getNext - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetLast_withDefault_singleton
 Body: {
    Iterator<String> iterator = Collections.singletonList("foo").iterator();
    assertEquals("foo", Iterators.getLast(iterator, "bar"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getLast - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testCycleOfEmpty
 Body: {
    // "<String>" for javac 1.5.
    Iterator<String> cycle = Iterators.<String>cycle();
    assertFalse(cycle.hasNext());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: hasNext=1 ) - Predicate: hasNext - Scenario: cycle (Alternative Scenario: cycle=1 )

Project: guava
 Class: IteratorsTest
 Method: testGetOnlyElement_noDefault_valid
 Body: {
    Iterator<String> iterator = Collections.singletonList("foo").iterator();
    assertEquals("foo", Iterators.getOnlyElement(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: getOnlyElement - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: IteratorsTest
 Method: testToStringEmptyIterator
 Body: {
    Iterator<String> iterator = Collections.<String>emptyList().iterator();
    assertEquals("[]", Iterators.toString(iterator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: toString - Scenario: iterator (Alternative Scenario: iterator=1 )

Project: guava
 Class: MapsTest
 Method: testSubMap_unboundedRange
 Body: {
    ImmutableSortedMap<Integer, Integer> map = ImmutableSortedMap.of(2, 0, 4, 0, 6, 0, 8, 0, 10, 0);

    assertEquals(map, Maps.subMap(map, Range.<Integer>all()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: all=1 ) - Predicate: subMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testIdentityHashMap
 Body: {
    IdentityHashMap<Integer, Integer> map = Maps.newIdentityHashMap();
    assertEquals(Collections.emptyMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testUniqueIndexIterator
 Body: {
    ImmutableMap<Integer, String> outputMap =
        Maps.uniqueIndex(
            INT_TO_STRING_MAP.values().iterator(), Functions.forMap(INT_TO_STRING_MAP.inverse()));
    assertEquals(INT_TO_STRING_MAP, outputMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: outputMap (Alternative Scenario: outputMap=1 )

Project: guava
 Class: MapsTest
 Method: testTransformValues
 Body: {
    Map<String, Integer> map = ImmutableMap.of("a", 4, "b", 9);
    Map<String, Double> transformed = transformValues(map, SQRT_FUNCTION);

    assertEquals(ImmutableMap.of("a", 2.0, "b", 3.0), transformed);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: map (Alternative Scenario: transformed=1 )

Project: guava
 Class: MapsTest
 Method: testAsConverter_toString
 Body: {
    ImmutableBiMap<String, Integer> biMap =
        ImmutableBiMap.of(
            "one", 1,
            "two", 2);
    Converter<String, Integer> converter = Maps.asConverter(biMap);
    assertEquals("Maps.asConverter({one=1, two=2})", converter.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asConverter=1 ) - Predicate: toString - Scenario: biMap (Alternative Scenario: biMap=1 )

Project: guava
 Class: MapsTest
 Method: testMapDifferenceOfSortedMapIsSorted
 Body: {
    Map<Integer, Integer> map = SORTED_SINGLETON;
    MapDifference<Integer, Integer> difference = Maps.difference(map, EMPTY);
    assertTrue(difference instanceof SortedMapDifference);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: difference=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: difference=1 )

Project: guava
 Class: MapsTest
 Method: testHashMap
 Body: {
    HashMap<Integer, Integer> map = Maps.newHashMap();
    assertEquals(Collections.emptyMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyMap=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testUniqueIndexCollection
 Body: {
    ImmutableMap<Integer, String> outputMap =
        Maps.uniqueIndex(INT_TO_STRING_MAP.values(), Functions.forMap(INT_TO_STRING_MAP.inverse()));
    assertEquals(INT_TO_STRING_MAP, outputMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: outputMap (Alternative Scenario: outputMap=1 )

Project: guava
 Class: MapsTest
 Method: testSortedMapTransformValues
 Body: {
    SortedMap<String, Integer> map = sortedNotNavigable(ImmutableSortedMap.of("a", 4, "b", 9));
    SortedMap<String, Double> transformed = transformValues(map, SQRT_FUNCTION);

    /*
     * We'd like to sanity check that we didn't get a NavigableMap out, but we
     * can't easily do so while maintaining GWT compatibility.
     */
    assertEquals(ImmutableSortedMap.of("a", 2.0, "b", 3.0), transformed);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: map (Alternative Scenario: transformed=1 )

Project: guava
 Class: MapsTest
 Method: testNavigableMapTransformValues
 Body: {
    NavigableMap<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9);
    NavigableMap<String, Double> transformed = transformValues(map, SQRT_FUNCTION);

    assertEquals(ImmutableSortedMap.of("a", 2.0, "b", 3.0), transformed);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: map (Alternative Scenario: transformed=1 )

Project: guava
 Class: MapsTest
 Method: testConcurrentMap
 Body: {
    ConcurrentMap<Integer, Integer> map = Maps.newConcurrentMap();
    assertEquals(Collections.emptyMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newConcurrentMap=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testLinkedHashMap
 Body: {
    LinkedHashMap<Integer, Integer> map = Maps.newLinkedHashMap();
    assertEquals(Collections.emptyMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newLinkedHashMap=1 ) - Predicate: emptyMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testUniqueIndexIterable
 Body: {
    ImmutableMap<Integer, String> outputMap =
        Maps.uniqueIndex(
            new Iterable<String>() {
              @Override
              public Iterator<String> iterator() {
                return INT_TO_STRING_MAP.values().iterator();
              }
            },
            Functions.forMap(INT_TO_STRING_MAP.inverse()));
    assertEquals(INT_TO_STRING_MAP, outputMap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: outputMap (Alternative Scenario: outputMap=1 )

Project: guava
 Class: MapsTest
 Method: testTreeMapWithComparator
 Body: {
    TreeMap<Integer, Integer> map = Maps.newTreeMap(SOME_COMPARATOR);
    assertEquals(Collections.emptyMap(), map);
    assertSame(SOME_COMPARATOR, map.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: comparator - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapsTest
 Method: testTreeMap
 Body: {
    TreeMap<Integer, Integer> map = Maps.newTreeMap();
    assertEquals(Collections.emptyMap(), map);
    assertNull(map.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: comparator - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: SettableFutureTest
 Method: testCancel_beforeSet
 Body: {
    SettableFuture<Object> async = SettableFuture.create();
    async.cancel(true);
    assertFalse(async.set(42));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: cancel (Alternative Action: cancel=1 ) - Predicate: set - Scenario: async (Alternative Scenario: async=1 )

Project: guava
 Class: SettableFutureTest
 Method: testSetFailure
 Body: {
    assertTrue(future.setException(new Exception("failure")));
    tester.testFailedFuture("failure");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: testFailedFuture (Alternative Action: testFailedFuture=1 ) - Predicate: setException - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: SettableFutureTest
 Method: testCreate
 Body: {
    SettableFuture<Integer> future = SettableFuture.create();
    assertFalse(future.isDone());
    assertFalse(future.isCancelled());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isCancelled=1 ) - Predicate: isCancelled - Scenario: future (Alternative Scenario: future=1 )

Project: guava
 Class: SettableFutureTest
 Method: testCancel
 Body: {
    assertTrue(future.cancel(true));
    tester.testCancelledFuture();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: testCancelledFuture (Alternative Action: cancel=1 ) - Predicate: cancel - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: SettableFutureTest
 Method: testSetValue
 Body: {
    assertTrue(future.set("value"));
    tester.testCompletedFuture("value");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: testCompletedFuture (Alternative Action: set=1 ) - Predicate: set - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testStringSplitOnOnlyDelimiter
 Body: {
    Iterable<String> blankblank = Splitter.on(".").split(".");
    assertThat(blankblank).containsExactly("", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: blankblank (Alternative Scenario: blankblank=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithLongLeadingDelimiter
 Body: {
    String longDelimiter = ", a, b, c";
    Iterable<String> letters = Splitter.on(", ").split(longDelimiter);
    assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSimpleSplit
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = Splitter.on(",").split(simple);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithDelimiterSubstringInValue
 Body: {
    String fourCommasAndFourSpaces = ",,,,    ";
    Iterable<String> threeCommasThenThreeSpaces = Splitter.on(", ").split(fourCommasAndFourSpaces);
    assertThat(threeCommasThenThreeSpaces).containsExactly(",,,", "   ").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: fourCommasAndFourSpaces (Alternative Scenario: fourCommasAndFourSpaces=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithLongTrailingDelimiter
 Body: {
    String longDelimiter = "a, b, c, ";
    Iterable<String> letters = Splitter.on(", ").split(longDelimiter);
    assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim
 Body: {
    String text = ",,a,,  , b ,, c,d ";
    Iterable<String> items = COMMA_SPLITTER.limit(2).omitEmptyStrings().trimResults().split(text);
    assertThat(items).containsExactly("a", "b ,, c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWordBoundary
 Body: {
    String string = "foo<bar>bletch";
    Iterable<String> words = Splitter.on(Pattern.compile("\\b")).split(string);
    assertThat(words).containsExactly("foo", "<", "bar", ">", "bletch").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: string (Alternative Scenario: string=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithDoubleDelimiter
 Body: {
    String doubled = "a,,b,c";
    Iterable<String> letters = Splitter.onPattern(",").split(doubled);
    assertThat(letters).containsExactly("a", "", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithDoubleDelimiterAndSpace
 Body: {
    String doubled = "a,, b,c";
    Iterable<String> letters = Splitter.on(",").split(doubled);
    assertThat(letters).containsExactly("a", "", " b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithTrailingDelimiter
 Body: {
    String trailing = "a,b,c,";
    Iterable<String> letters = Splitter.on(",").split(trailing);
    assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: trailing (Alternative Scenario: trailing=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitOnOnlyDelimiter
 Body: {
    Iterable<String> blankblank = Splitter.on('.').split(".");
    assertThat(blankblank).containsExactly("", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: blankblank (Alternative Scenario: blankblank=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithDoubleDelimiter
 Body: {
    String doubled = "a,,b,c";
    Iterable<String> letters = Splitter.on(",").split(doubled);
    assertThat(letters).containsExactly("a", "", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitEmptyTokenOmitEmptyStrings
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters = Splitter.on(".").omitEmptyStrings().trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSimpleSplit
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = Splitter.onPattern(",").split(simple);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim1NoOmit
 Body: {
    String text = ",,a,,  , b ,, c,d ";
    Iterable<String> items = COMMA_SPLITTER.limit(1).trimResults().split(text);
    assertThat(items).containsExactly(",,a,,  , b ,, c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithDoubleDelimiterOmitEmptyStrings
 Body: {
    String doubled = "a..b.c";
    Iterable<String> letters = Splitter.on(literalDotPattern()).omitEmptyStrings().split(doubled);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: literalDotPattern=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithDoubleDelimiterAndSpace
 Body: {
    String doubled = "a,, b,c";
    Iterable<String> letters = COMMA_SPLITTER.split(doubled);
    assertThat(letters).containsExactly("a", "", " b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithTrim
 Body: {
    String jacksons =
        "arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, " + "ofar(Jemaine), aff(Tito)";
    Iterable<String> family =
        Splitter.on(Pattern.compile(","))
            .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace()))
            .split(jacksons);
    assertThat(family)
        .containsExactly("(Marlon)", "(Michael)", "(Jackie)", "(Jemaine)", "(Tito)")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: or=1 ) - Predicate: N/A - Scenario: jacksons (Alternative Scenario: jacksons=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSimpleSplitWithNoDelimiter
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = Splitter.on('.').split(simple);
    assertThat(letters).containsExactly("a,b,c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitOnOnlyDelimiter
 Body: {
    Iterable<String> blankblank = Splitter.on(literalDotPattern()).split(".");

    assertThat(blankblank).containsExactly("", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: literalDotPattern=1 ) - Predicate: N/A - Scenario: blankblank (Alternative Scenario: blankblank=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitOnEmptyString
 Body: {
    Iterable<String> notMuch = Splitter.on(".").split("");
    assertThat(notMuch).containsExactly("").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: notMuch (Alternative Scenario: notMuch=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitOnOnlyDelimitersOmitEmptyStrings
 Body: {
    Iterable<String> empty = Splitter.on(".").omitEmptyStrings().split("...");
    assertThat(empty).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: empty (Alternative Scenario: empty=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithLeadingDelimiter
 Body: {
    String leading = ",a,b,c";
    Iterable<String> letters = Splitter.on(",").split(leading);
    assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: leading (Alternative Scenario: leading=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithDoubleDelimiter
 Body: {
    String doubled = "a,,b,c";
    Iterable<String> letters = COMMA_SPLITTER.split(doubled);
    assertThat(letters).containsExactly("a", "", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSimpleSplitToList
 Body: {
    String simple = "a,b,c";
    List<String> letters = COMMA_SPLITTER.splitToList(simple);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: splitToList=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitFixedLength
 Body: {
    String simple = "abcd";
    Iterable<String> letters = Splitter.fixedLength(1).limit(2).split(simple);
    assertThat(letters).containsExactly("a", "bcd").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithLeadingDelimiter
 Body: {
    String leading = ",a,b,c";
    Iterable<String> letters = Splitter.onPattern(",").split(leading);
    assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: leading (Alternative Scenario: leading=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithLeadingDelimiter
 Body: {
    String leading = ",a,b,c";
    Iterable<String> letters = COMMA_SPLITTER.split(leading);
    assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: leading (Alternative Scenario: leading=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithMatcherDelimiter
 Body: {
    Iterable<String> testCharacteringMotto =
        Splitter.on(CharMatcher.whitespace()).split("Testing\nrocks\tDebugging sucks");
    assertThat(testCharacteringMotto)
        .containsExactly("Testing", "rocks", "Debugging", "sucks")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: testCharacteringMotto (Alternative Scenario: testCharacteringMotto=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitLarge
 Body: {
    String simple = "abcd";
    Iterable<String> letters = Splitter.fixedLength(1).limit(100).split(simple);
    assertThat(letters).containsExactly("a", "b", "c", "d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitEmptyToken
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters = Splitter.on('.').trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSplitOnlyOneChunk
 Body: {
    String simple = "abc";
    Iterable<String> letters = Splitter.fixedLength(3).split(simple);
    assertThat(letters).containsExactly("abc").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWordBoundary_singleCharInput
 Body: {
    String string = "f";
    Iterable<String> words = Splitter.on(Pattern.compile("\\b")).split(string);
    assertThat(words).containsExactly("f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: string (Alternative Scenario: string=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithTrailingDelimiter
 Body: {
    String trailing = "a,b,c,";
    Iterable<String> letters = Splitter.onPattern(",").split(trailing);
    assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: trailing (Alternative Scenario: trailing=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitOnOnlyDelimitersOmitEmptyStrings
 Body: {
    Iterable<String> empty = Splitter.on('.').omitEmptyStrings().split("...");
    assertThat(empty).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: empty (Alternative Scenario: empty=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim1Empty
 Body: {
    String text = "";
    Iterable<String> items = COMMA_SPLITTER.limit(1).split(text);
    assertThat(items).containsExactly("").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithDoubleDelimiterAndSpace
 Body: {
    String doubled = "a,, b,c";
    Iterable<String> letters = Splitter.onPattern(",").split(doubled);
    assertThat(letters).containsExactly("a", "", " b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSimpleSplit
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = COMMA_SPLITTER.split(simple);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithDoubleDelimiterOmitEmptyStrings
 Body: {
    String doubled = "a..b.c";
    Iterable<String> letters = Splitter.on('.').omitEmptyStrings().split(doubled);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim3
 Body: {
    String text = ",,a,,  , b ,, c,d ";
    Iterable<String> items = COMMA_SPLITTER.limit(3).omitEmptyStrings().trimResults().split(text);
    assertThat(items).containsExactly("a", "b", "c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitSeparator
 Body: {
    String simple = "a,b,c,d";
    Iterable<String> items = COMMA_SPLITTER.limit(2).split(simple);
    assertThat(items).containsExactly("a", "b,c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparators
 Body: {
    String text = "a,,,b,,c,d";
    Iterable<String> items = COMMA_SPLITTER.limit(2).split(text);
    assertThat(items).containsExactly("a", ",,b,,c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithTrailingDelimiter
 Body: {
    String trailing = "a,b,c,";
    Iterable<String> letters = COMMA_SPLITTER.split(trailing);
    assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: trailing (Alternative Scenario: trailing=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSimpleSplitWithNoDelimiter
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = Splitter.on(".").split(simple);
    assertThat(letters).containsExactly("a,b,c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithMultipleLetters
 Body: {
    Iterable<String> testCharacteringMotto =
        Splitter.on('-').split("Testing-rocks-Debugging-sucks");
    assertThat(testCharacteringMotto)
        .containsExactly("Testing", "rocks", "Debugging", "sucks")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: testCharacteringMotto (Alternative Scenario: testCharacteringMotto=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitEmptyToken
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters = Splitter.on(".").trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithLongLeadingDelimiter
 Body: {
    String longDelimiter = ", a, b, c";
    Iterable<String> letters = Splitter.on(Pattern.compile(", ")).split(longDelimiter);
    assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithLongDelimiter
 Body: {
    String longDelimiter = "a, b, c";
    Iterable<String> letters = Splitter.on(", ").split(longDelimiter);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitOnEmptyString
 Body: {
    Iterable<String> nothing = Splitter.on('.').split("");
    assertThat(nothing).containsExactly("").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: nothing (Alternative Scenario: nothing=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitOnOnlyDelimitersOmitEmptyStrings
 Body: {
    Iterable<String> empty = Splitter.on(literalDotPattern()).omitEmptyStrings().split("...");
    assertThat(empty).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: literalDotPattern=1 ) - Predicate: N/A - Scenario: empty (Alternative Scenario: empty=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSplitEmptyString
 Body: {
    String simple = "";
    Iterable<String> letters = Splitter.fixedLength(3).split(simple);
    assertThat(letters).containsExactly("").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitWithTrim
 Body: {
    String jacksons =
        "arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, " + "ofar(Jemaine), aff(Tito)";
    Iterable<String> family =
        COMMA_SPLITTER
            .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace()))
            .split(jacksons);
    assertThat(family)
        .containsExactly("(Marlon)", "(Michael)", "(Jackie)", "(Jemaine)", "(Tito)")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: or=1 ) - Predicate: N/A - Scenario: jacksons (Alternative Scenario: jacksons=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSimpleSplit
 Body: {
    String simple = "abcde";
    Iterable<String> letters = Splitter.fixedLength(2).split(simple);
    assertThat(letters).containsExactly("ab", "cd", "e").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithMultipleLetters
 Body: {
    Iterable<String> testPatterningMotto =
        Splitter.onPattern("-").split("Testing-rocks-Debugging-sucks");
    assertThat(testPatterningMotto)
        .containsExactly("Testing", "rocks", "Debugging", "sucks")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: testPatterningMotto (Alternative Scenario: testPatterningMotto=1 )

Project: guava
 Class: SplitterTest
 Method: testCharacterSplitEmptyTokenOmitEmptyStrings
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters = Splitter.on('.').omitEmptyStrings().trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithTrim
 Body: {
    String jacksons =
        "arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, " + "ofar(Jemaine), aff(Tito)";
    Iterable<String> family =
        Splitter.on(",")
            .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace()))
            .split(jacksons);
    assertThat(family)
        .containsExactly("(Marlon)", "(Michael)", "(Jackie)", "(Jemaine)", "(Tito)")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: or=1 ) - Predicate: N/A - Scenario: jacksons (Alternative Scenario: jacksons=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSplitIntoChars
 Body: {
    String simple = "abcd";
    Iterable<String> letters = Splitter.fixedLength(1).split(simple);
    assertThat(letters).containsExactly("a", "b", "c", "d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim1
 Body: {
    String text = ",,a,,  , b ,, c,d ";
    Iterable<String> items = COMMA_SPLITTER.limit(1).omitEmptyStrings().trimResults().split(text);
    assertThat(items).containsExactly("a,,  , b ,, c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsOmitEmpty
 Body: {
    String text = "a,,,b,,c,d";
    Iterable<String> items = COMMA_SPLITTER.limit(2).omitEmptyStrings().split(text);
    assertThat(items).containsExactly("a", "b,,c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitEmptyTokenOmitEmptyStrings
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters =
        Splitter.on(literalDotPattern()).omitEmptyStrings().trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: literalDotPattern=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitMatchingIsGreedy
 Body: {
    String longDelimiter = "a, b,   c";
    Iterable<String> letters = Splitter.on(Pattern.compile(",\\s*")).split(longDelimiter);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWordBoundary_singleWordInput
 Body: {
    String string = "foo";
    Iterable<String> words = Splitter.on(Pattern.compile("\\b")).split(string);
    assertThat(words).containsExactly("foo").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: string (Alternative Scenario: string=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsOmitEmpty3
 Body: {
    String text = "a,,,b,,c,d";
    Iterable<String> items = COMMA_SPLITTER.limit(3).omitEmptyStrings().split(text);
    assertThat(items).containsExactly("a", "b", "c,d").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithDoubleDelimiterOmitEmptyStrings
 Body: {
    String doubled = "a..b.c";
    Iterable<String> letters = Splitter.on(".").omitEmptyStrings().split(doubled);
    assertThat(letters).containsExactly("a", "b", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: doubled (Alternative Scenario: doubled=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitOne
 Body: {
    String simple = "abcd";
    Iterable<String> letters = Splitter.fixedLength(1).limit(1).split(simple);
    assertThat(letters).containsExactly("abcd").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testStringSplitWithMultipleLetters
 Body: {
    Iterable<String> testStringingMotto = Splitter.on("-").split("Testing-rocks-Debugging-sucks");
    assertThat(testStringingMotto)
        .containsExactly("Testing", "rocks", "Debugging", "sucks")
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: testStringingMotto (Alternative Scenario: testStringingMotto=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSplitEqualChunkLength
 Body: {
    String simple = "abcdef";
    Iterable<String> letters = Splitter.fixedLength(2).split(simple);
    assertThat(letters).containsExactly("ab", "cd", "ef").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitWithLongTrailingDelimiter
 Body: {
    String longDelimiter = "a, b, c/ ";
    Iterable<String> letters = Splitter.on(Pattern.compile("[,/]\\s")).split(longDelimiter);
    assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: longDelimiter (Alternative Scenario: longDelimiter=1 )

Project: guava
 Class: SplitterTest
 Method: testLimitExtraSeparatorsTrim1EmptyOmit
 Body: {
    String text = "";
    Iterable<String> items = COMMA_SPLITTER.omitEmptyStrings().limit(1).split(text);
    assertThat(items).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: text (Alternative Scenario: text=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSimpleSplitWithNoDelimiter
 Body: {
    String simple = "a,b,c";
    Iterable<String> letters = Splitter.onPattern("foo").split(simple);
    assertThat(letters).containsExactly("a,b,c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: split=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testFixedLengthSplitSmallerString
 Body: {
    String simple = "ab";
    Iterable<String> letters = Splitter.fixedLength(3).split(simple);
    assertThat(letters).containsExactly("ab").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: fixedLength=1 ) - Predicate: N/A - Scenario: simple (Alternative Scenario: simple=1 )

Project: guava
 Class: SplitterTest
 Method: testPatternSplitEmptyToken
 Body: {
    String emptyToken = "a. .c";
    Iterable<String> letters = Splitter.on(literalDotPattern()).trimResults().split(emptyToken);
    assertThat(letters).containsExactly("a", "", "c").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: literalDotPattern=1 ) - Predicate: N/A - Scenario: emptyToken (Alternative Scenario: emptyToken=1 )

Project: guava
 Class: IntsTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<int[]> comparator = Ints.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: CharSinkTest
 Method: testWriteLines_withDefaultSeparator
 Body: {
    sink.writeLines(ImmutableList.of("foo", "bar", "baz"));
    String separator = System.getProperty("line.separator");
    assertEquals("foo" + separator + "bar" + separator + "baz" + separator, sink.getString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: getProperty=1 ) - Predicate: getString - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: CharSinkTest
 Method: testWriteLines_stream_separator
 Body: {
    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream(), "!");
    assertEquals("foo!bar!baz!", sink.getString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: stream=1 ) - Predicate: getString - Scenario: sink (Alternative Scenario:  )

Project: guava
 Class: CharSinkTest
 Method: testWriteLines_withSpecificSeparator
 Body: {
    sink.writeLines(ImmutableList.of("foo", "bar", "baz"), "\n");
    assertEquals("foo\nbar\nbaz\n", sink.getString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: writeLines=1 ) - Predicate: getString - Scenario: sink (Alternative Scenario:  )

Project: guava
 Class: CharSinkTest
 Method: testWriteLines_stream
 Body: {
    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream());
    String separator = System.getProperty("line.separator");
    assertEquals("foo" + separator + "bar" + separator + "baz" + separator, sink.getString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeLines (Alternative Action: getProperty=1 ) - Predicate: getString - Scenario: separator (Alternative Scenario: separator=1 )

Project: guava
 Class: IntMathTest
 Method: testMaxSignedPowerOfTwo
 Body: {
    assertTrue(IntMath.isPowerOfTwo(IntMath.MAX_SIGNED_POWER_OF_TWO));

    // Extra work required to make GWT happy.
    long value = IntMath.MAX_SIGNED_POWER_OF_TWO * 2L;
    assertFalse(IntMath.isPowerOfTwo((int) value));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isPowerOfTwo=2 ) - Predicate: isPowerOfTwo - Scenario: value (Alternative Scenario: value=1 )

Project: guava
 Class: SafeTreeSetTest
 Method: testEmpty_serialization
 Body: {
    SortedSet<String> set = new SafeTreeSet<>();
    SortedSet<String> copy = SerializableTester.reserializeAndAssert(set);
    assertEquals(set.comparator(), copy.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=2 ) - Predicate: comparator - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ConcurrentMapReplaceEntryTester
 Method: testReplaceEntry_supportedPresentUnchanged
 Body: {
    assertTrue(getMap().replace(k0(), v0(), v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: v0=2 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceEntryTester
 Method: testReplaceEntry_supportedPresent
 Body: {
    assertTrue(getMap().replace(k0(), v0(), v3()));
    expectReplacement(entry(k0(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: k0=2 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceEntryTester
 Method: testReplaceEntry_supportedAbsentKey
 Body: {
    assertFalse(getMap().replace(k3(), v3(), v4()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceEntryTester
 Method: testReplaceEntry_supportedWrongValue
 Body: {
    assertFalse(getMap().replace(k0(), v3(), v4()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapReplaceEntryTester
 Method: testReplaceEntry_nullDifferentFromAbsent
 Body: {
    assertFalse(getMap().replace(k3(), null, v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: replace - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveEntryTester
 Method: testRemoveAbsent
 Body: {
    assertFalse(multimap().remove(k0(), v1()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveEntryTester
 Method: testRemoveNullKeyAbsent
 Body: {
    assertFalse(multimap().remove(null, v0()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: v0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultimapRemoveEntryTester
 Method: testRemoveNullValueAbsent
 Body: {
    assertFalse(multimap().remove(k0(), null));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: remove - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapContainsValueTester
 Method: testContains_nonNullWhenNullContained
 Body: {
    initMapWithNullValue();
    assertFalse("containsValue(notPresent) should return false", getMap().containsValue(v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: initMapWithNullValue=1 ) - Predicate: containsValue - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapContainsValueTester
 Method: testContains_nullContained
 Body: {
    initMapWithNullValue();
    assertTrue("containsValue(null) should return true", getMap().containsValue(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: initMapWithNullValue=1 ) - Predicate: containsValue - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash32Test
 Method: testInvalidUnicodeHashString
 Body: {
    String str =
        new String(
            new char[] {'a', Character.MIN_HIGH_SURROGATE, Character.MIN_HIGH_SURROGATE, 'z'});
    assertEquals(
        murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8)),
        murmur3_32().hashString(str, Charsets.UTF_8));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: murmur3_32=2 ) - Predicate: hashBytes - Scenario: str (Alternative Scenario: str=1 )

Project: guava
 Class: Murmur3Hash32Test
 Method: testInvalidUnicodeHasherPutString
 Body: {
    String str =
        new String(
            new char[] {'a', Character.MIN_HIGH_SURROGATE, Character.MIN_HIGH_SURROGATE, 'z'});
    assertEquals(
        murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8)),
        murmur3_32().newHasher().putString(str, Charsets.UTF_8).hash());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: murmur3_32=2 ) - Predicate: hashBytes - Scenario: str (Alternative Scenario: str=1 )

Project: guava
 Class: GeneralRangeTest
 Method: testIntersectNonOverlappingRange
 Body: {
    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);
    assertTrue(range.intersect(GeneralRange.range(ORDERING, 5, CLOSED, 6, CLOSED)).isEmpty());
    assertTrue(range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 2, OPEN)).isEmpty());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: range=3 ) - Predicate: isEmpty - Scenario: range (Alternative Scenario: range=1 )

Project: guava
 Class: GeneralRangeTest
 Method: testIntersectOverlappingRange
 Body: {
    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);
    assertEquals(
        GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED),
        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 5, CLOSED)));
    assertEquals(
        GeneralRange.range(ORDERING, 2, OPEN, 3, OPEN),
        range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 3, OPEN)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: range=5 ) - Predicate: range - Scenario: range (Alternative Scenario: range=1 )

Project: guava
 Class: GeneralRangeTest
 Method: testIntersectAgainstSmallerRange
 Body: {
    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN);
    assertEquals(
        GeneralRange.range(ORDERING, 3, CLOSED, 4, OPEN),
        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: range=3 ) - Predicate: range - Scenario: range (Alternative Scenario: range=1 )

Project: guava
 Class: GeneralRangeTest
 Method: testIntersectAgainstMatchingEndpointsRange
 Body: {
    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN);
    assertEquals(
        GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),
        range.intersect(GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: range=3 ) - Predicate: range - Scenario: range (Alternative Scenario: range=1 )

Project: guava
 Class: MapComputeIfPresentTester
 Method: testComputeIfPresent_supportedAbsent
 Body: {
    assertNull(
        "computeIfPresent(notPresent, function) should return null",
        getMap()
            .computeIfPresent(
                k3(),
                (k, v) -> {
                  throw new AssertionFailedError();
                }));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k3=1 ) - Predicate: computeIfPresent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfPresentTester
 Method: testComputeIfPresent_nullTreatedAsAbsent
 Body: {
    initMapWithNullValue();
    assertNull(
        "computeIfPresent(presentAssignedToNull, function) should return null",
        getMap()
            .computeIfPresent(
                getKeyForNullValue(),
                (k, v) -> {
                  throw new AssertionFailedError();
                }));
    expectReplacement(entry(getKeyForNullValue(), null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: getKeyForNullValue=2 ) - Predicate: computeIfPresent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfPresentTester
 Method: testComputeIfPresent_supportedPresent
 Body: {
    assertEquals(
        "computeIfPresent(present, function) should return new value",
        v3(),
        getMap()
            .computeIfPresent(
                k0(),
                (k, v) -> {
                  assertEquals(k0(), k);
                  assertEquals(v0(), v);
                  return v3();
                }));
    expectReplacement(entry(k0(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectReplacement (Alternative Action: k0=3 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfPresentTester
 Method: testComputeIfPresent_nullKeySupportedAbsent
 Body: {
    assertNull(
        "computeIfPresent(null, function) should return null",
        getMap()
            .computeIfPresent(
                null,
                (k, v) -> {
                  throw new AssertionFailedError();
                }));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: computeIfPresent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapComputeIfPresentTester
 Method: testComputeIfPresent_functionReturnsNull
 Body: {
    assertNull(
        "computeIfPresent(present, returnsNull) should return null",
        getMap()
            .computeIfPresent(
                k0(),
                (k, v) -> {
                  assertEquals(k0(), k);
                  assertEquals(v0(), v);
                  return null;
                }));
    expectMissing(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectMissing (Alternative Action: k0=2 ) - Predicate: computeIfPresent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testEmptyMultimapWrites
 Body: {
    Multimap<String, Integer> multimap = ImmutableSetMultimap.of();
    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, "foo", 1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testMultimapWrites
 Body: {
    Multimap<String, Integer> multimap = createMultimap();
    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, "bar", 2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createMultimap=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testBuilder_withImmutableEntry
 Body: {
    ImmutableSetMultimap<String, Integer> multimap =
        new Builder<String, Integer>().put(Maps.immutableEntry("one", 1)).build();
    assertEquals(ImmutableSet.of(1), multimap.get("one"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: build=1 ) - Predicate: of - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testInverseMinimizesWork
 Body: {
    ImmutableSetMultimap<String, Character> multimap =
        ImmutableSetMultimap.of("of", 'o', "of", 'f', "to", 't', "to", 'o');
    assertSame(multimap.inverse(), multimap.inverse());
    assertSame(multimap, multimap.inverse().inverse());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: inverse=4 ) - Predicate: inverse - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testCopyOfImmutableSetMultimap
 Body: {
    Multimap<String, Integer> multimap = createMultimap();
    assertSame(multimap, ImmutableSetMultimap.copyOf(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createMultimap=1 ) - Predicate: copyOf - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testEmptySerialization
 Body: {
    Multimap<String, Integer> multimap = ImmutableSetMultimap.of();
    assertSame(multimap, SerializableTester.reserialize(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: reserialize - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: ArrayTableTest
 Method: testColumnKeyList
 Body: {
    ArrayTable<String, Integer, Character> table =
        create("foo", 1, 'a', "bar", 1, 'b', "foo", 3, 'c');
    assertThat(table.columnKeyList()).containsExactly(1, 2, 3).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=1 ) - Predicate: N/A - Scenario: table (Alternative Scenario: table=1 )

Project: guava
 Class: ArrayTableTest
 Method: testRowKeyList
 Body: {
    ArrayTable<String, Integer, Character> table =
        create("foo", 1, 'a', "bar", 1, 'b', "foo", 3, 'c');
    assertThat(table.rowKeyList()).containsExactly("foo", "bar", "cat").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: rowKeyList=1 ) - Predicate: N/A - Scenario: table (Alternative Scenario: table=1 )

Project: guava
 Class: ArrayTableTest
 Method: testEmptyToArry
 Body: {
    ArrayTable<String, String, Character> table =
        ArrayTable.create(Arrays.<String>asList(), Arrays.<String>asList());
    assertThat(table.toArray(Character.class)).asList().isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: N/A - Scenario: table (Alternative Scenario: table=1 )

Project: guava
 Class: ConfigurableUndirectedNetworkTest
 Method: adjacentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentNodes(N1)).containsExactly(N1, N2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedNetworkTest
 Method: incidentNodes_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentNodes(E11).nodeU()).isEqualTo(N1);
    assertThat(network.incidentNodes(E11).nodeV()).isEqualTo(N1);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentNodes=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedNetworkTest
 Method: incidentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.incidentEdges(N1)).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: incidentEdges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedNetworkTest
 Method: edges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    assertThat(network.edges()).containsExactly(E11);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: edges=1 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedNetworkTest
 Method: adjacentEdges_selfLoop
 Body: {
    addEdge(N1, N1, E11);
    addEdge(N1, N2, E12);
    assertThat(network.adjacentEdges(E11)).containsExactly(E12);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testWriteBytesToOversizedArrayShortMaxLength
 Body: {
    byte[] dest = new byte[5];
    HASH_ABCD.writeBytesTo(dest, 0, 3);
    assertTrue(
        Arrays.equals(
            new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0x00, (byte) 0x00}, dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: equals=1 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testRoundTripHashCodeUsingFromString
 Body: {
    HashCode hash1 = Hashing.sha1().hashString("foo", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromString(hash1.toString());
    assertEquals(hash1, hash2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sha1=1 ) - Predicate: N/A - Scenario: hash1 (Alternative Scenario: hash2=1 )

Project: guava
 Class: HashCodeTest
 Method: testIntWriteBytesTo
 Body: {
    byte[] dest = new byte[4];
    HashCode.fromInt(42).writeBytesTo(dest, 0, 4);
    assertTrue(Arrays.equals(HashCode.fromInt(42).asBytes(), dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: fromInt=2 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testLongWriteBytesTo
 Body: {
    byte[] dest = new byte[8];
    HashCode.fromLong(42).writeBytesTo(dest, 0, 8);
    assertTrue(Arrays.equals(HashCode.fromLong(42).asBytes(), dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: fromLong=2 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testToString
 Body: {
    byte[] data = new byte[] {127, -128, 5, -1, 14};
    assertEquals("7f8005ff0e", HashCode.fromBytes(data).toString());
    assertEquals("7f8005ff0e", base16().lowerCase().encode(data));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: encode=1 ) - Predicate: encode - Scenario: data (Alternative Scenario: data=1 )

Project: guava
 Class: HashCodeTest
 Method: testWriteBytesToOversizedArray
 Body: {
    byte[] dest = new byte[5];
    HASH_ABCD.writeBytesTo(dest, 0, 4);
    assertTrue(
        Arrays.equals(
            new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0x00}, dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: equals=1 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testObjectHashCode
 Body: {
    HashCode hashCode42 = HashCode.fromInt(42);
    assertEquals(42, hashCode42.hashCode());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: hashCode=1 ) - Predicate: hashCode - Scenario: hashCode42 (Alternative Scenario: hashCode42=1 )

Project: guava
 Class: HashCodeTest
 Method: testWriteBytesTo
 Body: {
    byte[] dest = new byte[4];
    HASH_ABCD.writeBytesTo(dest, 0, 4);
    assertTrue(
        Arrays.equals(new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd}, dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: equals=1 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testRoundTripHashCodeUsingBaseEncoding
 Body: {
    HashCode hash1 = Hashing.sha1().hashString("foo", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(hash1.toString()));
    assertEquals(hash1, hash2);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: sha1=1 ) - Predicate: N/A - Scenario: hash1 (Alternative Scenario: hash2=1 )

Project: guava
 Class: HashCodeTest
 Method: testWriteBytesToUndersizedArrayShortMaxLength
 Body: {
    byte[] dest = new byte[3];
    HASH_ABCD.writeBytesTo(dest, 0, 2);
    assertTrue(Arrays.equals(new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0x00}, dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: equals=1 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: HashCodeTest
 Method: testWriteBytesToOversizedArrayLongMaxLength
 Body: {
    byte[] dest = new byte[5];
    HASH_ABCD.writeBytesTo(dest, 0, 5);
    assertTrue(
        Arrays.equals(
            new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0x00}, dest));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: writeBytesTo (Alternative Action: equals=1 ) - Predicate: equals - Scenario: dest (Alternative Scenario: dest=1 )

Project: guava
 Class: MapMakerInternalMapTest
 Method: testSetWeakKeys
 Body: {
    MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker().weakKeys());
    checkStrength(map, Strength.WEAK, Strength.STRONG);
    assertThat(map.entryHelper)
        .isInstanceOf(MapMakerInternalMap.WeakKeyStrongValueEntry.Helper.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: checkStrength (Alternative Action: weakKeys=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MapMakerInternalMapTest
 Method: testSetWeakValues
 Body: {
    MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker().weakValues());
    checkStrength(map, Strength.STRONG, Strength.WEAK);
    assertThat(map.entryHelper)
        .isInstanceOf(MapMakerInternalMap.StrongKeyWeakValueEntry.Helper.class);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: checkStrength (Alternative Action: weakValues=1 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: MultisetReadsTester
 Method: testEquals_differentSize
 Body: {
    Multiset<E> other = HashMultiset.create(getSampleElements());
    other.add(e0());
    assertFalse("multiset equals a multiset with a different size", getMultiset().equals(other));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: add (Alternative Action: add=1 ) - Predicate: equals - Scenario: other (Alternative Scenario: other=1 )

Project: guava
 Class: QueueOfferTester
 Method: testOffer_supportedNotPresent
 Body: {
    assertTrue("offer(notPresent) should return true", getQueue().offer(e3()));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=2 ) - Predicate: offer - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: QueueOfferTester
 Method: testOffer_nullSupported
 Body: {
    assertTrue("offer(null) should return true", getQueue().offer(null));
    expectAdded((E) null);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: offer=1 ) - Predicate: offer - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testFalseRecursiveType_mappingOnTheSameDeclarationNotUsed
 Body: {
    Type returnType =
        genericReturnType(WithFalseRecursiveType.class, "keyShouldNotResolveToStringList");
    TypeToken<?> keyType =
        TypeToken.of(returnType).resolveType(WithFalseRecursiveType.class.getTypeParameters()[0]);
    assertEquals("java.util.List<V>", keyType.getType().toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: toString - Scenario: returnType (Alternative Scenario: keyType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testFalseRecursiveType_referenceOfSubtypeDoesNotConfuseMe
 Body: {
    Type returnType = genericReturnType(WithFalseRecursiveType.class, "evenSubtypeWorks");
    TypeToken<?> keyType =
        TypeToken.of(returnType).resolveType(WithFalseRecursiveType.class.getTypeParameters()[0]);
    assertEquals("java.util.List<java.util.List<V>>", keyType.getType().toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: toString - Scenario: returnType (Alternative Scenario: keyType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testWithGenericLowerBoundInWildcard
 Body: {
    WildcardType wildcardType =
        (WildcardType) new WithGenericBound<String>() {}.getTargetType("withWildcardLowerBound");
    assertEquals(String.class, wildcardType.getLowerBounds()[0]);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getTargetType=1 ) - Predicate: N/A - Scenario: wildcardType (Alternative Scenario: wildcardType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testWithRecursiveBoundInTypeVariable
 Body: {
    TypeVariable<?> typeVariable =
        (TypeVariable<?>) new WithGenericBound<String>() {}.getTargetType("withRecursiveBound");
    assertEquals(Types.newParameterizedType(Enum.class, typeVariable), typeVariable.getBounds()[0]);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getTargetType=1 ) - Predicate: newParameterizedType - Scenario: typeVariable (Alternative Scenario: typeVariable=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testClassWrapper
 Body: {
    TypeToken<String> typeExpression = TypeToken.of(String.class);
    assertEquals(String.class, typeExpression.getType());
    assertEquals(String.class, typeExpression.getRawType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRawType=1 ) - Predicate: getRawType - Scenario: typeExpression (Alternative Scenario: typeExpression=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testFalseRecursiveType_notRealRecursiveMapping
 Body: {
    Type returnType = genericReturnType(WithFalseRecursiveType.class, "shouldNotCauseInfiniteLoop");
    TypeToken<?> keyType =
        TypeToken.of(returnType).resolveType(WithFalseRecursiveType.class.getTypeParameters()[0]);
    assertEquals("java.util.List<K>", keyType.getType().toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: toString - Scenario: returnType (Alternative Scenario: keyType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testWithGenericUpperBoundInWildcard
 Body: {
    WildcardType wildcardType =
        (WildcardType) new WithGenericBound<String>() {}.getTargetType("withWildcardUpperBound");
    assertEquals(String.class, wildcardType.getUpperBounds()[0]);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getTargetType=1 ) - Predicate: N/A - Scenario: wildcardType (Alternative Scenario: wildcardType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testWithGenericBoundInTypeVariable
 Body: {
    TypeVariable<?> typeVariable =
        (TypeVariable<?>) new WithGenericBound<String>() {}.getTargetType("withTypeVariable");
    assertEquals(String.class, typeVariable.getBounds()[0]);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getTargetType=1 ) - Predicate: N/A - Scenario: typeVariable (Alternative Scenario: typeVariable=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testInnerClassWithParameterizedOwner
 Body: {
    Type fieldType = ParameterizedOuter.class.getField("field").getGenericType();
    assertEquals(
        fieldType, TypeToken.of(ParameterizedOuter.class).resolveType(fieldType).getType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: getType - Scenario: fieldType (Alternative Scenario: fieldType=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testGenericArrayType
 Body: {
    GenericArray<?> genericArray = new GenericArray<>();
    assertEquals(GenericArray.class.getTypeParameters()[0], genericArray.t);
    assertEquals(Types.newArrayType(genericArray.t), genericArray.array);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayType=1 ) - Predicate: newArrayType - Scenario: genericArray (Alternative Scenario: genericArray=1 )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testFalseRecursiveType_intermediaryTypeMappingDoesNotConfuseMe
 Body: {
    Type returnType =
        genericReturnType(SubtypeOfWithFalseRecursiveType.class, "revertKeyAndValueTypes");
    TypeToken<?> keyType =
        TypeToken.of(returnType).resolveType(WithFalseRecursiveType.class.getTypeParameters()[0]);
    assertEquals("java.util.List<K1>", keyType.getType().toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolveType=1 ) - Predicate: toString - Scenario: returnType (Alternative Scenario: keyType=1 )

Project: guava
 Class: TransposedTableTest
 Method: testTransposeTransposed
 Body: {
    Table<Integer, String, Character> original = HashBasedTable.create();
    assertSame(original, Tables.transpose(Tables.transpose(original)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transpose=2 ) - Predicate: transpose - Scenario: original (Alternative Scenario: original=1 )

Project: guava
 Class: MapsTransformValuesTest
 Method: testTransformIdentityFunctionEquality
 Body: {
    Map<String, Integer> underlying = ImmutableMap.of("a", 1);
    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());
    assertMapsEqual(underlying, map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: N/A - Scenario: underlying (Alternative Scenario: underlying=1 )

Project: guava
 Class: MapsTransformValuesTest
 Method: testTransformEmptyMapEquality
 Body: {
    Map<String, String> map =
        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());
    assertMapsEqual(Maps.newHashMap(), map);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: transformValues=1 ) - Predicate: newHashMap - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: InetAddressesTest
 Method: testForUriStringIPv4Mapped
 Body: {
    Inet4Address expected = (Inet4Address) InetAddresses.forString("192.0.2.1");
    assertEquals(expected, InetAddresses.forUriString("[::ffff:192.0.2.1]"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forUriString=1 ) - Predicate: forUriString - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: InetAddressesTest
 Method: testToUriStringIPv4
 Body: {
    String ipStr = "1.2.3.4";
    InetAddress ip = InetAddresses.forString(ipStr);
    assertEquals("1.2.3.4", InetAddresses.toUriString(ip));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toUriString=1 ) - Predicate: toUriString - Scenario: ipStr (Alternative Scenario: ipStr=1 )

Project: guava
 Class: InetAddressesTest
 Method: testForUriStringIPv4
 Body: {
    Inet4Address expected = (Inet4Address) InetAddresses.forString("192.168.1.1");
    assertEquals(expected, InetAddresses.forUriString("192.168.1.1"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forUriString=1 ) - Predicate: forUriString - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: InetAddressesTest
 Method: testToInteger
 Body: {
    InetAddress ipv4Addr = InetAddresses.forString("127.0.0.1");
    assertEquals(0x7f000001, InetAddresses.coerceToInteger(ipv4Addr));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: coerceToInteger=1 ) - Predicate: coerceToInteger - Scenario: ipv4Addr (Alternative Scenario: ipv4Addr=1 )

Project: guava
 Class: InetAddressesTest
 Method: testForUriStringIPv6
 Body: {
    Inet6Address expected = (Inet6Address) InetAddresses.forString("3ffe:0:0:0:0:0:0:1");
    assertEquals(expected, InetAddresses.forUriString("[3ffe:0:0:0:0:0:0:1]"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: forUriString=1 ) - Predicate: forUriString - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: InetAddressesTest
 Method: testToUriStringIPv6
 Body: {
    // Unfortunately the InetAddress.toString() method for IPv6 addresses
    // does not collapse contiguous shorts of zeroes with the :: abbreviation.
    String ipStr = "3ffe::1";
    InetAddress ip = InetAddresses.forString(ipStr);
    assertEquals("[3ffe::1]", InetAddresses.toUriString(ip));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toUriString=1 ) - Predicate: toUriString - Scenario: ipStr (Alternative Scenario: ipStr=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_comparator
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH, asList("in", "the", "quick", "jumped", "over", "a"));
    assertSame(STRING_LENGTH, set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: comparator - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_last
 Body: {
    SortedSet<String> set = of("e", "f", "b", "d", "c");
    assertEquals("f", set.last());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: last - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_last
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "jumped", "over", "a")
            .build();
    assertEquals("jumped", set.last());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: last - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEmpty_comparator
 Body: {
    SortedSet<String> set = of();
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testReverseOrder
 Body: {
    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder().add("a", "b", "c").build();
    assertThat(set).containsExactly("c", "b", "a").inOrder();
    assertTrue(Comparators.isInOrder(Arrays.asList("c", "b", "a"), set.comparator()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: isInOrder - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_first
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "jumped", "over", "a")
            .build();
    assertEquals("a", set.first());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: first - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_sortedSet_ordering
 Body: {
    SortedSet<String> set = copyOf(Sets.newTreeSet(asList("e", "a", "f", "b", "d", "c")));
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEmpty_headSet
 Body: {
    SortedSet<String> set = of();
    assertSame(set, set.headSet("c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: headSet=1 ) - Predicate: headSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testLegacyComparable_copyOf_iterator
 Body: {
    ImmutableSortedSet<LegacyComparable> set =
        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD.iterator());
    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_FORWARD, set));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: elementsEqual - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSingle_first
 Body: {
    SortedSet<String> set = of("e");
    assertEquals("e", set.first());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: first - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_sortedSet_comparator
 Body: {
    SortedSet<String> set = copyOf(Sets.<String>newTreeSet());
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_iterator_ordering
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH, asIterator("in", "the", "quick", "jumped", "over", "a"));
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asIterator=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEmpty_serialization
 Body: {
    SortedSet<String> set = of();
    SortedSet<String> copy = SerializableTester.reserialize(set);
    assertSame(set, copy);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_comparator
 Body: {
    SortedSet<String> set = copyOf(asList("e", "a", "f", "b", "d", "c"));
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_ordering_dupes
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH,
            asList("in", "the", "quick", "brown", "fox", "jumped", "over", "a", "lazy", "dog"));
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_comparator
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "jumped", "over", "a")
            .build();
    assertSame(STRING_LENGTH, set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: comparator - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEquals_bothDefaultOrdering_StringVsInt
 Body: {
    SortedSet<String> set = of("a", "b", "c");
    assertFalse(set.equals(Sets.newTreeSet(asList(4, 5, 6))));
    assertNotEqualLenient(Sets.newTreeSet(asList(4, 5, 6)), set);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=2 ) - Predicate: newTreeSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSingle_last
 Body: {
    SortedSet<String> set = of("e");
    assertEquals("e", set.last());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: last - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEmpty_subSet
 Body: {
    SortedSet<String> set = of();
    assertSame(set, set.subSet("c", "f"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: subSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_ordering_dupes
 Body: {
    SortedSet<String> set = copyOf(asList("e", "a", "e", "f", "b", "b", "d", "a", "c"));
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_iterator_comparator
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH, asIterator("in", "the", "quick", "jumped", "over", "a"));
    assertSame(STRING_LENGTH, set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: comparator - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_containsMismatchedTypes
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "jumped", "over", "a")
            .build();
    assertFalse(set.contains(3.7));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_iterator_comparator
 Body: {
    SortedSet<String> set = copyOf(asIterator("e", "a", "f", "b", "d", "c"));
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_ordering_dupes
 Body: {
    SortedSet<String> set = of("e", "a", "e", "f", "b", "b", "d", "a", "c");
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSingle_serialization
 Body: {
    SortedSet<String> set = of("e");
    SortedSet<String> copy = SerializableTester.reserializeAndAssert(set);
    assertEquals(set.comparator(), copy.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=2 ) - Predicate: comparator - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfSorted_natural_ordering
 Body: {
    SortedSet<String> input = Sets.newTreeSet(asList("in", "the", "quick", "jumped", "over", "a"));
    SortedSet<String> set = ImmutableSortedSet.copyOfSorted(input);
    assertThat(set).containsExactly("a", "in", "jumped", "over", "quick", "the").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: input=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSingle_comparator
 Body: {
    SortedSet<String> set = of("e");
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_ordering
 Body: {
    SortedSet<String> set = copyOf(asList("e", "a", "f", "b", "d", "c"));
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfSorted_natural_comparator
 Body: {
    SortedSet<String> input = Sets.newTreeSet(asList("in", "the", "quick", "jumped", "over", "a"));
    SortedSet<String> set = ImmutableSortedSet.copyOfSorted(input);
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: input (Alternative Scenario: input=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEmpty_tailSet
 Body: {
    SortedSet<String> set = of();
    assertSame(set, set.tailSet("f"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: tailSet=1 ) - Predicate: tailSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_first
 Body: {
    SortedSet<String> set = of("e", "f", "b", "d", "c");
    assertEquals("b", set.first());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: first - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testEquals_bothExplicitOrdering_StringVsInt
 Body: {
    SortedSet<String> set = of("in", "the", "a");
    assertFalse(set.equals(Sets.newTreeSet(asList(4, 5, 6))));
    assertNotEqualLenient(Sets.newTreeSet(asList(4, 5, 6)), set);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newTreeSet=2 ) - Predicate: newTreeSet - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSupertypeComparator
 Body: {
    SortedSet<Integer> set =
        new ImmutableSortedSet.Builder<Integer>(TO_STRING).add(3, 12, 101, 44).build();
    assertThat(set).containsExactly(101, 12, 3, 44).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testLegacyComparable_copyOf_collection
 Body: {
    ImmutableSortedSet<LegacyComparable> set =
        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);
    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_FORWARD, set));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: elementsEqual=1 ) - Predicate: elementsEqual - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_ordering
 Body: {
    SortedSet<String> set = of("e", "a", "f", "b", "d", "c");
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_iterator_ordering_dupes
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH,
            asIterator("in", "the", "quick", "brown", "fox", "jumped", "over", "a", "lazy", "dog"));
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asIterator=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_ordering
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "jumped", "over", "a")
            .build();
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_iterator_ordering
 Body: {
    SortedSet<String> set = copyOf(asIterator("e", "a", "f", "b", "d", "c"));
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asIterator=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testSupertypeComparatorSubtypeElements
 Body: {
    SortedSet<Number> set =
        new ImmutableSortedSet.Builder<Number>(TO_STRING).add(3, 12, 101, 44).build();
    assertThat(set).containsExactly(101, 12, 3, 44).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOfExplicit_ordering
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.copyOf(
            STRING_LENGTH, asList("in", "the", "quick", "jumped", "over", "a"));
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: copyOf=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_comparator
 Body: {
    SortedSet<String> set = of("e", "a", "f", "b", "d", "c");
    assertSame(Ordering.natural(), set.comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=1 ) - Predicate: natural - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testCopyOf_iterator_ordering_dupes
 Body: {
    SortedSet<String> set = copyOf(asIterator("e", "a", "e", "f", "b", "b", "d", "a", "c"));
    assertThat(set).containsExactly("a", "b", "c", "d", "e", "f").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asIterator=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testExplicit_ordering_dupes
 Body: {
    SortedSet<String> set =
        ImmutableSortedSet.orderedBy(STRING_LENGTH)
            .add("in", "the", "quick", "brown", "fox", "jumped", "over", "a", "lazy", "dog")
            .build();
    assertThat(set).containsExactly("a", "in", "the", "over", "quick", "jumped").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: add=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testEntriesIteration
 Body: {
    @SuppressWarnings("unchecked")
    Set<Entry<String, Integer>> set =
        Sets.newLinkedHashSet(
            asList(
                Maps.immutableEntry("foo", 2),
                Maps.immutableEntry("foo", 3),
                Maps.immutableEntry("bar", 4),
                Maps.immutableEntry("bar", 5),
                Maps.immutableEntry("foo", 6)));

    new IteratorTester<Entry<String, Integer>>(
        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {
      private Multimap<String, Integer> multimap;

      @Override
      protected Iterator<Entry<String, Integer>> newTargetIterator() {
        multimap = LinkedHashMultimap.create();
        multimap.putAll("foo", asList(2, 3));
        multimap.putAll("bar", asList(4, 5));
        multimap.putAll("foo", asList(6));
        return multimap.entries().iterator();
      }

      @Override
      protected void verify(List<Entry<String, Integer>> elements) {
        assertEquals(newHashSet(elements), multimap.entries());
      }
    }.test();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=5 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testKeysToString_ordering
 Body: {
    Multimap<String, Integer> multimap = initializeMultimap5();
    assertEquals("[foo x 2, bar x 2, cow]", multimap.keys().toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: keys=1 ) - Predicate: toString - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testOrderingReadOnly
 Body: {
    Multimap<String, Integer> multimap = initializeMultimap5();
    assertOrderingReadOnly(multimap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: initializeMultimap5=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testPutMultimapOrdered
 Body: {
    Multimap<String, Integer> multimap = LinkedHashMultimap.create();
    multimap.putAll(initializeMultimap5());
    assertOrderingReadOnly(multimap);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: putAll (Alternative Action: initializeMultimap5=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testSerializationOrdering
 Body: {
    Multimap<String, Integer> multimap = initializeMultimap5();
    Multimap<String, Integer> copy = SerializableTester.reserializeAndAssert(multimap);
    assertOrderingReadOnly(copy);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: initializeMultimap5=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: copy=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testOrderingSynchronized
 Body: {
    Multimap<String, Integer> multimap = initializeMultimap5();
    assertOrderingReadOnly(Multimaps.synchronizedMultimap(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: initializeMultimap5=1 ) - Predicate: synchronizedMultimap - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testOrderingUnmodifiable
 Body: {
    Multimap<String, Integer> multimap = initializeMultimap5();
    assertOrderingReadOnly(Multimaps.unmodifiableMultimap(multimap));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: unmodifiableMultimap=1 ) - Predicate: unmodifiableMultimap - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: LinkedHashMultimapTest
 Method: testAsSetIteration
 Body: {
    @SuppressWarnings("unchecked")
    Set<Entry<String, Collection<Integer>>> set =
        newLinkedHashSet(
            asList(
                Maps.immutableEntry("foo", (Collection<Integer>) Sets.newHashSet(2, 3, 6)),
                Maps.immutableEntry("bar", (Collection<Integer>) Sets.newHashSet(4, 5, 10, 11)),
                Maps.immutableEntry("baz", (Collection<Integer>) Sets.newHashSet(7, 8)),
                Maps.immutableEntry("dog", (Collection<Integer>) Sets.newHashSet(9)),
                Maps.immutableEntry("cat", (Collection<Integer>) Sets.newHashSet(12, 13, 14))));
    new IteratorTester<Entry<String, Collection<Integer>>>(
        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {
      private Multimap<String, Integer> multimap;

      @Override
      protected Iterator<Entry<String, Collection<Integer>>> newTargetIterator() {
        multimap = LinkedHashMultimap.create();
        multimap.putAll("foo", asList(2, 3));
        multimap.putAll("bar", asList(4, 5));
        multimap.putAll("foo", asList(6));
        multimap.putAll("baz", asList(7, 8));
        multimap.putAll("dog", asList(9));
        multimap.putAll("bar", asList(10, 11));
        multimap.putAll("cat", asList(12, 13, 14));
        return multimap.asMap().entrySet().iterator();
      }

      @Override
      protected void verify(List<Entry<String, Collection<Integer>>> elements) {
        assertEquals(newHashSet(elements), multimap.asMap().entrySet());
      }
    }.test();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=8 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: TypeParameterTest
 Method: testCaptureTypeParameter
 Body: {
    TypeVariable<?> variable = new TypeParameter<T>() {}.typeVariable;
    TypeVariable<?> expected =
        TypeParameterTest.class.getDeclaredMethod("testCaptureTypeParameter")
            .getTypeParameters()[0];
    assertEquals(expected, variable);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getDeclaredMethod=1 ) - Predicate: N/A - Scenario: variable (Alternative Scenario: expected=1 )

Project: guava
 Class: ByteSourceTest
 Method: testHash
 Body: {
    ByteSource byteSource = new TestByteSource("hamburger\n".getBytes(Charsets.US_ASCII));

    // Pasted this expected string from `echo hamburger | md5sum`
    assertEquals("cfa0c5002275c90508338a5cdb2a9781", byteSource.hash(Hashing.md5()).toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=1 ) - Predicate: toString - Scenario: byteSource (Alternative Scenario: byteSource=1 )

Project: guava
 Class: ByteSourceTest
 Method: testRead_withProcessor_stopsOnFalse
 Body: {
    ByteProcessor<Void> processor =
        new ByteProcessor<Void>() {
          boolean firstCall = true;

          @Override
          public boolean processBytes(byte[] buf, int off, int len) throws IOException {
            assertTrue("consume() called twice", firstCall);
            firstCall = false;
            return false;
          }

          @Override
          public Void getResult() {
            return null;
          }
        };

    source.read(processor);
    assertTrue(source.wasStreamOpened() && source.wasStreamClosed());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: read (Alternative Action: wasStreamClosed=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario: processor=1 )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testCopyOf_iterable_collection_empty
 Body: {
    Iterable<Long> iterable = Collections.emptySet();
    assertThat(ImmutableLongArray.copyOf(iterable)).isSameAs(ImmutableLongArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testCopyOf_iterable_notCollection_empty
 Body: {
    Iterable<Long> iterable = iterable(Collections.<Long>emptySet());
    assertThat(ImmutableLongArray.copyOf(iterable)).isSameAs(ImmutableLongArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testCopyOf_collection_empty
 Body: {
    Collection<Long> iterable = Collections.emptySet();
    assertThat(ImmutableLongArray.copyOf(iterable)).isSameAs(ImmutableLongArray.of());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptySet=1 ) - Predicate: of - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testStream
 Body: {
    ImmutableLongArray.of().stream().forEach(i -> fail());
    ImmutableLongArray.of(0, 1, 3).subArray(1, 1).stream().forEach(i -> fail());
    assertThat(ImmutableLongArray.of(0, 1, 3).stream().toArray()).isEqualTo(new long[] {0, 1, 3});
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: stream=3 ) - Predicate: N/A - Scenario: ImmutableLongArray.of().stream() (Alternative Scenario:  )

Project: guava
 Class: SchedulerTest
 Method: testFixedDelaySchedule
 Body: {
      Scheduler schedule = newFixedDelaySchedule(initialDelay, delay, unit);
      Future<?> unused =
          schedule.schedule(
              null,
              new ScheduledThreadPoolExecutor(10) {
                @Override
                public ScheduledFuture<?> scheduleWithFixedDelay(
                    Runnable command, long initialDelay, long delay, TimeUnit unit) {
                  assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);
                  return null;
                }
              },
              testRunnable);
      assertTrue(called);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newFixedDelaySchedule=1 ) - Predicate: N/A - Scenario: schedule (Alternative Scenario: schedule=1 )

Project: guava
 Class: SchedulerTest
 Method: testFixedRateSchedule
 Body: {
      Scheduler schedule = Scheduler.newFixedRateSchedule(initialDelay, delay, unit);
      Future<?> unused =
          schedule.schedule(
              null,
              new ScheduledThreadPoolExecutor(1) {
                @Override
                public ScheduledFuture<?> scheduleAtFixedRate(
                    Runnable command, long initialDelay, long period, TimeUnit unit) {
                  assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);
                  return null;
                }
              },
              testRunnable);
      assertTrue(called);
    }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newFixedRateSchedule=1 ) - Predicate: N/A - Scenario: schedule (Alternative Scenario: schedule=1 )

Project: guava
 Class: TreeMultimapNaturalTest
 Method: testOrderedValues
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.values()).containsExactly(1, 3, 7, 2, 6, 0, 4).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createPopulate=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapNaturalTest
 Method: testComparators
 Body: {
    TreeMultimap<String, Integer> multimap = TreeMultimap.create();
    assertEquals(Ordering.natural(), multimap.keyComparator());
    assertEquals(Ordering.natural(), multimap.valueComparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: natural=2 ) - Predicate: natural - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapNaturalTest
 Method: testOrderedKeySet
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.keySet()).containsExactly("foo", "google", "tree").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createPopulate=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapNaturalTest
 Method: testOrderedEntries
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.entries())
        .containsExactly(
            Maps.immutableEntry("foo", 1),
            Maps.immutableEntry("foo", 3),
            Maps.immutableEntry("foo", 7),
            Maps.immutableEntry("google", 2),
            Maps.immutableEntry("google", 6),
            Maps.immutableEntry("tree", 0),
            Maps.immutableEntry("tree", 4))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=7 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: CollectionForEachTester
 Method: testForEachUnknownOrder
 Body: {
    List<E> elements = new ArrayList<E>();
    collection.forEach(elements::add);
    Helpers.assertEqualIgnoringOrder(Arrays.asList(createSamplesArray()), elements);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: forEach (Alternative Action: forEach=1 ) - Predicate: N/A - Scenario: elements (Alternative Scenario: elements=1 )

Project: guava
 Class: Crc32cHashFunctionTest
 Method: testScsiReadCommand
 Body: {
    // Test SCSI read command.
    byte[] scsiReadCommand =
        new byte[] {
          0x01, (byte) 0xc0, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00,
          0x14, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x04, 0x00,
          0x00, 0x00, 0x00, 0x14,
          0x00, 0x00, 0x00, 0x18,
          0x28, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00,
          0x02, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00
        };
    assertCrc(0xd9963a56, scsiReadCommand);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action:  ) - Predicate: N/A - Scenario: scsiReadCommand (Alternative Scenario: scsiReadCommand=1 )

Project: guava
 Class: Crc32cHashFunctionTest
 Method: testZeros
 Body: {
    // Test 32 byte array of 0x00.
    byte[] zeros = new byte[32];
    Arrays.fill(zeros, (byte) 0x00);
    assertCrc(0x8a9136aa, zeros);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: fill (Alternative Action: fill=1 ) - Predicate: N/A - Scenario: zeros (Alternative Scenario: zeros=1 )

Project: guava
 Class: Crc32cHashFunctionTest
 Method: testFull
 Body: {
    // Test 32 byte array of 0xFF.
    byte[] fulls = new byte[32];
    Arrays.fill(fulls, (byte) 0xFF);
    assertCrc(0x62a8ab43, fulls);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: fill (Alternative Action: fill=1 ) - Predicate: N/A - Scenario: fulls (Alternative Scenario: fulls=1 )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_supportedNothing
 Body: {
    assertFalse("addAll(n, nothing) should return false", getList().addAll(0, emptyCollection()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: addAll=1 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_middle
 Body: {
    assertTrue(
        "addAll(middle, disjoint) should return true",
        getList().addAll(getNumElements() / 2, createDisjointCollection()));
    expectAdded(getNumElements() / 2, createDisjointCollection());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: getNumElements=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_end
 Body: {
    assertTrue(
        "addAll(end, disjoint) should return true",
        getList().addAll(getNumElements(), createDisjointCollection()));
    expectAdded(getNumElements(), createDisjointCollection());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: getNumElements=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_supportedSomePresent
 Body: {
    assertTrue(
        "addAll(n, allPresent) should return true",
        getList().addAll(0, MinimalCollection.of(e0(), e3())));
    expectAdded(0, e0(), e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_supportedAllPresent
 Body: {
    assertTrue(
        "addAll(n, allPresent) should return true",
        getList().addAll(0, MinimalCollection.of(e0())));
    expectAdded(0, e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=2 ) - Predicate: addAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_nullSupported
 Body: {
    List<E> containsNull = singletonList(null);
    assertTrue("addAll(n, containsNull) should return true", getList().addAll(0, containsNull));
    /*
     * We need (E) to force interpretation of null as the single element of a
     * varargs array, not the array itself
     */
    expectAdded(0, (E) null);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: addAll=1 ) - Predicate: addAll - Scenario: containsNull (Alternative Scenario: containsNull=1 )

Project: guava
 Class: ListAddAllAtIndexTester
 Method: testAddAllAtIndex_withDuplicates
 Body: {
    MinimalCollection<E> elementsToAdd = MinimalCollection.of(e0(), e1(), e0(), e1());
    assertTrue("addAll(n, hasDuplicates) should return true", getList().addAll(0, elementsToAdd));
    expectAdded(0, e0(), e1(), e0(), e1());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=4 ) - Predicate: addAll - Scenario: elementsToAdd (Alternative Scenario: elementsToAdd=1 )

Project: guava
 Class: ForwardingCacheTest
 Method: testSize
 Body: {
    when(mock.size()).thenReturn(0L);
    assertEquals(0, forward.size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: size=2 ) - Predicate: size - Scenario: when(mock.size()) (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testGetAllPresent
 Body: {
    when(mock.getAllPresent(ImmutableList.of("key")))
        .thenReturn(ImmutableMap.of("key", Boolean.TRUE));
    assertEquals(
        ImmutableMap.of("key", Boolean.TRUE), forward.getAllPresent(ImmutableList.of("key")));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: of=4 ) - Predicate: of - Scenario: when(mock.getAllPresent(ImmutableList.of("key"))) (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testGetIfPresent
 Body: {
    when(mock.getIfPresent("key")).thenReturn(Boolean.TRUE);
    assertSame(Boolean.TRUE, forward.getIfPresent("key"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: getIfPresent=2 ) - Predicate: getIfPresent - Scenario: when(mock.getIfPresent("key")) (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testStats
 Body: {
    when(mock.stats()).thenReturn(null);
    assertNull(forward.stats());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: stats=2 ) - Predicate: stats - Scenario: when(mock.stats()) (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testAsMap
 Body: {
    when(mock.asMap()).thenReturn(null);
    assertNull(forward.asMap());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: thenReturn (Alternative Action: asMap=2 ) - Predicate: asMap - Scenario: when(mock.asMap()) (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testConstantsMaxFactorial
 Body: {
    BigInteger maxDoubleValue = BigDecimal.valueOf(Double.MAX_VALUE).toBigInteger();
    assertTrue(BigIntegerMath.factorial(DoubleMath.MAX_FACTORIAL).compareTo(maxDoubleValue) <= 0);
    assertTrue(
        BigIntegerMath.factorial(DoubleMath.MAX_FACTORIAL + 1).compareTo(maxDoubleValue) > 0);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: factorial=2 ) - Predicate: N/A - Scenario: maxDoubleValue (Alternative Scenario: maxDoubleValue=1 )

Project: guava
 Class: UnicodeEscaperTest
 Method: testSimpleEscaper
 Body: {
    UnicodeEscaper e = SIMPLE_ESCAPER;
    String expected =
        "[0]abyz[128][256][2048][4096]ABYZ[65535]"
            + "["
            + Character.MIN_SUPPLEMENTARY_CODE_POINT
            + "]"
            + "0189["
            + Character.MAX_CODE_POINT
            + "]";
    assertEquals(expected, escapeAsString(e, TEST_STRING));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escapeAsString=1 ) - Predicate: escapeAsString - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: UnicodeEscaperTest
 Method: testNopEscaper
 Body: {
    UnicodeEscaper e = NOP_ESCAPER;
    assertEquals(TEST_STRING, escapeAsString(e, TEST_STRING));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: escapeAsString=1 ) - Predicate: escapeAsString - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: UnicodeEscaperTest
 Method: testFalsePositivesForNextEscapedIndex
 Body: {
    UnicodeEscaper e =
        new UnicodeEscaper() {
          // Canonical escaper method that only escapes lower case ASCII letters.
          @Override
          protected char[] escape(int cp) {
            return ('a' <= cp && cp <= 'z') ? new char[] {Character.toUpperCase((char) cp)} : null;
          }
          // Inefficient implementation that defines all letters as escapable.
          @Override
          protected int nextEscapeIndex(CharSequence csq, int index, int end) {
            while (index < end && !Character.isLetter(csq.charAt(index))) {
              index++;
            }
            return index;
          }
        };
    assertEquals("\0HELLO \uD800\uDC00 WORLD!\n", e.escape("\0HeLLo \uD800\uDC00 WorlD!\n"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toUpperCase=1 ) - Predicate: escape - Scenario: e (Alternative Scenario: e=1 )

Project: guava
 Class: ForwardingObjectTest
 Method: testEqualsSymmetric
 Body: {
    final Set<String> delegate = Sets.newHashSet("foo");
    ForwardingObject forward =
        new ForwardingObject() {
          @Override
          protected Object delegate() {
            return delegate;
          }
        };
    assertEquals(forward.equals(delegate), delegate.equals(forward));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: equals=2 ) - Predicate: equals - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: MoreFilesFileTraverserTest
 Method: testFileTraverser_nonExistingFile
 Body: {
    Path file = rootDir.resolve("file-that-doesnt-exist");

    assertThat(MoreFiles.fileTraverser().breadthFirst(file)).containsExactly(file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: resolve=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: MoreFilesFileTraverserTest
 Method: testFileTraverser_singleFile
 Body: {
    Path file = newFile("some-file");

    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: breadthFirst=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: MoreFilesFileTraverserTest
 Method: testFileTraverser_singleDirectory
 Body: {
    Path file = newDir("some-dir");

    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newDir=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: MoreFilesFileTraverserTest
 Method: testFileTraverser_file
 Body: {
    Path file = newFile("some-file");

    assertThat(MoreFiles.fileTraverser().breadthFirst(file)).containsExactly(file);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: breadthFirst=1 ) - Predicate: N/A - Scenario: file (Alternative Scenario: file=1 )

Project: guava
 Class: HashMultisetTest
 Method: testCreateFromIterable
 Body: {
    Multiset<String> multiset = HashMultiset.create(Arrays.asList("foo", "bar", "foo"));
    assertEquals(3, multiset.size());
    assertEquals(2, multiset.count("foo"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: count - Scenario: multiset (Alternative Scenario: multiset=1 )

Project: guava
 Class: SignedBytesTest
 Method: testLexicographicalComparatorSerializable
 Body: {
    Comparator<byte[]> comparator = SignedBytes.lexicographicalComparator();
    assertSame(comparator, SerializableTester.reserialize(comparator));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: lexicographicalComparator=1 ) - Predicate: reserialize - Scenario: comparator (Alternative Scenario: comparator=1 )

Project: guava
 Class: ListEqualsTester
 Method: testEquals_longerList
 Body: {
    Collection<E> moreElements = getSampleElements(getNumElements() + 1);
    assertFalse(
        "Lists of different sizes should not be equal.",
        getList().equals(new ArrayList<E>(moreElements)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: moreElements (Alternative Scenario: moreElements=1 )

Project: guava
 Class: ListEqualsTester
 Method: testEquals_shorterList
 Body: {
    Collection<E> fewerElements = getSampleElements(getNumElements() - 1);
    assertFalse(
        "Lists of different sizes should not be equal.",
        getList().equals(new ArrayList<E>(fewerElements)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: fewerElements (Alternative Scenario: fewerElements=1 )

Project: guava
 Class: ListEqualsTester
 Method: testEquals_otherListContainingNull
 Body: {
    List<E> other = new ArrayList<>(getSampleElements());
    other.set(other.size() / 2, null);
    assertFalse(
        "Two Lists should not be equal if exactly one of them has null at a given index.",
        getList().equals(other));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: other (Alternative Scenario: other=1 )

Project: guava
 Class: ListEqualsTester
 Method: testEquals_otherListWithDifferentElements
 Body: {
    ArrayList<E> other = new ArrayList<>(getSampleElements());
    other.set(other.size() / 2, getSubjectGenerator().samples().e3());
    assertFalse(
        "A List should not equal another List containing different elements.",
        getList().equals(other));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: getSampleElements=1 ) - Predicate: equals - Scenario: other (Alternative Scenario: other=1 )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemove_occurrences_absent
 Body: {
    int distinct = getMultiset().elementSet().size();
    assertEquals("multiset.remove(absent, 0) didn't return 0", 0, getMultiset().remove(e3(), 2));
    assertEquals(distinct, getMultiset().elementSet().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getMultiset=3 ) - Predicate: size - Scenario: distinct (Alternative Scenario: distinct=1 )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemoveAllIgnoresCount
 Body: {
    initThreeCopies();
    assertTrue(getMultiset().removeAll(Collections.singleton(e0())));
    assertEmpty(getMultiset());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initThreeCopies (Alternative Action: getMultiset=2 ) - Predicate: getMultiset - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemoveZeroNoOp
 Body: {
    int originalCount = getMultiset().count(e0());
    assertEquals("old count", originalCount, getMultiset().remove(e0(), 0));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: e0=2 ) - Predicate: remove - Scenario: originalCount (Alternative Scenario: originalCount=1 )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemove_occurrences_0
 Body: {
    int oldCount = getMultiset().count(e0());
    assertEquals(
        "multiset.remove(E, 0) didn't return the old count",
        oldCount,
        getMultiset().remove(e0(), 0));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: e0=2 ) - Predicate: remove - Scenario: oldCount (Alternative Scenario: oldCount=1 )

Project: guava
 Class: ReflectionTest
 Method: testNewProxy
 Body: {
    Runnable runnable = Reflection.newProxy(Runnable.class, X_RETURNER);
    assertEquals("x", runnable.toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: toString=1 ) - Predicate: toString - Scenario: runnable (Alternative Scenario: runnable=1 )

Project: guava
 Class: ListAddTester
 Method: testAdd_supportedPresent
 Body: {
    assertTrue("add(present) should return true", getList().add(e0()));
    expectAdded(e0());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e0=2 ) - Predicate: add - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: InvokableTest
 Method: testInstanceMethod_exceptionTypes
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);
    assertEquals(
        ImmutableList.of(
            TypeToken.of(IllegalArgumentException.class), TypeToken.of(NullPointerException.class)),
        delegate.getExceptionTypes());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=3 ) - Predicate: of - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testInstanceMethod_returnType
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);
    assertEquals(new TypeToken<Iterable<String>>() {}, delegate.getReturnType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getReturnType=1 ) - Predicate: getReturnType - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testGetOwnerType_method
 Body: {
    Invokable<?, ?> invokable = Invokable.from(String.class.getMethod("length"));
    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: of - Scenario: invokable (Alternative Scenario: invokable=1 )

Project: guava
 Class: InvokableTest
 Method: testStaticMethod_exceptionTypes
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);
    assertEquals(ImmutableList.of(), delegate.getExceptionTypes());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getExceptionTypes=1 ) - Predicate: of - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testStaticMethod_call
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);
    @SuppressWarnings("unchecked") // prepend() returns Iterable<String>
    Iterable<String> result =
        (Iterable<String>) delegate.invoke(null, "a", ImmutableList.of("b", "c"));
    assertEquals(ImmutableList.of("a", "b", "c"), ImmutableList.copyOf(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: delegate (Alternative Scenario: result=1 )

Project: guava
 Class: InvokableTest
 Method: testConstructor_typeParameters
 Body: {
    TypeVariable<?>[] variables = Prepender.constructor().getTypeParameters();
    assertThat(variables).hasLength(1);
    assertEquals("A", variables[0].getName());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getName=1 ) - Predicate: getName - Scenario: variables (Alternative Scenario: variables=1 )

Project: guava
 Class: InvokableTest
 Method: testStaticMethod_returnType
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);
    assertEquals(new TypeToken<Iterable<String>>() {}, delegate.getReturnType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getReturnType=1 ) - Predicate: getReturnType - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testNestedInnerClassDefaultConstructor
 Body: {
    Constructor<?> constructor =
        InnerWithDefaultConstructor.NestedInner.class.getDeclaredConstructors()[0];
    assertEquals(0, Invokable.from(constructor).getParameters().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: constructor (Alternative Scenario: constructor=1 )

Project: guava
 Class: InvokableTest
 Method: testMethod_isVarArgs
 Body: {
    Invokable<?, ?> delegate = Prepender.method("privateVarArgsMethod", String[].class);
    assertTrue(delegate.isVarArgs());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=1 ) - Predicate: isVarArgs - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testConstructor_isOverridablel
 Body: {
    Invokable<?, ?> delegate = Invokable.from(Foo.class.getDeclaredConstructor());
    assertFalse(delegate.isOverridable());
    assertFalse(delegate.isVarArgs());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isVarArgs=1 ) - Predicate: isVarArgs - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testGetOwnerType_constructor
 Body: {
    Invokable<String, String> invokable = Invokable.from(String.class.getConstructor());
    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: of - Scenario: invokable (Alternative Scenario: invokable=1 )

Project: guava
 Class: InvokableTest
 Method: testInstanceMethod_typeParameters
 Body: {
    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);
    assertThat(delegate.getTypeParameters()).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: method=1 ) - Predicate: N/A - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testInstanceMethod_call
 Body: {
    Invokable<Prepender, ?> delegate = Prepender.method("prepend", Iterable.class);
    @SuppressWarnings("unchecked") // prepend() returns Iterable<String>
    Iterable<String> result =
        (Iterable<String>) delegate.invoke(new Prepender("a", 2), ImmutableList.of("b", "c"));
    assertEquals(ImmutableList.of("a", "a", "b", "c"), ImmutableList.copyOf(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=2 ) - Predicate: of - Scenario: delegate (Alternative Scenario: result=1 )

Project: guava
 Class: InvokableTest
 Method: testNonFinalMethodInFinalClass_isOverridable
 Body: {
    Invokable<?, ?> delegate = Invokable.from(FinalClass.class.getDeclaredMethod("notFinalMethod"));
    assertFalse(delegate.isOverridable());
    assertFalse(delegate.isVarArgs());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isVarArgs=1 ) - Predicate: isVarArgs - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: InvokableTest
 Method: testInnerClassDefaultConstructor
 Body: {
    Constructor<?> constructor = InnerWithDefaultConstructor.class.getDeclaredConstructors()[0];
    assertEquals(0, Invokable.from(constructor).getParameters().size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: constructor (Alternative Scenario: constructor=1 )

Project: guava
 Class: InvokableTest
 Method: testConstructor_isVarArgs
 Body: {
    Invokable<?, ?> delegate = Prepender.constructor(String[].class);
    assertTrue(delegate.isVarArgs());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: isVarArgs=1 ) - Predicate: isVarArgs - Scenario: delegate (Alternative Scenario: delegate=1 )

Project: guava
 Class: CharStreamsTest
 Method: testReadLines
 Body: {
    List<String> lines = CharStreams.readLines(new StringReader("a\nb\nc"));
    assertEquals(ImmutableList.of("a", "b", "c"), lines);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: of - Scenario: lines (Alternative Scenario: lines=1 )

Project: guava
 Class: ThrowablesTest
 Method: testGetRootCause_DoubleWrapped
 Body: {
    SomeCheckedException cause = new SomeCheckedException();
    SomeChainingException exception = new SomeChainingException(new SomeChainingException(cause));
    assertSame(cause, Throwables.getRootCause(exception));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRootCause=1 ) - Predicate: getRootCause - Scenario: cause (Alternative Scenario: exception=1 )

Project: guava
 Class: ThrowablesTest
 Method: testGetRootCause_SingleWrapped
 Body: {
    SomeCheckedException cause = new SomeCheckedException();
    SomeChainingException exception = new SomeChainingException(cause);
    assertSame(cause, Throwables.getRootCause(exception));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRootCause=1 ) - Predicate: getRootCause - Scenario: cause (Alternative Scenario: exception=1 )

Project: guava
 Class: ThrowablesTest
 Method: testGetRootCause_NoCause
 Body: {
    SomeCheckedException exception = new SomeCheckedException();
    assertSame(exception, Throwables.getRootCause(exception));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: getRootCause=1 ) - Predicate: getRootCause - Scenario: exception (Alternative Scenario: exception=1 )

Project: guava
 Class: SetRemoveTester
 Method: testRemove_present
 Body: {
    getSet().remove(e0());
    assertFalse(
        "After remove(present) a set should not contain the removed element.",
        getSet().contains(e0()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: remove (Alternative Action: getSet=2 ) - Predicate: contains - Scenario: getSet() (Alternative Scenario:  )

Project: guava
 Class: MultisetsTest
 Method: testIntersectNonemptyEmpty
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create();
    assertThat(Multisets.intersection(ms1, ms2)).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testSumNonemptyEmpty
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create();
    assertThat(Multisets.sum(ms1, ms2)).containsExactly("a", "b", "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testUnion
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "b", "c"));
    assertThat(Multisets.union(ms1, ms2)).containsExactly("a", "a", "b", "b", "c");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testDifferenceWithNoRemovedElements
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a"));
    assertThat(Multisets.difference(ms1, ms2)).containsExactly("a", "b");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testSumEmptyNonempty
 Body: {
    Multiset<String> ms1 = HashMultiset.create();
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    assertThat(Multisets.sum(ms1, ms2)).containsExactly("a", "b", "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testDifferenceNonemptyEmpty
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create();
    assertEquals(ms1, Multisets.difference(ms1, ms2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: difference - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testIntersectEmptyNonempty
 Body: {
    Multiset<String> ms1 = HashMultiset.create();
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    assertThat(Multisets.intersection(ms1, ms2)).isEmpty();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testUnionNonemptyEmpty
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create();
    assertEquals(ms1, Multisets.union(ms1, ms2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: union - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testUnionEqualMultisets
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    assertEquals(ms1, Multisets.union(ms1, ms2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: union - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testDifferenceEmptyNonempty
 Body: {
    Multiset<String> ms1 = HashMultiset.create();
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    assertEquals(ms1, Multisets.difference(ms1, ms2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: difference - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testSum
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("b", "c"));
    assertThat(Multisets.sum(ms1, ms2)).containsExactly("a", "a", "b", "b", "c");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testUnionEmptyNonempty
 Body: {
    Multiset<String> ms1 = HashMultiset.create();
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    assertEquals(ms2, Multisets.union(ms1, ms2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: union - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: MultisetsTest
 Method: testDifferenceWithRemovedElement
 Body: {
    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));
    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("b"));
    assertThat(Multisets.difference(ms1, ms2)).containsExactly("a", "a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: create=2 ) - Predicate: N/A - Scenario: ms1 (Alternative Scenario: ms1=1 )

Project: guava
 Class: ListSubListTester
 Method: testSubList_ofSubListNonEmpty
 Body: {
    List<E> subList = getList().subList(0, 2).subList(1, 2);
    assertEquals(
        "subList(0, 2).subList(1, 2) "
            + "should be a single-element list of the element at index 1",
        Collections.singletonList(getOrderedElements().get(1)),
        subList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subList=2 ) - Predicate: singletonList - Scenario: subList (Alternative Scenario: subList=1 )

Project: guava
 Class: ListSubListTester
 Method: testSubList_originalListSetAffectsSubListLargeList
 Body: {
    List<E> subList = getList().subList(1, 3);
    getList().set(1, e3());
    assertEquals(
        "A set() call to a list after a sublist has been created "
            + "should be reflected in the sublist",
        Arrays.asList(e3(), e2()),
        subList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: getList=2 ) - Predicate: asList - Scenario: subList (Alternative Scenario: subList=1 )

Project: guava
 Class: ListSubListTester
 Method: testSubList_originalListSetAffectsSubList
 Body: {
    List<E> subList = getList().subList(0, 1);
    getList().set(0, e3());
    assertEquals(
        "A set() call to a list after a sublist has been created "
            + "should be reflected in the sublist",
        Collections.singletonList(e3()),
        subList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: set (Alternative Action: getList=2 ) - Predicate: singletonList - Scenario: subList (Alternative Scenario: subList=1 )

Project: guava
 Class: ListSubListTester
 Method: testSubList_ofSubListEmpty
 Body: {
    List<E> subList = getList().subList(0, 0).subList(0, 0);
    assertEquals("subList(0, 0).subList(0, 0) should be an empty list", emptyList(), subList);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: subList=2 ) - Predicate: emptyList - Scenario: subList (Alternative Scenario: subList=1 )

Project: guava
 Class: ConcurrentMapPutIfAbsentTester
 Method: testPutIfAbsent_supportedAbsent
 Body: {
    assertNull("putIfAbsent(notPresent, value) should return null", putIfAbsent(e3()));
    expectAdded(e3());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectAdded (Alternative Action: e3=2 ) - Predicate: putIfAbsent - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: ConcurrentMapPutIfAbsentTester
 Method: testPutIfAbsent_supportedPresent
 Body: {
    assertEquals(
        "putIfAbsent(present, value) should return existing value",
        v0(),
        getMap().putIfAbsent(k0(), v3()));
    expectUnchanged();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: expectUnchanged (Alternative Action: k0=1 ) - Predicate: v0 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapGetOrDefaultTester
 Method: testGetOrDefault_presentMappedToNull
 Body: {
    initMapWithNullValue();
    assertNull(
        "getOrDefault(mappedToNull, default) should return null",
        getMap().getOrDefault(getKeyForNullValue(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullValue (Alternative Action: getOrDefault=1 ) - Predicate: getOrDefault - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapGetOrDefaultTester
 Method: testGetOrDefault_presentNull
 Body: {
    initMapWithNullKey();
    assertEquals(
        "getOrDefault(null, default) should return the associated value",
        getValueForNullKey(),
        getMap().getOrDefault(null, v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: getValueForNullKey=1 ) - Predicate: getValueForNullKey - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MapGetOrDefaultTester
 Method: testGetOrDefault_nonNullWhenNullContained
 Body: {
    initMapWithNullKey();
    assertEquals(
        "getOrDefault(absent, default) should return default",
        v3(),
        getMap().getOrDefault(k3(), v3()));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initMapWithNullKey (Alternative Action: v3=2 ) - Predicate: v3 - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: CacheBuilderSpecTest
 Method: testParse_recordStats
 Body: {
    CacheBuilderSpec spec = parse("recordStats");
    assertTrue(spec.recordStats);
    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().recordStats(), CacheBuilder.from(spec));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: recordStats=1 ) - Predicate: recordStats - Scenario: spec (Alternative Scenario: spec=1 )

Project: guava
 Class: CacheBuilderSpecTest
 Method: testCacheBuilderFrom_string
 Body: {
    CacheBuilder<?, ?> fromString =
        CacheBuilder.from(
            "initialCapacity=10,maximumSize=20,concurrencyLevel=30,"
                + "weakKeys,weakValues,expireAfterAccess=10m");
    CacheBuilder<?, ?> expected =
        CacheBuilder.newBuilder()
            .initialCapacity(10)
            .maximumSize(20)
            .concurrencyLevel(30)
            .weakKeys()
            .weakValues()
            .expireAfterAccess(10L, TimeUnit.MINUTES);
    assertCacheBuilderEquivalence(expected, fromString);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: weakValues=1 ) - Predicate: N/A - Scenario: fromString (Alternative Scenario: expected=1 )

Project: guava
 Class: CollectionContainsAllTester
 Method: testContainsAll_nullPresent
 Body: {
    initCollectionWithNullElement();
    assertTrue(collection.containsAll(MinimalCollection.of((E) null)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: containsAll - Scenario: N/A (Alternative Scenario:  )

Project: guava
 Class: MultisetSerializationTester
 Method: testElementSetSerialization
 Body: {
    Set<E> expected = getMultiset().elementSet();
    assertEquals(expected, SerializableTester.reserialize(expected));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: elementSet=1 ) - Predicate: reserialize - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: MultisetSerializationTester
 Method: testEntrySetSerialization
 Body: {
    Set<Multiset.Entry<E>> expected = getMultiset().entrySet();
    assertEquals(expected, SerializableTester.reserialize(expected));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: entrySet=1 ) - Predicate: reserialize - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testNullGet
 Body: {
    ImmutableSortedMap<String, Integer> map = ImmutableSortedMap.of("one", 1);
    assertNull(map.get(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: get=1 ) - Predicate: get - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testSubMapInclusiveExclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).subMap("one", true, "two", false);
    assertThat(map.entrySet())
        .containsExactly(Maps.immutableEntry("one", 1), Maps.immutableEntry("three", 3))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=2 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testHeadMapExclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).headMap("three", false);
    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry("one", 1));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: entrySet=1 ) - Predicate: immutableEntry - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testTailMapExclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).tailMap("three", false);
    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry("two", 2));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: entrySet=1 ) - Predicate: immutableEntry - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testSubMapExclusiveInclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).subMap("one", false, "two", true);
    assertThat(map.entrySet())
        .containsExactly(Maps.immutableEntry("three", 3), Maps.immutableEntry("two", 2))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=2 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testTailMapInclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).tailMap("three", true);
    assertThat(map.entrySet())
        .containsExactly(Maps.immutableEntry("three", 3), Maps.immutableEntry("two", 2))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=2 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testSubMapExclusiveExclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).subMap("one", false, "two", false);
    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry("three", 3));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: entrySet=1 ) - Predicate: immutableEntry - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testSubMapInclusiveInclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).subMap("one", true, "two", true);
    assertThat(map.entrySet())
        .containsExactly(
            Maps.immutableEntry("one", 1),
            Maps.immutableEntry("three", 3),
            Maps.immutableEntry("two", 2))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=3 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testHeadMapInclusive
 Body: {
    Map<String, Integer> map =
        ImmutableSortedMap.of("one", 1, "two", 2, "three", 3).headMap("three", true);
    assertThat(map.entrySet())
        .containsExactly(Maps.immutableEntry("one", 1), Maps.immutableEntry("three", 3))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=2 ) - Predicate: N/A - Scenario: map (Alternative Scenario: map=1 )

Project: guava
 Class: TreeMultimapExplicitTest
 Method: testOrderedValues
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.values()).containsExactly(7, 3, 1, null, 0, 6, 2).inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createPopulate=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapExplicitTest
 Method: testGetComparator
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertEquals(StringLength.COMPARATOR, multimap.keyComparator());
    assertEquals(DECREASING_INT_COMPARATOR, multimap.valueComparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: valueComparator=1 ) - Predicate: valueComparator - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapExplicitTest
 Method: testComparator
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertEquals(DECREASING_INT_COMPARATOR, multimap.get("foo").comparator());
    assertEquals(DECREASING_INT_COMPARATOR, multimap.get("missing").comparator());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: comparator=2 ) - Predicate: comparator - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapExplicitTest
 Method: testOrderedEntries
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.entries())
        .containsExactly(
            Maps.immutableEntry((String) null, 7),
            Maps.immutableEntry((String) null, 3),
            Maps.immutableEntry((String) null, 1),
            Maps.immutableEntry("tree", (Integer) null),
            Maps.immutableEntry("tree", 0),
            Maps.immutableEntry("google", 6),
            Maps.immutableEntry("google", 2))
        .inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: immutableEntry=7 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: TreeMultimapExplicitTest
 Method: testOrderedKeySet
 Body: {
    TreeMultimap<String, Integer> multimap = createPopulate();
    assertThat(multimap.keySet()).containsExactly(null, "tree", "google").inOrder();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: createPopulate=1 ) - Predicate: N/A - Scenario: multimap (Alternative Scenario: multimap=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_skipNoneList
 Body: {
    Collection<String> list = Lists.newArrayList("a", "b");
    assertEquals(
        Lists.newArrayList("a", "b"), Lists.newArrayList(FluentIterable.from(list).skip(0)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=3 ) - Predicate: newArrayList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_emptyIterable
 Body: {
    Set<String> set = Sets.newHashSet();
    assertThat(FluentIterable.from(set).last()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newHashSet=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testTransformWith_nullFriendlyTransform
 Body: {
    List<Integer> input = asList(1, 2, null, 3);
    Iterable<String> result = FluentIterable.from(input).transform(new StringValueOfFunction());

    assertEquals(asList("1", "2", "null", "3"), Lists.newArrayList(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: input (Alternative Scenario: result=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_list
 Body: {
    List<String> list = Lists.newArrayList("a", "b", "c");
    assertThat(FluentIterable.from(list).last()).hasValue("c");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nullSetNo
 Body: {
    Iterable<String> set = ImmutableSortedSet.of("a", "b");
    assertFalse(FluentIterable.from(set).contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_sortedSet
 Body: {
    SortedSet<String> sortedSet = ImmutableSortedSet.of("b", "c", "a");
    assertThat(FluentIterable.from(sortedSet).last()).hasValue("c");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: FluentIterableTest
 Method: testAppend_toEmpty
 Body: {
    FluentIterable<Integer> result =
        FluentIterable.<Integer>of().append(Lists.newArrayList(1, 2, 3));
    assertEquals(asList(1, 2, 3), Lists.newArrayList(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: asList - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_pastEnd
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b");
    assertEquals(Collections.emptyList(), Lists.newArrayList(FluentIterable.from(set).skip(20)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: emptyList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nonNullSetNo
 Body: {
    Iterable<String> set = Sets.newHashSet("a", "b");
    assertFalse(FluentIterable.from(set).contains("c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nonNullSetYes
 Body: {
    Iterable<String> set = Sets.newHashSet("a", null, "b");
    assertTrue(FluentIterable.from(set).contains("b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testAppend_emptyList
 Body: {
    FluentIterable<Integer> result =
        FluentIterable.<Integer>from(asList(1, 2, 3)).append(Lists.<Integer>newArrayList());
    assertEquals(asList(1, 2, 3), Lists.newArrayList(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: asList - Scenario: result (Alternative Scenario: result=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nonNullIterableYes
 Body: {
    Iterable<String> set = iterable("a", null, "b");
    assertTrue(FluentIterable.from(set).contains("b"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testIndex
 Body: {
    ImmutableListMultimap<Integer, String> expected =
        ImmutableListMultimap.<Integer, String>builder()
            .putAll(3, "one", "two")
            .put(5, "three")
            .put(4, "four")
            .build();
    ImmutableListMultimap<Integer, String> index =
        FluentIterable.from(asList("one", "two", "three", "four"))
            .index(
                new Function<String, Integer>() {
                  @Override
                  public Integer apply(String input) {
                    return input.length();
                  }
                });
    assertEquals(expected, index);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: put=2 ) - Predicate: N/A - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nonNullIterableNo
 Body: {
    Iterable<String> iterable = iterable("a", "b");
    assertFalse(FluentIterable.from(iterable).contains("c"));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSize2NonCollection
 Body: {
    Iterable<Integer> iterable =
        new Iterable<Integer>() {
          @Override
          public Iterator<Integer> iterator() {
            return asList(0, 1).iterator();
          }
        };
    assertEquals(2, FluentIterable.from(iterable).size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: size - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_skipNone
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b");
    assertEquals(
        Lists.newArrayList("a", "b"), Lists.newArrayList(FluentIterable.from(set).skip(0)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: newArrayList - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_emptyList
 Body: {
    List<String> list = Collections.emptyList();
    assertThat(FluentIterable.from(list).first()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testCycle_emptyIterable
 Body: {
    FluentIterable<Integer> cycle = FluentIterable.<Integer>of().cycle();
    assertFalse(cycle.iterator().hasNext());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: iterator=1 ) - Predicate: hasNext - Scenario: cycle (Alternative Scenario: cycle=1 )

Project: guava
 Class: FluentIterableTest
 Method: testUniqueIndex
 Body: {
    ImmutableMap<Integer, String> expected = ImmutableMap.of(3, "two", 5, "three", 4, "four");
    ImmutableMap<Integer, String> index =
        FluentIterable.from(asList("two", "three", "four"))
            .uniqueIndex(
                new Function<String, Integer>() {
                  @Override
                  public Integer apply(String input) {
                    return input.length();
                  }
                });
    assertEquals(expected, index);
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: uniqueIndex=1 ) - Predicate: N/A - Scenario: expected (Alternative Scenario: expected=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSize_collectionDoesntIterate
 Body: {
    List<Integer> nums = asList(1, 2, 3, 4, 5);
    List<Integer> collection =
        new ArrayList<Integer>(nums) {
          @Override
          public Iterator<Integer> iterator() {
            throw new AssertionFailedError("Don't iterate me!");
          }
        };
    assertEquals(5, FluentIterable.from(collection).size());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: size=1 ) - Predicate: size - Scenario: nums (Alternative Scenario: collection=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_simpleList
 Body: {
    Collection<String> list = Lists.newArrayList("a", "b", "c", "d", "e");
    assertEquals(
        Lists.newArrayList("c", "d", "e"), Lists.newArrayList(FluentIterable.from(list).skip(2)));
    assertEquals("[c, d, e]", FluentIterable.from(list).skip(2).toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=3 ) - Predicate: toString - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nullIterableNo
 Body: {
    Iterable<String> iterable = iterable("a", "b");
    assertFalse(FluentIterable.from(iterable).contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: FluentIterableTest
 Method: testTransformAndConcat
 Body: {
    List<Integer> input = asList(1, 2, 3);
    Iterable<String> result =
        FluentIterable.from(input).transformAndConcat(new RepeatedStringValueOfFunction());
    assertEquals(asList("1", "1", "2", "2", "3", "3"), Lists.newArrayList(result));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: asList=2 ) - Predicate: asList - Scenario: input (Alternative Scenario: result=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nullSetYes
 Body: {
    Iterable<String> set = Sets.newHashSet("a", null, "b");
    assertTrue(FluentIterable.from(set).contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_list
 Body: {
    List<String> list = Lists.newArrayList("a", "b", "c");
    assertThat(FluentIterable.from(list).first()).hasValue("a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_pastEndList
 Body: {
    Collection<String> list = Lists.newArrayList("a", "b");
    assertEquals(Collections.emptyList(), Lists.newArrayList(FluentIterable.from(list).skip(20)));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: emptyList - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_sortedSet
 Body: {
    SortedSet<String> sortedSet = ImmutableSortedSet.of("b", "c", "a");
    assertThat(FluentIterable.from(sortedSet).first()).hasValue("a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_emptySortedSet
 Body: {
    SortedSet<String> sortedSet = ImmutableSortedSet.of();
    assertThat(FluentIterable.from(sortedSet).first()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_iterable
 Body: {
    Set<String> set = ImmutableSet.of("a", "b", "c");
    assertThat(FluentIterable.from(set).last()).hasValue("c");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFrom_alreadyFluentIterable
 Body: {
    FluentIterable<Integer> iterable = FluentIterable.from(asList(1));
    assertSame(iterable, FluentIterable.from(iterable));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: from=2 ) - Predicate: from - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_iterable
 Body: {
    Set<String> set = ImmutableSet.of("a", "b", "c");
    assertThat(FluentIterable.from(set).first()).hasValue("a");
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: of=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testContains_nullIterableYes
 Body: {
    Iterable<String> iterable = iterable("a", null, "b");
    assertTrue(FluentIterable.from(iterable).contains(null));
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: contains=1 ) - Predicate: contains - Scenario: iterable (Alternative Scenario: iterable=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_emptySortedSet
 Body: {
    SortedSet<String> sortedSet = ImmutableSortedSet.of();
    assertThat(FluentIterable.from(sortedSet).last()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: last=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario: sortedSet=1 )

Project: guava
 Class: FluentIterableTest
 Method: testFirst_emptyIterable
 Body: {
    Set<String> set = Sets.newHashSet();
    assertThat(FluentIterable.from(set).first()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newHashSet=1 ) - Predicate: N/A - Scenario: set (Alternative Scenario: set=1 )

Project: guava
 Class: FluentIterableTest
 Method: testLast_emptyList
 Body: {
    List<String> list = Collections.emptyList();
    assertThat(FluentIterable.from(list).last()).isAbsent();
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: emptyList=1 ) - Predicate: N/A - Scenario: list (Alternative Scenario: list=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_simple
 Body: {
    Collection<String> set = ImmutableSet.of("a", "b", "c", "d", "e");
    assertEquals(
        Lists.newArrayList("c", "d", "e"), Lists.newArrayList(FluentIterable.from(set).skip(2)));
    assertEquals("[c, d, e]", FluentIterable.from(set).skip(2).toString());
  }
 Pattern Name: NormalPattern_2/3LOC - Action: N/A (Alternative Action: newArrayList=2 ) - Predicate: toString - Scenario: set (Alternative Scenario: set=1 )

