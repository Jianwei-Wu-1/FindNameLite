Project: guava
 Class: LocalCacheTest
 Method: testEntryFactory
 Body: {
    assertSame(EntryFactory.STRONG, EntryFactory.getFactory(Strength.STRONG, false, false));
    assertSame(EntryFactory.STRONG_ACCESS, EntryFactory.getFactory(Strength.STRONG, true, false));
    assertSame(EntryFactory.STRONG_WRITE, EntryFactory.getFactory(Strength.STRONG, false, true));
    assertSame(
        EntryFactory.STRONG_ACCESS_WRITE, EntryFactory.getFactory(Strength.STRONG, true, true));
    assertSame(EntryFactory.WEAK, EntryFactory.getFactory(Strength.WEAK, false, false));
    assertSame(EntryFactory.WEAK_ACCESS, EntryFactory.getFactory(Strength.WEAK, true, false));
    assertSame(EntryFactory.WEAK_WRITE, EntryFactory.getFactory(Strength.WEAK, false, true));
    assertSame(EntryFactory.WEAK_ACCESS_WRITE, EntryFactory.getFactory(Strength.WEAK, true, true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getFactory (Alternative Action: getFactory=8 ) - Predicate: N/A - Scenario: EntryFactory (Alternative Scenario:  )

Project: guava
 Class: SetsTest
 Method: testCartesianProduct_binary1x1
 Body: {
    assertThat(Sets.cartesianProduct(set(1), set(2))).contains(list(1, 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: list (Alternative Action: set=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: SetsTest
 Method: testCartesianProduct_zeroary
 Body: {
    assertThat(Sets.cartesianProduct()).containsExactly(list());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: list (Alternative Action: cartesianProduct=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: MultimapAsMapTester
 Method: testAsMapGetNullKeyAbsent
 Body: {
    assertNull(multimap().asMap().get(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: asMap=1 ) - Predicate: N/A - Scenario: multimap().asMap() (Alternative Scenario:  )

Project: guava
 Class: SetMultimapPutTester
 Method: testPutDuplicateValuePreservesSize
 Body: {
    assertFalse(multimap().put(k0(), v0()));
    assertEquals(getNumElements(), multimap().size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: put (Alternative Action: multimap=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testGetNullAbsent
 Body: {
    assertEmpty(multimap().get(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapGetTester
 Method: testGetAbsentKey
 Body: {
    assertGet(k4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: k4 (Alternative Action: k4=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: MultimapKeysTester
 Method: testKeysCountAbsentNullKey
 Body: {
    assertEquals(0, multimap().keys().count(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: count (Alternative Action: keys=1 ) - Predicate: N/A - Scenario: multimap().keys() (Alternative Scenario:  )

Project: guava
 Class: AsciiTest
 Method: testToLowerCase
 Body: {
    assertEquals(LOWER, Ascii.toLowerCase(UPPER));
    assertSame(LOWER, Ascii.toLowerCase(LOWER));
    assertEquals(IGNORED, Ascii.toLowerCase(IGNORED));
    assertEquals("foobar", Ascii.toLowerCase("fOobaR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toLowerCase (Alternative Action: toLowerCase=4 ) - Predicate: N/A - Scenario: Ascii (Alternative Scenario:  )

Project: guava
 Class: AsciiTest
 Method: testToUpperCase
 Body: {
    assertEquals(UPPER, Ascii.toUpperCase(LOWER));
    assertSame(UPPER, Ascii.toUpperCase(UPPER));
    assertEquals(IGNORED, Ascii.toUpperCase(IGNORED));
    assertEquals("FOOBAR", Ascii.toUpperCase("FoOBAr"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toUpperCase (Alternative Action: toUpperCase=4 ) - Predicate: N/A - Scenario: Ascii (Alternative Scenario:  )

Project: guava
 Class: AsciiTest
 Method: testTruncate
 Body: {
    assertEquals("foobar", Ascii.truncate("foobar", 10, "..."));
    assertEquals("fo...", Ascii.truncate("foobar", 5, "..."));
    assertEquals("foobar", Ascii.truncate("foobar", 6, "..."));
    assertEquals("...", Ascii.truncate("foobar", 3, "..."));
    assertEquals("foobar", Ascii.truncate("foobar", 10, "…"));
    assertEquals("foo…", Ascii.truncate("foobar", 4, "…"));
    assertEquals("fo--", Ascii.truncate("foobar", 4, "--"));
    assertEquals("foobar", Ascii.truncate("foobar", 6, "…"));
    assertEquals("foob…", Ascii.truncate("foobar", 5, "…"));
    assertEquals("foo", Ascii.truncate("foobar", 3, ""));
    assertEquals("", Ascii.truncate("", 5, ""));
    assertEquals("", Ascii.truncate("", 5, "..."));
    assertEquals("", Ascii.truncate("", 0, ""));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: truncate (Alternative Action: truncate=13 ) - Predicate: N/A - Scenario: Ascii (Alternative Scenario:  )

Project: guava
 Class: AsciiTest
 Method: testEqualsIgnoreCase
 Body: {
    assertTrue(Ascii.equalsIgnoreCase("", ""));
    assertFalse(Ascii.equalsIgnoreCase("", "x"));
    assertFalse(Ascii.equalsIgnoreCase("x", ""));
    assertTrue(Ascii.equalsIgnoreCase(LOWER, UPPER));
    assertTrue(Ascii.equalsIgnoreCase(UPPER, LOWER));
    // Create new strings here to avoid early-out logic.
    assertTrue(Ascii.equalsIgnoreCase(new String(IGNORED), new String(IGNORED)));
    // Compare to: "\u00c1".equalsIgnoreCase("\u00e1") == true
    assertFalse(Ascii.equalsIgnoreCase("\u00c1", "\u00e1"));
    // Test chars just outside the alphabetic range ('A'-1 vs 'a'-1, 'Z'+1 vs 'z'+1)
    assertFalse(Ascii.equalsIgnoreCase("@", "`"));
    assertFalse(Ascii.equalsIgnoreCase("[", "{"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: equalsIgnoreCase (Alternative Action: equalsIgnoreCase=9 ) - Predicate: N/A - Scenario: Ascii (Alternative Scenario:  )

Project: guava
 Class: AsciiTest
 Method: testEqualsIgnoreCaseUnicodeEquivalence
 Body: {
    // Note that it's possible in future that the JDK's idea to toUpperCase() or equalsIgnoreCase()
    // may change and break assumptions in this test [*]. This is not a bug in the implementation of
    // Ascii.equalsIgnoreCase(), but it is a signal that its documentation may need updating as
    // regards edge cases.

    // The Unicode point {@code 00df} is the lowercase form of sharp-S (ß), whose uppercase is "SS".
    assertEquals("PASSWORD", "pa\u00dfword".toUpperCase()); // [*]
    assertFalse("pa\u00dfword".equalsIgnoreCase("PASSWORD")); // [*]
    assertFalse(Ascii.equalsIgnoreCase("pa\u00dfword", "PASSWORD"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toUpperCase (Alternative Action: equalsIgnoreCase=2 ) - Predicate: N/A - Scenario: "pa\u00dfword" (Alternative Scenario:  )

Project: guava
 Class: ConverterTest
 Method: testApply
 Body: {
    assertEquals(LONG_VAL, STR_TO_LONG.apply(STR_VAL));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: apply (Alternative Action: apply=1 ) - Predicate: N/A - Scenario: STR_TO_LONG (Alternative Scenario:  )

Project: guava
 Class: JoinerTest
 Method: testDontConvertCharSequenceToString
 Body: {
    assertEquals("foo,foo", Joiner.on(",").join(new DontStringMeBro(), new DontStringMeBro()));
    assertEquals(
        "foo,bar,foo",
        Joiner.on(",").useForNull("bar").join(new DontStringMeBro(), null, new DontStringMeBro()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=2 ) - Predicate: N/A - Scenario: Joiner.on(",") (Alternative Scenario:  )

Project: guava
 Class: MapGetTester
 Method: testGet_no
 Body: {
    assertNull("get(notPresent) should return null", get(k3()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: MapGetTester
 Method: testGet_nullNotContainedButAllowed
 Body: {
    assertNull("get(null) should return null", get(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesTest
 Method: testGetNameWithoutExtension
 Body: {
    assertEquals("", Files.getNameWithoutExtension(".txt"));
    assertEquals("blah", Files.getNameWithoutExtension("blah.txt"));
    assertEquals("blah.", Files.getNameWithoutExtension("blah..txt"));
    assertEquals(".blah", Files.getNameWithoutExtension(".blah.txt"));
    assertEquals("blah", Files.getNameWithoutExtension("/tmp/blah.txt"));
    assertEquals("blah.tar", Files.getNameWithoutExtension("blah.tar.gz"));
    assertEquals("", Files.getNameWithoutExtension("/"));
    assertEquals("", Files.getNameWithoutExtension("."));
    assertEquals(".", Files.getNameWithoutExtension(".."));
    assertEquals("..", Files.getNameWithoutExtension("..."));
    assertEquals("blah", Files.getNameWithoutExtension("blah"));
    assertEquals("blah", Files.getNameWithoutExtension("blah."));
    assertEquals(".blah", Files.getNameWithoutExtension(".blah."));
    assertEquals("blah", Files.getNameWithoutExtension("/foo.bar/blah"));
    assertEquals("blah", Files.getNameWithoutExtension("/foo/.bar/blah"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getNameWithoutExtension (Alternative Action: getNameWithoutExtension=15 ) - Predicate: N/A - Scenario: Files (Alternative Scenario:  )

Project: guava
 Class: FilesTest
 Method: testGetFileExtension
 Body: {
    assertEquals("txt", Files.getFileExtension(".txt"));
    assertEquals("txt", Files.getFileExtension("blah.txt"));
    assertEquals("txt", Files.getFileExtension("blah..txt"));
    assertEquals("txt", Files.getFileExtension(".blah.txt"));
    assertEquals("txt", Files.getFileExtension("/tmp/blah.txt"));
    assertEquals("gz", Files.getFileExtension("blah.tar.gz"));
    assertEquals("", Files.getFileExtension("/"));
    assertEquals("", Files.getFileExtension("."));
    assertEquals("", Files.getFileExtension(".."));
    assertEquals("", Files.getFileExtension("..."));
    assertEquals("", Files.getFileExtension("blah"));
    assertEquals("", Files.getFileExtension("blah."));
    assertEquals("", Files.getFileExtension(".blah."));
    assertEquals("", Files.getFileExtension("/foo.bar/blah"));
    assertEquals("", Files.getFileExtension("/foo/.bar/blah"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getFileExtension (Alternative Action: getFileExtension=15 ) - Predicate: N/A - Scenario: Files (Alternative Scenario:  )

Project: guava
 Class: MultimapKeySetTester
 Method: testKeySetContainsNullKeyAbsent
 Body: {
    assertFalse(multimap().keySet().contains(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=1 ) - Predicate: N/A - Scenario: multimap().keySet() (Alternative Scenario:  )

Project: guava
 Class: MapContainsKeyTester
 Method: testContains_nullNotContainedButAllowed
 Body: {
    assertFalse("containsKey(null) should return false", getMap().containsKey(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsKey (Alternative Action: containsKey=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: DefaultsTest
 Method: testGetDefaultValue
 Body: {
    assertEquals(false, Defaults.defaultValue(boolean.class).booleanValue());
    assertEquals('\0', Defaults.defaultValue(char.class).charValue());
    assertEquals(0, Defaults.defaultValue(byte.class).byteValue());
    assertEquals(0, Defaults.defaultValue(short.class).shortValue());
    assertEquals(0, Defaults.defaultValue(int.class).intValue());
    assertEquals(0, Defaults.defaultValue(long.class).longValue());
    assertEquals(0.0f, Defaults.defaultValue(float.class).floatValue());
    assertEquals(0.0d, Defaults.defaultValue(double.class).doubleValue());
    assertNull(Defaults.defaultValue(void.class));
    assertNull(Defaults.defaultValue(String.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: booleanValue (Alternative Action: defaultValue=10 ) - Predicate: N/A - Scenario: Defaults.defaultValue(boolean.class) (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testContains
 Body: {
    assertFalse(INSTANCE.contains('a', 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testHashCode
 Body: {
    assertEquals(0, INSTANCE.hashCode());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashCode (Alternative Action: hashCode=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testGet
 Body: {
    assertNull(INSTANCE.get('a', 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testToString
 Body: {
    assertEquals("{}", INSTANCE.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testContainsValue
 Body: {
    assertFalse(INSTANCE.containsValue("blah"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsValue (Alternative Action: containsValue=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testIsEmpty
 Body: {
    assertTrue(INSTANCE.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testSize
 Body: {
    assertEquals(0, INSTANCE.size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testContainsColumn
 Body: {
    assertFalse(INSTANCE.containsColumn(1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsColumn (Alternative Action: containsColumn=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testContainsRow
 Body: {
    assertFalse(INSTANCE.containsRow('a'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsRow (Alternative Action: containsRow=1 ) - Predicate: N/A - Scenario: INSTANCE (Alternative Scenario:  )

Project: guava
 Class: EmptyImmutableTableTest
 Method: testValues
 Body: {
    assertTrue(INSTANCE.values().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: values=1 ) - Predicate: N/A - Scenario: INSTANCE.values() (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_nonStaticFieldNotUsed
 Body: {
    assertNull(ArbitraryInstances.get(NonStaticFieldIgnored.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_usePublicConstant
 Body: {
    assertSame(WithPublicConstant.INSTANCE, ArbitraryInstances.get(WithPublicConstant.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_interface
 Body: {
    assertNull(ArbitraryInstances.get(SomeInterface.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_functors
 Body: {
    assertEquals(0, ArbitraryInstances.get(Comparator.class).compare("abc", 123));
    assertTrue(ArbitraryInstances.get(Predicate.class).apply("abc"));
    assertTrue(ArbitraryInstances.get(Equivalence.class).equivalent(1, 1));
    assertFalse(ArbitraryInstances.get(Equivalence.class).equivalent(1, 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: compare (Alternative Action: get=4 ) - Predicate: N/A - Scenario: ArbitraryInstances.get(Comparator.class) (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_class
 Body: {
    assertSame(SomeAbstractClass.INSTANCE, ArbitraryInstances.get(SomeAbstractClass.class));
    assertSame(
        WithPrivateConstructor.INSTANCE, ArbitraryInstances.get(WithPrivateConstructor.class));
    assertNull(ArbitraryInstances.get(NoDefaultConstructor.class));
    assertSame(
        WithExceptionalConstructor.INSTANCE,
        ArbitraryInstances.get(WithExceptionalConstructor.class));
    assertNull(ArbitraryInstances.get(NonPublicClass.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=5 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_nullConstant
 Body: {
    assertNull(ArbitraryInstances.get(WithNullConstant.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_constantWithGenericsNotUsed
 Body: {
    assertNull(ArbitraryInstances.get(WithGenericConstant.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_enum
 Body: {
    assertNull(ArbitraryInstances.get(EmptyEnum.class));
    assertEquals(Direction.UP, ArbitraryInstances.get(Direction.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=2 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_reflect
 Body: {
    assertNotNull(ArbitraryInstances.get(Type.class));
    assertNotNull(ArbitraryInstances.get(AnnotatedElement.class));
    assertNotNull(ArbitraryInstances.get(GenericDeclaration.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=3 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_nonPublicConstantNotUsed
 Body: {
    assertNull(ArbitraryInstances.get(NonPublicConstantIgnored.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_constructorPreferredOverConstants
 Body: {
    assertNotNull(ArbitraryInstances.get(WithPublicConstructorAndConstant.class));
    assertTrue(
        ArbitraryInstances.get(WithPublicConstructorAndConstant.class)
            != ArbitraryInstances.get(WithPublicConstructorAndConstant.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=3 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_useFirstPublicConstant
 Body: {
    assertSame(WithPublicConstants.FIRST, ArbitraryInstances.get(WithPublicConstants.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_constantTypeDoesNotMatch
 Body: {
    assertNull(ArbitraryInstances.get(ParentClassHasConstant.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_nonFinalFieldNotUsed
 Body: {
    assertNull(ArbitraryInstances.get(NonFinalFieldIgnored.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_nullConstantIgnored
 Body: {
    assertSame(FirstConstantIsNull.SECOND, ArbitraryInstances.get(FirstConstantIsNull.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_mutable
 Body: {
    assertEquals(0, ArbitraryInstances.get(ArrayList.class).size());
    assertEquals(0, ArbitraryInstances.get(HashMap.class).size());
    assertThat(ArbitraryInstances.get(Appendable.class).toString()).isEmpty();
    assertThat(ArbitraryInstances.get(StringBuilder.class).toString()).isEmpty();
    assertThat(ArbitraryInstances.get(StringBuffer.class).toString()).isEmpty();
    assertFreshInstanceReturned(
        ArrayList.class,
        HashMap.class,
        Appendable.class,
        StringBuilder.class,
        StringBuffer.class,
        Throwable.class,
        Exception.class);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: get=5 ) - Predicate: N/A - Scenario: ArbitraryInstances.get(ArrayList.class) (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testSingletonMapLast
 Body: {
    assertEquals(a, navigableMap.lastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testPollLast
 Body: {
    assertEquals(c, navigableMap.pollLastEntry());
    assertEquals(
        entries.subList(0, entries.size() - 1), Helpers.copyToList(navigableMap.entrySet()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: copyToList=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testEmptyMapPollFirst
 Body: {
    assertNull(navigableMap.pollFirstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirstEntry (Alternative Action: pollFirstEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testEmptyMapFirst
 Body: {
    assertNull(navigableMap.firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: firstEntry (Alternative Action: firstEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testSingletonMapPollLast
 Body: {
    assertEquals(a, navigableMap.pollLastEntry());
    assertTrue(navigableMap.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testSingletonMapPollFirst
 Body: {
    assertEquals(a, navigableMap.pollFirstEntry());
    assertTrue(navigableMap.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirstEntry (Alternative Action: pollFirstEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testSingletonMapFirst
 Body: {
    assertEquals(a, navigableMap.firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: firstEntry (Alternative Action: firstEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testEmptyMapLast
 Body: {
    assertNull(navigableMap.lastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testLast
 Body: {
    assertEquals(c, navigableMap.lastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testEmptyMapPollLast
 Body: {
    assertNull(navigableMap.pollLastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: pollLastEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: NavigableMapNavigationTester
 Method: testFirst
 Body: {
    assertEquals(a, navigableMap.firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: firstEntry (Alternative Action: firstEntry=1 ) - Predicate: N/A - Scenario: navigableMap (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testReadArrayRange
 Body: {
    assertEquals(3, counter.read(new byte[10], 1, 3));
    assertEquals(3, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: read=1 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testSkip
 Body: {
    assertEquals(10, counter.skip(10));
    assertEquals(10, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: skip (Alternative Action: skip=1 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testReadArrayEOF
 Body: {
    assertEquals(20, counter.read(new byte[30]));
    assertEquals(20, counter.getCount());
    assertEquals(-1, counter.read(new byte[30]));
    assertEquals(20, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: read=2 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testSkipEOF
 Body: {
    assertEquals(20, counter.skip(30));
    assertEquals(20, counter.getCount());
    assertEquals(0, counter.skip(20));
    assertEquals(20, counter.getCount());

    // Test reading a single byte while we're in the right state
    assertEquals(-1, counter.read());
    assertEquals(20, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: skip (Alternative Action: getCount=3 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testReadSingleByte
 Body: {
    assertEquals(0, counter.getCount());
    assertEquals(0, counter.read());
    assertEquals(1, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getCount (Alternative Action: getCount=2 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CountingInputStreamTest
 Method: testReadArray
 Body: {
    assertEquals(10, counter.read(new byte[10]));
    assertEquals(10, counter.getCount());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: read=1 ) - Predicate: N/A - Scenario: counter (Alternative Scenario:  )

Project: guava
 Class: CollectionToStringTester
 Method: testToString_size0
 Body: {
    assertEquals("emptyCollection.toString should return []", "[]", collection.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: CollectionToStringTester
 Method: testToString_minimal
 Body: {
    assertNotNull("toString() should not return null", collection.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: CollectionToStringTester
 Method: testToString_size1
 Body: {
    assertEquals(
        "size1Collection.toString should return [{element}]",
        "[" + e0() + "]",
        collection.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: MapIsEmptyTester
 Method: testIsEmpty_yes
 Body: {
    assertTrue("isEmpty() should return true", getMap().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: MapIsEmptyTester
 Method: testIsEmpty_no
 Body: {
    assertFalse("isEmpty() should return false", getMap().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: DiscreteDomainTest
 Method: testLongsOffset
 Body: {
    assertEquals(1, DiscreteDomain.longs().offset(0L, 1).longValue());
    assertEquals(Long.MAX_VALUE, DiscreteDomain.longs().offset(0L, Long.MAX_VALUE).longValue());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: longValue (Alternative Action: longs=2 ) - Predicate: N/A - Scenario: DiscreteDomain.longs().offset(0L, 1) (Alternative Scenario:  )

Project: guava
 Class: DiscreteDomainTest
 Method: testBigIntegersOffset
 Body: {
    assertEquals(BigInteger.ONE, DiscreteDomain.bigIntegers().offset(BigInteger.ZERO, 1));
    assertEquals(
        BigInteger.valueOf(Long.MAX_VALUE),
        DiscreteDomain.bigIntegers().offset(BigInteger.ZERO, Long.MAX_VALUE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: offset (Alternative Action: offset=2 ) - Predicate: N/A - Scenario: DiscreteDomain.bigIntegers() (Alternative Scenario:  )

Project: guava
 Class: DiscreteDomainTest
 Method: testIntegersOffset
 Body: {
    assertEquals(1, DiscreteDomain.integers().offset(0, 1).intValue());
    assertEquals(
        Integer.MAX_VALUE,
        DiscreteDomain.integers().offset(Integer.MIN_VALUE, (1L << 32) - 1).intValue());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: intValue (Alternative Action: offset=2 ) - Predicate: N/A - Scenario: DiscreteDomain.integers().offset(0, 1) (Alternative Scenario:  )

Project: guava
 Class: MutableTypeToInstanceMapTest
 Method: testPrimitiveAndWrapper
 Body: {
    assertNull(map.getInstance(int.class));
    assertNull(map.getInstance(Integer.class));

    assertNull(map.putInstance(int.class, 0));
    assertNull(map.putInstance(Integer.class, 1));
    assertEquals(2, map.size());

    assertEquals(0, (int) map.getInstance(int.class));
    assertEquals(1, (int) map.getInstance(Integer.class));

    assertEquals(0, (int) map.putInstance(int.class, null));
    assertEquals(1, (int) map.putInstance(Integer.class, null));

    assertNull(map.getInstance(int.class));
    assertNull(map.getInstance(Integer.class));
    assertEquals(2, map.size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getInstance (Alternative Action: getInstance=6 ) - Predicate: N/A - Scenario: map (Alternative Scenario:  )

Project: guava
 Class: ListsTest
 Method: testPartitionSize_2
 Body: {
    assertEquals(2, Lists.partition(Collections.nCopies(0x40000001, 1), 0x40000000).size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: nCopies=1 ) - Predicate: N/A - Scenario: Lists.partition(Collections.nCopies(0x40000001, 1), 0x40000000) (Alternative Scenario:  )

Project: guava
 Class: ListsTest
 Method: testCartesianProduct_binary1x1
 Body: {
    assertThat(Lists.cartesianProduct(list(1), list(2))).contains(list(1, 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: list (Alternative Action: list=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ListsTest
 Method: testComputeArrayListCapacity
 Body: {
    assertEquals(5, Lists.computeArrayListCapacity(0));
    assertEquals(13, Lists.computeArrayListCapacity(8));
    assertEquals(89, Lists.computeArrayListCapacity(77));
    assertEquals(22000005, Lists.computeArrayListCapacity(20000000));
    assertEquals(Integer.MAX_VALUE, Lists.computeArrayListCapacity(Integer.MAX_VALUE - 1000));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: computeArrayListCapacity (Alternative Action: computeArrayListCapacity=5 ) - Predicate: N/A - Scenario: Lists (Alternative Scenario:  )

Project: guava
 Class: CharSourceTest
 Method: testRead_toString
 Body: {
    assertEquals(STRING, source.read());
    assertTrue(source.wasStreamOpened() && source.wasStreamClosed());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: wasStreamClosed=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testDivide
 Body: {
    assertEquals(2, UnsignedLongs.divide(14, 5));
    assertEquals(0, UnsignedLongs.divide(0, 50));
    assertEquals(1, UnsignedLongs.divide(0xfffffffffffffffeL, 0xfffffffffffffffdL));
    assertEquals(0, UnsignedLongs.divide(0xfffffffffffffffdL, 0xfffffffffffffffeL));
    assertEquals(281479271743488L, UnsignedLongs.divide(0xfffffffffffffffeL, 65535));
    assertEquals(0x7fffffffffffffffL, UnsignedLongs.divide(0xfffffffffffffffeL, 2));
    assertEquals(3689348814741910322L, UnsignedLongs.divide(0xfffffffffffffffeL, 5));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: divide (Alternative Action: divide=7 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testJoin
 Body: {
    assertEquals("", UnsignedLongs.join(","));
    assertEquals("1", UnsignedLongs.join(",", 1));
    assertEquals("1,2", UnsignedLongs.join(",", 1, 2));
    assertEquals(
        "18446744073709551615,9223372036854775808", UnsignedLongs.join(",", -1, Long.MIN_VALUE));
    assertEquals("123", UnsignedLongs.join("", 1, 2, 3));
    assertEquals(
        "184467440737095516159223372036854775808", UnsignedLongs.join("", -1, Long.MIN_VALUE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=6 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testDecodeLong
 Body: {
    assertEquals(0xffffffffffffffffL, UnsignedLongs.decode("0xffffffffffffffff"));
    assertEquals(01234567, UnsignedLongs.decode("01234567")); // octal
    assertEquals(0x1234567890abcdefL, UnsignedLongs.decode("#1234567890abcdef"));
    assertEquals(987654321012345678L, UnsignedLongs.decode("987654321012345678"));
    assertEquals(0x135791357913579L, UnsignedLongs.decode("0x135791357913579"));
    assertEquals(0x135791357913579L, UnsignedLongs.decode("0X135791357913579"));
    assertEquals(0L, UnsignedLongs.decode("0"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: decode (Alternative Action: decode=7 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testMin
 Body: {
    assertEquals(LEAST, UnsignedLongs.min(LEAST));
    assertEquals(GREATEST, UnsignedLongs.min(GREATEST));
    assertEquals(
        0L,
        UnsignedLongs.min(
            0x5a4316b8c153ac4dL, 8L, 100L, 0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testParseLong
 Body: {
    assertEquals(0xffffffffffffffffL, UnsignedLongs.parseUnsignedLong("18446744073709551615"));
    assertEquals(0x7fffffffffffffffL, UnsignedLongs.parseUnsignedLong("9223372036854775807"));
    assertEquals(0xff1a618b7f65ea12L, UnsignedLongs.parseUnsignedLong("18382112080831834642"));
    assertEquals(0x5a4316b8c153ac4dL, UnsignedLongs.parseUnsignedLong("6504067269626408013"));
    assertEquals(0x6cf78a4b139a4e2aL, UnsignedLongs.parseUnsignedLong("7851896530399809066"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: parseUnsignedLong (Alternative Action: parseUnsignedLong=5 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testRemainder
 Body: {
    assertEquals(4, UnsignedLongs.remainder(14, 5));
    assertEquals(0, UnsignedLongs.remainder(0, 50));
    assertEquals(1, UnsignedLongs.remainder(0xfffffffffffffffeL, 0xfffffffffffffffdL));
    assertEquals(
        0xfffffffffffffffdL, UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));
    assertEquals(65534L, UnsignedLongs.remainder(0xfffffffffffffffeL, 65535));
    assertEquals(0, UnsignedLongs.remainder(0xfffffffffffffffeL, 2));
    assertEquals(4, UnsignedLongs.remainder(0xfffffffffffffffeL, 5));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: remainder (Alternative Action: remainder=7 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testMax
 Body: {
    assertEquals(LEAST, UnsignedLongs.max(LEAST));
    assertEquals(GREATEST, UnsignedLongs.max(GREATEST));
    assertEquals(
        0xff1a618b7f65ea12L,
        UnsignedLongs.max(
            0x5a4316b8c153ac4dL, 8L, 100L, 0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testParseLongWithRadix
 Body: {
    assertEquals(0xffffffffffffffffL, UnsignedLongs.parseUnsignedLong("ffffffffffffffff", 16));
    assertEquals(0x1234567890abcdefL, UnsignedLongs.parseUnsignedLong("1234567890abcdef", 16));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: parseUnsignedLong (Alternative Action: parseUnsignedLong=2 ) - Predicate: N/A - Scenario: UnsignedLongs (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testIndexOf_arrayTarget
 Body: {
    assertEquals(0, Bytes.indexOf(EMPTY, EMPTY));
    assertEquals(0, Bytes.indexOf(ARRAY234, EMPTY));
    assertEquals(-1, Bytes.indexOf(EMPTY, ARRAY234));
    assertEquals(-1, Bytes.indexOf(ARRAY234, ARRAY1));
    assertEquals(-1, Bytes.indexOf(ARRAY1, ARRAY234));
    assertEquals(0, Bytes.indexOf(ARRAY1, ARRAY1));
    assertEquals(0, Bytes.indexOf(ARRAY234, ARRAY234));
    assertEquals(0, Bytes.indexOf(ARRAY234, new byte[] {(byte) 2, (byte) 3}));
    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] {(byte) 3, (byte) 4}));
    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] {(byte) 3}));
    assertEquals(2, Bytes.indexOf(ARRAY234, new byte[] {(byte) 4}));
    assertEquals(
        1,
        Bytes.indexOf(
            new byte[] {(byte) 2, (byte) 3, (byte) 3, (byte) 3, (byte) 3}, new byte[] {(byte) 3}));
    assertEquals(
        2,
        Bytes.indexOf(
            new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 4, (byte) 2, (byte) 3},
            new byte[] {(byte) 2, (byte) 3, (byte) 4}));
    assertEquals(
        1,
        Bytes.indexOf(
            new byte[] {(byte) 2, (byte) 2, (byte) 3, (byte) 4, (byte) 2, (byte) 3, (byte) 4},
            new byte[] {(byte) 2, (byte) 3, (byte) 4}));
    assertEquals(
        -1,
        Bytes.indexOf(
            new byte[] {(byte) 4, (byte) 3, (byte) 2}, new byte[] {(byte) 2, (byte) 3, (byte) 4}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=15 ) - Predicate: N/A - Scenario: Bytes (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testContains
 Body: {
    assertFalse(Bytes.contains(EMPTY, (byte) 1));
    assertFalse(Bytes.contains(ARRAY1, (byte) 2));
    assertFalse(Bytes.contains(ARRAY234, (byte) 1));
    assertTrue(Bytes.contains(new byte[] {(byte) -1}, (byte) -1));
    assertTrue(Bytes.contains(ARRAY234, (byte) 2));
    assertTrue(Bytes.contains(ARRAY234, (byte) 3));
    assertTrue(Bytes.contains(ARRAY234, (byte) 4));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=7 ) - Predicate: N/A - Scenario: Bytes (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Bytes.indexOf(EMPTY, (byte) 1));
    assertEquals(-1, Bytes.indexOf(ARRAY1, (byte) 2));
    assertEquals(-1, Bytes.indexOf(ARRAY234, (byte) 1));
    assertEquals(0, Bytes.indexOf(new byte[] {(byte) -1}, (byte) -1));
    assertEquals(0, Bytes.indexOf(ARRAY234, (byte) 2));
    assertEquals(1, Bytes.indexOf(ARRAY234, (byte) 3));
    assertEquals(2, Bytes.indexOf(ARRAY234, (byte) 4));
    assertEquals(1, Bytes.indexOf(new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3}, (byte) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=8 ) - Predicate: N/A - Scenario: Bytes (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Bytes.lastIndexOf(EMPTY, (byte) 1));
    assertEquals(-1, Bytes.lastIndexOf(ARRAY1, (byte) 2));
    assertEquals(-1, Bytes.lastIndexOf(ARRAY234, (byte) 1));
    assertEquals(0, Bytes.lastIndexOf(new byte[] {(byte) -1}, (byte) -1));
    assertEquals(0, Bytes.lastIndexOf(ARRAY234, (byte) 2));
    assertEquals(1, Bytes.lastIndexOf(ARRAY234, (byte) 3));
    assertEquals(2, Bytes.lastIndexOf(ARRAY234, (byte) 4));
    assertEquals(
        3, Bytes.lastIndexOf(new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3}, (byte) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=8 ) - Predicate: N/A - Scenario: Bytes (Alternative Scenario:  )

Project: guava
 Class: BloomFilterTest
 Method: testOptimalNumOfHashFunctionsRounding
 Body: {
    assertEquals(7, BloomFilter.optimalNumOfHashFunctions(319, 3072));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: optimalNumOfHashFunctions (Alternative Action: optimalNumOfHashFunctions=1 ) - Predicate: N/A - Scenario: BloomFilter (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testPollLast
 Body: {
    assertEquals(c, sortedMultiset.pollLastEntry());
    assertEquals(Arrays.asList(a, b), copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: copyToList=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSingletonMultisetNearby
 Body: {
    assertNull(sortedMultiset.headMultiset(e0(), OPEN).lastEntry());
    assertNull(sortedMultiset.tailMultiset(e0(), OPEN).lastEntry());

    assertEquals(a, sortedMultiset.headMultiset(e0(), CLOSED).lastEntry());
    assertEquals(a, sortedMultiset.tailMultiset(e0(), CLOSED).firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: e0=4 ) - Predicate: N/A - Scenario: sortedMultiset.headMultiset(e0(), OPEN) (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSingletonMultisetPollFirst
 Body: {
    assertEquals(a, sortedMultiset.pollFirstEntry());
    assertTrue(sortedMultiset.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirstEntry (Alternative Action: pollFirstEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testFirst
 Body: {
    assertEquals(a, sortedMultiset.firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: firstEntry (Alternative Action: firstEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testLast
 Body: {
    assertEquals(c, sortedMultiset.lastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testEmptyMultisetPollFirst
 Body: {
    assertNull(sortedMultiset.pollFirstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirstEntry (Alternative Action: pollFirstEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSingletonMultisetPollLast
 Body: {
    assertEquals(a, sortedMultiset.pollLastEntry());
    assertTrue(sortedMultiset.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSingletonMultisetFirst
 Body: {
    assertEquals(a, sortedMultiset.firstEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: firstEntry (Alternative Action: firstEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testEmptyMultisetPollLast
 Body: {
    assertNull(sortedMultiset.pollLastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLastEntry (Alternative Action: pollLastEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSingletonMultisetLast
 Body: {
    assertEquals(a, sortedMultiset.lastEntry());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testPollFirst
 Body: {
    assertEquals(a, sortedMultiset.pollFirstEntry());
    assertEquals(Arrays.asList(b, c), copyToList(sortedMultiset.entrySet()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirstEntry (Alternative Action: copyToList=1 ) - Predicate: N/A - Scenario: sortedMultiset (Alternative Scenario:  )

Project: guava
 Class: ThreadFactoryBuilderTest
 Method: testUncaughtExceptionHandler_custom
 Body: {
    assertEquals(
        UNCAUGHT_EXCEPTION_HANDLER,
        builder
            .setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER)
            .build()
            .newThread(monitoredRunnable)
            .getUncaughtExceptionHandler());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getUncaughtExceptionHandler (Alternative Action: newThread=1 ) - Predicate: N/A - Scenario: builder
            .setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER)
            .build()
            .newThread(monitoredRunnable) (Alternative Scenario:  )

Project: guava
 Class: MultimapContainsValueTester
 Method: testContainsNullValueNo
 Body: {
    assertFalse(multimap().containsValue(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsValue (Alternative Action: multimap=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapToStringTester
 Method: testToStringSingleton
 Body: {
    assertEquals("{" + k0() + "=[" + v0() + "]}", multimap().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: k0=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapToStringTester
 Method: testToStringEmpty
 Body: {
    assertEquals("{}", multimap().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: edgesConnecting_parallelSelfLoopEdges
 Body: {
    assertTrue(addEdge(N1, N1, E11));
    assertTrue(addEdge(N1, N1, E11_A));
    assertThat(network.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: addEdge_parallelSelfLoopEdge
 Body: {
    assertTrue(addEdge(N1, N1, E11));
    assertTrue(addEdge(N1, N1, E11_A));
    assertThat(network.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: addEdge_parallelEdge
 Body: {
    assertTrue(addEdge(N1, N2, E12));
    assertTrue(addEdge(N1, N2, E12_A));
    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableDirectedMultiNetworkTest
 Method: edgesConnecting_parallelEdges
 Body: {
    assertTrue(addEdge(N1, N2, E12));
    assertTrue(addEdge(N1, N2, E12_A));
    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);
    // Passed nodes should be in the correct edge direction, first is the
    // source node and the second is the target node
    assertThat(network.edgesConnecting(N2, N1)).isEmpty();
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: edgesConnecting=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ResourcesTest
 Method: testGetResource
 Body: {
    assertNotNull(Resources.getResource("com/google/common/io/testdata/i18n.txt"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getResource (Alternative Action: getResource=1 ) - Predicate: N/A - Scenario: Resources (Alternative Scenario:  )

Project: guava
 Class: CharSourceTester
 Method: testReadLines_toList
 Body: {
    assertExpectedLines(source.readLines());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: readLines (Alternative Action: readLines=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: AtomicsTest
 Method: testNewReference_withInitialValue
 Body: {
    assertEquals(null, Atomics.newReference(null).get());
    assertEquals(OBJECT, Atomics.newReference(OBJECT).get());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=2 ) - Predicate: N/A - Scenario: Atomics.newReference(null) (Alternative Scenario:  )

Project: guava
 Class: AtomicsTest
 Method: testNewReference
 Body: {
    assertEquals(null, Atomics.newReference().get());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: Atomics.newReference() (Alternative Scenario:  )

Project: guava
 Class: SupplementalMonitorTest
 Method: testIsFair
 Body: {
    assertTrue(new Monitor(true).isFair());
    assertFalse(new Monitor(false).isFair());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isFair (Alternative Action: isFair=2 ) - Predicate: N/A - Scenario: new Monitor(true) (Alternative Scenario:  )

Project: guava
 Class: SipHashFunctionTest
 Method: testToString
 Body: {
    assertEquals("Hashing.sipHash24(" + K0 + ", " + K1 + ")", SIP_WITH_KEY.toString());
    assertEquals("Hashing.sipHash24(" + K0 + ", " + K1 + ")", SIP_WITHOUT_KEY.toString());
    assertEquals("Hashing.sipHash24(20, 13)", Hashing.sipHash24(20, 13).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=3 ) - Predicate: N/A - Scenario: SIP_WITH_KEY (Alternative Scenario:  )

Project: guava
 Class: FuturesGetCheckedTest
 Method: testGetCheckedUntimed_success
 Body: {
    assertEquals("foo", getChecked(immediateFuture("foo"), TwoArgConstructorException.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getChecked (Alternative Action: immediateFuture=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FuturesGetCheckedTest
 Method: testGetCheckedTimed_success
 Body: {
    assertEquals(
        "foo", getChecked(immediateFuture("foo"), TwoArgConstructorException.class, 0, SECONDS));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getChecked (Alternative Action: immediateFuture=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ImmutableClassToInstanceMapTest
 Method: testOf_zero
 Body: {
    assertTrue(ImmutableClassToInstanceMap.of().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableClassToInstanceMap.of() (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testStringConverter_nullConversions
 Body: {
    assertNull(Floats.stringConverter().convert(null));
    assertNull(Floats.stringConverter().reverse().convert(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: convert=2 ) - Predicate: N/A - Scenario: Floats.stringConverter() (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testJoin
 Body: {
    assertEquals("", Floats.join(",", EMPTY));
    assertEquals("1.0", Floats.join(",", ARRAY1));
    assertEquals("1.0,2.0", Floats.join(",", (float) 1, (float) 2));
    assertEquals("1.02.03.0", Floats.join("", (float) 1, (float) 2, (float) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Floats (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_annotation
 Body: {
    assertNull(tester.instantiate(MyAnnotation.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_interface
 Body: {
    assertNull(tester.instantiate(Runnable.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_noConstantEnum
 Body: {
    assertNull(tester.instantiate(NoConstantEnum.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_oneConstantEnum
 Body: {
    assertEquals(OneConstantEnum.A, tester.instantiate(OneConstantEnum.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_notInstantiable
 Body: {
    assertNull(tester.instantiate(NotInstantiable.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testInstantiate_abstractClass
 Body: {
    assertNull(tester.instantiate(AbstractList.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: instantiate (Alternative Action: instantiate=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testPollLast
 Body: {
    assertEquals(c, navigableSet.pollLast());
    assertEquals(values.subList(0, values.size() - 1), Helpers.copyToList(navigableSet));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLast (Alternative Action: copyToList=1 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testSingletonSetPollLast
 Body: {
    assertEquals(a, navigableSet.pollLast());
    assertTrue(navigableSet.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLast (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testLower
 Body: {
    assertEquals(null, navigableSet.lower(a));
    assertEquals(a, navigableSet.lower(b));
    assertEquals(b, navigableSet.lower(c));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lower (Alternative Action: lower=3 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testFloor
 Body: {
    assertEquals(a, navigableSet.floor(a));
    assertEquals(b, navigableSet.floor(b));
    assertEquals(c, navigableSet.floor(c));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: floor (Alternative Action: floor=3 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testEmptySetPollLast
 Body: {
    assertNull(navigableSet.pollLast());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollLast (Alternative Action: pollLast=1 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testSingletonSetPollFirst
 Body: {
    assertEquals(a, navigableSet.pollFirst());
    assertTrue(navigableSet.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirst (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testHigher
 Body: {
    assertEquals(b, navigableSet.higher(a));
    assertEquals(c, navigableSet.higher(b));
    assertEquals(null, navigableSet.higher(c));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: higher (Alternative Action: higher=3 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testCeiling
 Body: {
    assertEquals(a, navigableSet.ceiling(a));
    assertEquals(b, navigableSet.ceiling(b));
    assertEquals(c, navigableSet.ceiling(c));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: ceiling (Alternative Action: ceiling=3 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: NavigableSetNavigationTester
 Method: testEmptySetPollFirst
 Body: {
    assertNull(navigableSet.pollFirst());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: pollFirst (Alternative Action: pollFirst=1 ) - Predicate: N/A - Scenario: navigableSet (Alternative Scenario:  )

Project: guava
 Class: MutableClassToInstanceMapTest
 Method: testPrimitiveAndWrapper
 Body: {
    assertNull(map.getInstance(int.class));
    assertNull(map.getInstance(Integer.class));

    assertNull(map.putInstance(int.class, 0));
    assertNull(map.putInstance(Integer.class, 1));
    assertEquals(2, map.size());

    assertEquals(0, (int) map.getInstance(int.class));
    assertEquals(1, (int) map.getInstance(Integer.class));

    assertEquals(0, (int) map.putInstance(int.class, null));
    assertEquals(1, (int) map.putInstance(Integer.class, null));

    assertNull(map.getInstance(int.class));
    assertNull(map.getInstance(Integer.class));
    assertEquals(2, map.size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getInstance (Alternative Action: getInstance=6 ) - Predicate: N/A - Scenario: map (Alternative Scenario:  )

Project: guava
 Class: ClassPathTest
 Method: testGetPackageName
 Body: {
    assertEquals("", new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());
    assertEquals(
        "a.b", new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getPackageName (Alternative Action: getClass=2 ) - Predicate: N/A - Scenario: new ClassInfo("Foo.class", getClass().getClassLoader()) (Alternative Scenario:  )

Project: guava
 Class: ClassPathTest
 Method: testGetClassName
 Body: {
    assertEquals("abc.d.Abc", ClassPath.getClassName("abc/d/Abc.class"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getClassName (Alternative Action: getClassName=1 ) - Predicate: N/A - Scenario: ClassPath (Alternative Scenario:  )

Project: guava
 Class: ClassPathTest
 Method: testResourceInfo_of
 Body: {
    assertEquals(ClassInfo.class, resourceInfo(ClassPathTest.class).getClass());
    assertEquals(ClassInfo.class, resourceInfo(ClassPath.class).getClass());
    assertEquals(ClassInfo.class, resourceInfo(Nested.class).getClass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getClass (Alternative Action: getClass=3 ) - Predicate: N/A - Scenario: resourceInfo(ClassPathTest.class) (Alternative Scenario:  )

Project: guava
 Class: StopwatchTest
 Method: testStart
 Body: {
    assertSame(stopwatch, stopwatch.start());
    assertTrue(stopwatch.isRunning());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: start (Alternative Action: isRunning=1 ) - Predicate: N/A - Scenario: stopwatch (Alternative Scenario:  )

Project: guava
 Class: StopwatchTest
 Method: testInitialState
 Body: {
    assertFalse(stopwatch.isRunning());
    assertEquals(0, stopwatch.elapsed(NANOSECONDS));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isRunning (Alternative Action: elapsed=1 ) - Predicate: N/A - Scenario: stopwatch (Alternative Scenario:  )

Project: guava
 Class: EnumsTest
 Method: testStringConverter_toString
 Body: {
    assertEquals(
        "Enums.stringConverter(com.google.common.base.EnumsTest$TestEnum.class)",
        Enums.stringConverter(TestEnum.class).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: Enums.stringConverter(TestEnum.class) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListContains
 Body: {
    assertFalse(Booleans.asList(EMPTY).contains((Object) "wrong type"));
    assertFalse(Booleans.asList(EMPTY).contains(true));
    assertFalse(Booleans.asList(ARRAY_FALSE).contains(true));
    assertTrue(Booleans.asList(ARRAY_TRUE).contains(true));
    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(false));
    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=6 ) - Predicate: N/A - Scenario: Booleans.asList(EMPTY) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testFalseFirst
 Body: {
    assertEquals(0, Booleans.falseFirst().compare(true, true));
    assertEquals(0, Booleans.falseFirst().compare(false, false));
    assertTrue(Booleans.falseFirst().compare(false, true) < 0);
    assertTrue(Booleans.falseFirst().compare(true, false) > 0);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: compare (Alternative Action: compare=4 ) - Predicate: N/A - Scenario: Booleans.falseFirst() (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListSize
 Body: {
    assertEquals(0, Booleans.asList(EMPTY).size());
    assertEquals(1, Booleans.asList(ARRAY_FALSE).size());
    assertEquals(2, Booleans.asList(ARRAY_FALSE_TRUE).size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=3 ) - Predicate: N/A - Scenario: Booleans.asList(EMPTY) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testContains
 Body: {
    assertFalse(Booleans.contains(EMPTY, false));
    assertFalse(Booleans.contains(ARRAY_FALSE, true));
    assertTrue(Booleans.contains(ARRAY_FALSE, false));
    assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, false));
    assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=5 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListLastIndexOf
 Body: {
    assertEquals(-1, Booleans.asList(EMPTY).lastIndexOf((Object) "wrong type"));
    assertEquals(-1, Booleans.asList(EMPTY).lastIndexOf(true));
    assertEquals(-1, Booleans.asList(ARRAY_FALSE).lastIndexOf(true));
    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(true));
    assertEquals(1, Booleans.asList(ARRAY_FALSE_FALSE).lastIndexOf(false));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=5 ) - Predicate: N/A - Scenario: Booleans.asList(EMPTY) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Booleans.lastIndexOf(EMPTY, false));
    assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE, true));
    assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE_FALSE, true));
    assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE, false));
    assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, false));
    assertEquals(1, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, true));
    assertEquals(2, Booleans.lastIndexOf(new boolean[] {false, true, true}, true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=7 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListIsEmpty
 Body: {
    assertTrue(Booleans.asList(EMPTY).isEmpty());
    assertFalse(Booleans.asList(ARRAY_FALSE).isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=2 ) - Predicate: N/A - Scenario: Booleans.asList(EMPTY) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testCountTrue
 Body: {
    assertEquals(0, Booleans.countTrue());
    assertEquals(0, Booleans.countTrue(false));
    assertEquals(1, Booleans.countTrue(true));
    assertEquals(3, Booleans.countTrue(false, true, false, true, false, true));
    assertEquals(1, Booleans.countTrue(false, false, true, false, false));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: countTrue (Alternative Action: countTrue=5 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testTrueFirst
 Body: {
    assertEquals(0, Booleans.trueFirst().compare(true, true));
    assertEquals(0, Booleans.trueFirst().compare(false, false));
    assertTrue(Booleans.trueFirst().compare(true, false) < 0);
    assertTrue(Booleans.trueFirst().compare(false, true) > 0);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: compare (Alternative Action: compare=4 ) - Predicate: N/A - Scenario: Booleans.trueFirst() (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testIndexOf_arrays
 Body: {
    assertEquals(-1, Booleans.indexOf(EMPTY, false));
    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, true));
    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE_FALSE, true));
    assertEquals(0, Booleans.indexOf(ARRAY_FALSE, false));
    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, false));
    assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, true));
    assertEquals(2, Booleans.indexOf(new boolean[] {false, false, true}, true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=7 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListIndexOf
 Body: {
    assertEquals(-1, Booleans.asList(EMPTY).indexOf((Object) "wrong type"));
    assertEquals(-1, Booleans.asList(EMPTY).indexOf(true));
    assertEquals(-1, Booleans.asList(ARRAY_FALSE).indexOf(true));
    assertEquals(0, Booleans.asList(ARRAY_FALSE).indexOf(false));
    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).indexOf(true));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=5 ) - Predicate: N/A - Scenario: Booleans.asList(EMPTY) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testJoin
 Body: {
    assertEquals("", Booleans.join(",", EMPTY));
    assertEquals("false", Booleans.join(",", ARRAY_FALSE));
    assertEquals("false,true", Booleans.join(",", false, true));
    assertEquals("falsetruefalse", Booleans.join("", false, true, false));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testAsListToString
 Body: {
    assertEquals("[false]", Booleans.asList(ARRAY_FALSE).toString());
    assertEquals("[false, true]", Booleans.asList(ARRAY_FALSE_TRUE).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=2 ) - Predicate: N/A - Scenario: Booleans.asList(ARRAY_FALSE) (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Booleans.indexOf(EMPTY, ARRAY_FALSE));
    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE_TRUE));
    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_FALSE, ARRAY_FALSE));
    assertEquals(0, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE));
    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_FALSE));
    assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_TRUE));
    assertEquals(0, Booleans.indexOf(ARRAY_TRUE, new boolean[0]));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=7 ) - Predicate: N/A - Scenario: Booleans (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testOrNull_present
 Body: {
    assertEquals("a", Optional.of("a").orNull());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: orNull (Alternative Action: of=1 ) - Predicate: N/A - Scenario: Optional.of("a") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testToString_present
 Body: {
    assertEquals("Optional.of(training)", Optional.of("training").toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: of=1 ) - Predicate: N/A - Scenario: Optional.of("training") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testOf
 Body: {
    assertEquals("training", Optional.of("training").get());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: of=1 ) - Predicate: N/A - Scenario: Optional.of("training") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testFromJavaUtil
 Body: {
    assertNull(Optional.fromJavaUtil(null));
    assertEquals(Optional.absent(), Optional.fromJavaUtil(java.util.Optional.empty()));
    assertEquals(Optional.of("abc"), Optional.fromJavaUtil(java.util.Optional.of("abc")));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromJavaUtil (Alternative Action: fromJavaUtil=3 ) - Predicate: N/A - Scenario: Optional (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testAsSet_absent
 Body: {
    assertTrue("Returned set should be empty", Optional.absent().asSet().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: Optional.absent().asSet() (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testIsPresent_yes
 Body: {
    assertTrue(Optional.of("training").isPresent());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isPresent (Alternative Action: of=1 ) - Predicate: N/A - Scenario: Optional.of("training") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testToJavaUtil_static
 Body: {
    assertNull(Optional.toJavaUtil(null));
    assertEquals(java.util.Optional.empty(), Optional.toJavaUtil(Optional.absent()));
    assertEquals(java.util.Optional.of("abc"), Optional.toJavaUtil(Optional.of("abc")));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toJavaUtil (Alternative Action: toJavaUtil=3 ) - Predicate: N/A - Scenario: Optional (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testToString_absent
 Body: {
    assertEquals("Optional.absent()", Optional.absent().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: absent=1 ) - Predicate: N/A - Scenario: Optional.absent() (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testOrNull_absent
 Body: {
    assertNull(Optional.absent().orNull());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: orNull (Alternative Action: absent=1 ) - Predicate: N/A - Scenario: Optional.absent() (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testGet_present
 Body: {
    assertEquals("training", Optional.of("training").get());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: of=1 ) - Predicate: N/A - Scenario: Optional.of("training") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testOr_T_present
 Body: {
    assertEquals("a", Optional.of("a").or("default"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: or (Alternative Action: or=1 ) - Predicate: N/A - Scenario: Optional.of("a") (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testOr_T_absent
 Body: {
    assertEquals("default", Optional.absent().or("default"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: or (Alternative Action: or=1 ) - Predicate: N/A - Scenario: Optional.absent() (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testIsPresent_no
 Body: {
    assertFalse(Optional.absent().isPresent());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isPresent (Alternative Action: absent=1 ) - Predicate: N/A - Scenario: Optional.absent() (Alternative Scenario:  )

Project: guava
 Class: FeatureUtilTest
 Method: testBuildTesterRequirements_class
 Body: {
    assertEquals(
        FeatureUtil.buildTesterRequirements(ExampleBaseInterfaceTester.class),
        new TesterRequirements(
            Sets.<Feature<?>>newHashSet(ExampleBaseFeature.BASE_FEATURE_1),
            Collections.<Feature<?>>emptySet()));

    assertEquals(
        FeatureUtil.buildTesterRequirements(ExampleDerivedInterfaceTester.class),
        new TesterRequirements(
            Sets.<Feature<?>>newHashSet(
                ExampleBaseFeature.BASE_FEATURE_1, ExampleDerivedFeature.DERIVED_FEATURE_2),
            Collections.<Feature<?>>emptySet()));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: buildTesterRequirements (Alternative Action: emptySet=2 ) - Predicate: N/A - Scenario: FeatureUtil (Alternative Scenario:  )

Project: guava
 Class: FinalizableReferenceQueueTest
 Method: testGetFinalizerUrl
 Body: {
    assertNotNull(getClass().getResource("internal/Finalizer.class"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getResource (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: getClass() (Alternative Scenario:  )

Project: guava
 Class: ImmutableListMultimapTest
 Method: testOf
 Body: {
    assertMultimapEquals(ImmutableListMultimap.of("one", 1), "one", 1);
    assertMultimapEquals(ImmutableListMultimap.of("one", 1, "two", 2), "one", 1, "two", 2);
    assertMultimapEquals(
        ImmutableListMultimap.of("one", 1, "two", 2, "three", 3), "one", 1, "two", 2, "three", 3);
    assertMultimapEquals(
        ImmutableListMultimap.of("one", 1, "two", 2, "three", 3, "four", 4),
        "one",
        1,
        "two",
        2,
        "three",
        3,
        "four",
        4);
    assertMultimapEquals(
        ImmutableListMultimap.of("one", 1, "two", 2, "three", 3, "four", 4, "five", 5),
        "one",
        1,
        "two",
        2,
        "three",
        3,
        "four",
        4,
        "five",
        5);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=5 ) - Predicate: N/A - Scenario: ImmutableListMultimap (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerHyphenToLowerHyphen
 Body: {
    assertEquals("foo", LOWER_HYPHEN.to(LOWER_HYPHEN, "foo"));
    assertEquals("foo-bar", LOWER_HYPHEN.to(LOWER_HYPHEN, "foo-bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_HYPHEN (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerUnderscoreToLowerUnderscore
 Body: {
    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, "foo"));
    assertEquals("foo_bar", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, "foo_bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerCamelToUpperCamel
 Body: {
    assertEquals("Foo", LOWER_CAMEL.to(UPPER_CAMEL, "foo"));
    assertEquals("FooBar", LOWER_CAMEL.to(UPPER_CAMEL, "fooBar"));
    assertEquals("HTTP", LOWER_CAMEL.to(UPPER_CAMEL, "hTTP"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=3 ) - Predicate: N/A - Scenario: LOWER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerUnderscoreToLowerHyphen
 Body: {
    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_HYPHEN, "foo"));
    assertEquals("foo-bar", LOWER_UNDERSCORE.to(LOWER_HYPHEN, "foo_bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testConverterToForward
 Body: {
    assertEquals("FooBar", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).convert("FOO_BAR"));
    assertEquals("fooBar", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).convert("FOO_BAR"));
    assertEquals("FOO_BAR", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).convert("FooBar"));
    assertEquals("FOO_BAR", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).convert("fooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: converterTo=4 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE.converterTo(UPPER_CAMEL) (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerHyphenToLowerCamel
 Body: {
    assertEquals("foo", LOWER_HYPHEN.to(LOWER_CAMEL, "foo"));
    assertEquals("fooBar", LOWER_HYPHEN.to(LOWER_CAMEL, "foo-bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_HYPHEN (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerHyphenToUpperCamel
 Body: {
    assertEquals("Foo", LOWER_HYPHEN.to(UPPER_CAMEL, "foo"));
    assertEquals("FooBar", LOWER_HYPHEN.to(UPPER_CAMEL, "foo-bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_HYPHEN (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperUnderscoreToLowerUnderscore
 Body: {
    assertEquals("foo", UPPER_UNDERSCORE.to(LOWER_UNDERSCORE, "FOO"));
    assertEquals("foo_bar", UPPER_UNDERSCORE.to(LOWER_UNDERSCORE, "FOO_BAR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerUnderscoreToUpperCamel
 Body: {
    assertEquals("Foo", LOWER_UNDERSCORE.to(UPPER_CAMEL, "foo"));
    assertEquals("FooBar", LOWER_UNDERSCORE.to(UPPER_CAMEL, "foo_bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperUnderscoreToLowerCamel
 Body: {
    assertEquals("foo", UPPER_UNDERSCORE.to(LOWER_CAMEL, "FOO"));
    assertEquals("fooBar", UPPER_UNDERSCORE.to(LOWER_CAMEL, "FOO_BAR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperUnderscoreToUpperCamel
 Body: {
    assertEquals("Foo", UPPER_UNDERSCORE.to(UPPER_CAMEL, "FOO"));
    assertEquals("FooBar", UPPER_UNDERSCORE.to(UPPER_CAMEL, "FOO_BAR"));
    assertEquals("HTTP", UPPER_UNDERSCORE.to(UPPER_CAMEL, "H_T_T_P"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=3 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerUnderscoreToLowerCamel
 Body: {
    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_CAMEL, "foo"));
    assertEquals("fooBar", LOWER_UNDERSCORE.to(LOWER_CAMEL, "foo_bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerHyphenToLowerUnderscore
 Body: {
    assertEquals("foo", LOWER_HYPHEN.to(LOWER_UNDERSCORE, "foo"));
    assertEquals("foo_bar", LOWER_HYPHEN.to(LOWER_UNDERSCORE, "foo-bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_HYPHEN (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerCamelToLowerHyphen
 Body: {
    assertEquals("foo", LOWER_CAMEL.to(LOWER_HYPHEN, "foo"));
    assertEquals("foo-bar", LOWER_CAMEL.to(LOWER_HYPHEN, "fooBar"));
    assertEquals("h-t-t-p", LOWER_CAMEL.to(LOWER_HYPHEN, "HTTP"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=3 ) - Predicate: N/A - Scenario: LOWER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperCamelToLowerCamel
 Body: {
    assertEquals("foo", UPPER_CAMEL.to(LOWER_CAMEL, "Foo"));
    assertEquals("fooBar", UPPER_CAMEL.to(LOWER_CAMEL, "FooBar"));
    assertEquals("hTTP", UPPER_CAMEL.to(LOWER_CAMEL, "HTTP"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=3 ) - Predicate: N/A - Scenario: UPPER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testConverterToBackward
 Body: {
    assertEquals("FOO_BAR", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).reverse().convert("FooBar"));
    assertEquals("FOO_BAR", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).reverse().convert("fooBar"));
    assertEquals("FooBar", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert("FOO_BAR"));
    assertEquals("fooBar", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert("FOO_BAR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: converterTo=4 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).reverse() (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperCamelToUpperCamel
 Body: {
    assertEquals("Foo", UPPER_CAMEL.to(UPPER_CAMEL, "Foo"));
    assertEquals("FooBar", UPPER_CAMEL.to(UPPER_CAMEL, "FooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerUnderscoreToUpperUnderscore
 Body: {
    assertEquals("FOO", LOWER_UNDERSCORE.to(UPPER_UNDERSCORE, "foo"));
    assertEquals("FOO_BAR", LOWER_UNDERSCORE.to(UPPER_UNDERSCORE, "foo_bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerHyphenToUpperUnderscore
 Body: {
    assertEquals("FOO", LOWER_HYPHEN.to(UPPER_UNDERSCORE, "foo"));
    assertEquals("FOO_BAR", LOWER_HYPHEN.to(UPPER_UNDERSCORE, "foo-bar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_HYPHEN (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperUnderscoreToLowerHyphen
 Body: {
    assertEquals("foo", UPPER_UNDERSCORE.to(LOWER_HYPHEN, "FOO"));
    assertEquals("foo-bar", UPPER_UNDERSCORE.to(LOWER_HYPHEN, "FOO_BAR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperCamelToUpperUnderscore
 Body: {
    assertEquals("FOO", UPPER_CAMEL.to(UPPER_UNDERSCORE, "Foo"));
    assertEquals("FOO_BAR", UPPER_CAMEL.to(UPPER_UNDERSCORE, "FooBar"));
    assertEquals("H_T_T_P", UPPER_CAMEL.to(UPPER_UNDERSCORE, "HTTP"));
    assertEquals("H__T__T__P", UPPER_CAMEL.to(UPPER_UNDERSCORE, "H_T_T_P"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=4 ) - Predicate: N/A - Scenario: UPPER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerCamelToUpperUnderscore
 Body: {
    assertEquals("FOO", LOWER_CAMEL.to(UPPER_UNDERSCORE, "foo"));
    assertEquals("FOO_BAR", LOWER_CAMEL.to(UPPER_UNDERSCORE, "fooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testConverter_toString
 Body: {
    assertEquals(
        "LOWER_HYPHEN.converterTo(UPPER_CAMEL)", LOWER_HYPHEN.converterTo(UPPER_CAMEL).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: converterTo=1 ) - Predicate: N/A - Scenario: LOWER_HYPHEN.converterTo(UPPER_CAMEL) (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperCamelToLowerUnderscore
 Body: {
    assertEquals("foo", UPPER_CAMEL.to(LOWER_UNDERSCORE, "Foo"));
    assertEquals("foo_bar", UPPER_CAMEL.to(LOWER_UNDERSCORE, "FooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerCamelToLowerUnderscore
 Body: {
    assertEquals("foo", LOWER_CAMEL.to(LOWER_UNDERSCORE, "foo"));
    assertEquals("foo_bar", LOWER_CAMEL.to(LOWER_UNDERSCORE, "fooBar"));
    assertEquals("h_t_t_p", LOWER_CAMEL.to(LOWER_UNDERSCORE, "hTTP"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=3 ) - Predicate: N/A - Scenario: LOWER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperCamelToLowerHyphen
 Body: {
    assertEquals("foo", UPPER_CAMEL.to(LOWER_HYPHEN, "Foo"));
    assertEquals("foo-bar", UPPER_CAMEL.to(LOWER_HYPHEN, "FooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testUpperUnderscoreToUpperUnderscore
 Body: {
    assertEquals("FOO", UPPER_UNDERSCORE.to(UPPER_UNDERSCORE, "FOO"));
    assertEquals("FOO_BAR", UPPER_UNDERSCORE.to(UPPER_UNDERSCORE, "FOO_BAR"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: UPPER_UNDERSCORE (Alternative Scenario:  )

Project: guava
 Class: CaseFormatTest
 Method: testLowerCamelToLowerCamel
 Body: {
    assertEquals("foo", LOWER_CAMEL.to(LOWER_CAMEL, "foo"));
    assertEquals("fooBar", LOWER_CAMEL.to(LOWER_CAMEL, "fooBar"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: to (Alternative Action: to=2 ) - Predicate: N/A - Scenario: LOWER_CAMEL (Alternative Scenario:  )

Project: guava
 Class: Collections2Test
 Method: testPermutationSetSizeOverflow
 Body: {
    // 13 elements overflow an int
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());
    // 21 elements overflow a long
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.orderedPermutations(
                newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
            .size());
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.orderedPermutations(
                newArrayList(
                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
            .size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: newArrayList=3 ) - Predicate: N/A - Scenario: Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) (Alternative Scenario:  )

Project: guava
 Class: Collections2Test
 Method: testOrderedPermutationSetSizeOverflow
 Body: {
    // 12 elements won't overflow
    assertEquals(
        479001600 /*12!*/,
        Collections2.orderedPermutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
            .size());
    // 13 elements overflow an int
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.orderedPermutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
            .size());
    // 21 elements overflow a long
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.orderedPermutations(
                newArrayList(
                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
            .size());

    // Almost force an overflow in the binomial coefficient calculation
    assertEquals(
        1391975640 /*C(34,14)*/,
        Collections2.orderedPermutations(concat(nCopies(20, 1), nCopies(14, 2))).size());
    // Do force an overflow in the binomial coefficient calculation
    assertEquals(
        Integer.MAX_VALUE,
        Collections2.orderedPermutations(concat(nCopies(21, 1), nCopies(14, 2))).size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=5 ) - Predicate: N/A - Scenario: Collections2.orderedPermutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) (Alternative Scenario:  )

Project: guava
 Class: ContiguousSetTest
 Method: testLast
 Body: {
    assertEquals(3, ContiguousSet.create(Range.closed(1, 3), integers()).last().intValue());
    assertEquals(3, ContiguousSet.create(Range.open(0, 4), integers()).last().intValue());
    assertEquals(
        Integer.MAX_VALUE,
        ContiguousSet.create(Range.<Integer>all(), integers()).last().intValue());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: intValue (Alternative Action: last=3 ) - Predicate: N/A - Scenario: ContiguousSet.create(Range.closed(1, 3), integers()).last() (Alternative Scenario:  )

Project: guava
 Class: ContiguousSetTest
 Method: testFirst
 Body: {
    assertEquals(1, ContiguousSet.create(Range.closed(1, 3), integers()).first().intValue());
    assertEquals(1, ContiguousSet.create(Range.open(0, 4), integers()).first().intValue());
    assertEquals(
        Integer.MIN_VALUE,
        ContiguousSet.create(Range.<Integer>all(), integers()).first().intValue());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: intValue (Alternative Action: intValue=3 ) - Predicate: N/A - Scenario: ContiguousSet.create(Range.closed(1, 3), integers()).first() (Alternative Scenario:  )

Project: guava
 Class: MessageDigestHashFunctionTest
 Method: testToString
 Body: {
    assertEquals("Hashing.md5()", Hashing.md5().toString());
    assertEquals("Hashing.sha1()", Hashing.sha1().toString());
    assertEquals("Hashing.sha256()", Hashing.sha256().toString());
    assertEquals("Hashing.sha512()", Hashing.sha512().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=4 ) - Predicate: N/A - Scenario: Hashing.md5() (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckElementIndex_ok
 Body: {
    assertEquals(0, Preconditions.checkElementIndex(0, 1));
    assertEquals(0, Preconditions.checkElementIndex(0, 2));
    assertEquals(1, Preconditions.checkElementIndex(1, 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: checkElementIndex (Alternative Action: checkElementIndex=3 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckPositionIndex_ok
 Body: {
    assertEquals(0, Preconditions.checkPositionIndex(0, 0));
    assertEquals(0, Preconditions.checkPositionIndex(0, 1));
    assertEquals(1, Preconditions.checkPositionIndex(1, 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: checkPositionIndex (Alternative Action: checkPositionIndex=3 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: MultisetCountTester
 Method: testCount_nullAbsent
 Body: {
    assertEquals("multiset.count(null) didn't return 0", 0, getMultiset().count(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: count (Alternative Action: count=1 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: MultisetCountTester
 Method: testCount_wrongType
 Body: {
    assertEquals(
        "multiset.count(wrongType) didn't return 0", 0, getMultiset().count(WrongType.VALUE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: count (Alternative Action: count=1 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Shorts.lastIndexOf(EMPTY, (short) 1));
    assertEquals(-1, Shorts.lastIndexOf(ARRAY1, (short) 2));
    assertEquals(-1, Shorts.lastIndexOf(ARRAY234, (short) 1));
    assertEquals(0, Shorts.lastIndexOf(new short[] {(short) -1}, (short) -1));
    assertEquals(0, Shorts.lastIndexOf(ARRAY234, (short) 2));
    assertEquals(1, Shorts.lastIndexOf(ARRAY234, (short) 3));
    assertEquals(2, Shorts.lastIndexOf(ARRAY234, (short) 4));
    assertEquals(
        3, Shorts.lastIndexOf(new short[] {(short) 2, (short) 3, (short) 2, (short) 3}, (short) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=8 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testContains
 Body: {
    assertFalse(Shorts.contains(EMPTY, (short) 1));
    assertFalse(Shorts.contains(ARRAY1, (short) 2));
    assertFalse(Shorts.contains(ARRAY234, (short) 1));
    assertTrue(Shorts.contains(new short[] {(short) -1}, (short) -1));
    assertTrue(Shorts.contains(ARRAY234, (short) 2));
    assertTrue(Shorts.contains(ARRAY234, (short) 3));
    assertTrue(Shorts.contains(ARRAY234, (short) 4));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=7 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testStringConverter_nullConversions
 Body: {
    assertNull(Shorts.stringConverter().convert(null));
    assertNull(Shorts.stringConverter().reverse().convert(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: convert=2 ) - Predicate: N/A - Scenario: Shorts.stringConverter() (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testFromByteArray
 Body: {
    assertEquals((short) 0x2345, Shorts.fromByteArray(new byte[] {0x23, 0x45}));
    assertEquals((short) 0xFEDC, Shorts.fromByteArray(new byte[] {(byte) 0xFE, (byte) 0xDC}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromByteArray (Alternative Action: fromByteArray=2 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testMax
 Body: {
    assertEquals(LEAST, Shorts.max(LEAST));
    assertEquals(GREATEST, Shorts.max(GREATEST));
    assertEquals(
        (short) 9,
        Shorts.max((short) 8, (short) 6, (short) 7, (short) 5, (short) 3, (short) 0, (short) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Shorts.indexOf(EMPTY, (short) 1));
    assertEquals(-1, Shorts.indexOf(ARRAY1, (short) 2));
    assertEquals(-1, Shorts.indexOf(ARRAY234, (short) 1));
    assertEquals(0, Shorts.indexOf(new short[] {(short) -1}, (short) -1));
    assertEquals(0, Shorts.indexOf(ARRAY234, (short) 2));
    assertEquals(1, Shorts.indexOf(ARRAY234, (short) 3));
    assertEquals(2, Shorts.indexOf(ARRAY234, (short) 4));
    assertEquals(
        1, Shorts.indexOf(new short[] {(short) 2, (short) 3, (short) 2, (short) 3}, (short) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=8 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testJoin
 Body: {
    assertEquals("", Shorts.join(",", EMPTY));
    assertEquals("1", Shorts.join(",", ARRAY1));
    assertEquals("1,2", Shorts.join(",", (short) 1, (short) 2));
    assertEquals("123", Shorts.join("", (short) 1, (short) 2, (short) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testIndexOf_arrayTarget
 Body: {
    assertEquals(0, Shorts.indexOf(EMPTY, EMPTY));
    assertEquals(0, Shorts.indexOf(ARRAY234, EMPTY));
    assertEquals(-1, Shorts.indexOf(EMPTY, ARRAY234));
    assertEquals(-1, Shorts.indexOf(ARRAY234, ARRAY1));
    assertEquals(-1, Shorts.indexOf(ARRAY1, ARRAY234));
    assertEquals(0, Shorts.indexOf(ARRAY1, ARRAY1));
    assertEquals(0, Shorts.indexOf(ARRAY234, ARRAY234));
    assertEquals(0, Shorts.indexOf(ARRAY234, new short[] {(short) 2, (short) 3}));
    assertEquals(1, Shorts.indexOf(ARRAY234, new short[] {(short) 3, (short) 4}));
    assertEquals(1, Shorts.indexOf(ARRAY234, new short[] {(short) 3}));
    assertEquals(2, Shorts.indexOf(ARRAY234, new short[] {(short) 4}));
    assertEquals(
        1,
        Shorts.indexOf(
            new short[] {(short) 2, (short) 3, (short) 3, (short) 3, (short) 3},
            new short[] {(short) 3}));
    assertEquals(
        2,
        Shorts.indexOf(
            new short[] {
              (short) 2, (short) 3, (short) 2, (short) 3, (short) 4, (short) 2, (short) 3
            },
            new short[] {(short) 2, (short) 3, (short) 4}));
    assertEquals(
        1,
        Shorts.indexOf(
            new short[] {
              (short) 2, (short) 2, (short) 3, (short) 4, (short) 2, (short) 3, (short) 4
            },
            new short[] {(short) 2, (short) 3, (short) 4}));
    assertEquals(
        -1,
        Shorts.indexOf(
            new short[] {(short) 4, (short) 3, (short) 2},
            new short[] {(short) 2, (short) 3, (short) 4}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=15 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testMin
 Body: {
    assertEquals(LEAST, Shorts.min(LEAST));
    assertEquals(GREATEST, Shorts.min(GREATEST));
    assertEquals(
        (short) 0,
        Shorts.min((short) 8, (short) 6, (short) 7, (short) 5, (short) 3, (short) 0, (short) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testFromBytes
 Body: {
    assertEquals((short) 0x2345, Shorts.fromBytes((byte) 0x23, (byte) 0x45));
    assertEquals((short) 0xFEDC, Shorts.fromBytes((byte) 0xFE, (byte) 0xDC));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromBytes (Alternative Action: fromBytes=2 ) - Predicate: N/A - Scenario: Shorts (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testJoin
 Body: {
    assertEquals("", Doubles.join(",", EMPTY));
    assertEquals("1.0", Doubles.join(",", ARRAY1));
    assertEquals("1.0,2.0", Doubles.join(",", (double) 1, (double) 2));
    assertEquals("1.02.03.0", Doubles.join("", (double) 1, (double) 2, (double) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Doubles (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testJoinNonTrivialDoubles
 Body: {
    assertEquals("", Doubles.join(",", EMPTY));
    assertEquals("1.2", Doubles.join(",", 1.2));
    assertEquals("1.3,2.4", Doubles.join(",", 1.3, 2.4));
    assertEquals("1.42.53.6", Doubles.join("", 1.4, 2.5, 3.6));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Doubles (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testStringConverter_nullConversions
 Body: {
    assertNull(Doubles.stringConverter().convert(null));
    assertNull(Doubles.stringConverter().reverse().convert(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: convert=2 ) - Predicate: N/A - Scenario: Doubles.stringConverter() (Alternative Scenario:  )

Project: guava
 Class: IterablesTest
 Method: testIterableWithToStringNull
 Body: {
    assertEquals("[null]", create((String) null).toString());
    assertEquals("[null, null]", create(null, null).toString());
    assertEquals("[, null, a]", create("", null, "a").toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: create=3 ) - Predicate: N/A - Scenario: create((String) null) (Alternative Scenario:  )

Project: guava
 Class: IterablesTest
 Method: testIterableWithToString
 Body: {
    assertEquals("[]", create().toString());
    assertEquals("[a]", create("a").toString());
    assertEquals("[a, b, c]", create("a", "b", "c").toString());
    assertEquals("[c, a, a]", create("c", "a", "a").toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: create=4 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: MultiInputStreamTest
 Method: testReadSingle_noStackOverflow
 Body: {
    // https://github.com/google/guava/issues/2996
    // no data, just testing that there's no StackOverflowException
    assertEquals(-1, tenMillionEmptySources().read());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: read=1 ) - Predicate: N/A - Scenario: tenMillionEmptySources() (Alternative Scenario:  )

Project: guava
 Class: MultiInputStreamTest
 Method: testReadArray_noStackOverflow
 Body: {
    // https://github.com/google/guava/issues/2996
    // no data, just testing that there's no StackOverflowException
    assertEquals(-1, tenMillionEmptySources().read(new byte[1]));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: read=1 ) - Predicate: N/A - Scenario: tenMillionEmptySources() (Alternative Scenario:  )

Project: guava
 Class: PrimitivesTest
 Method: testUnwrap
 Body: {
    assertSame(int.class, Primitives.unwrap(Integer.class));
    assertSame(int.class, Primitives.unwrap(int.class));
    assertSame(String.class, Primitives.unwrap(String.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: unwrap (Alternative Action: unwrap=3 ) - Predicate: N/A - Scenario: Primitives (Alternative Scenario:  )

Project: guava
 Class: PrimitivesTest
 Method: testWrap
 Body: {
    assertSame(Integer.class, Primitives.wrap(int.class));
    assertSame(Integer.class, Primitives.wrap(Integer.class));
    assertSame(String.class, Primitives.wrap(String.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: wrap (Alternative Action: wrap=3 ) - Predicate: N/A - Scenario: Primitives (Alternative Scenario:  )

Project: guava
 Class: PrimitivesTest
 Method: testIsWrapperType
 Body: {
    assertTrue(Primitives.isWrapperType(Void.class));
    assertFalse(Primitives.isWrapperType(void.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isWrapperType (Alternative Action: isWrapperType=2 ) - Predicate: N/A - Scenario: Primitives (Alternative Scenario:  )

Project: guava
 Class: FarmHashFingerprint64Test
 Method: testReallySimpleFingerprints
 Body: {
    assertEquals(8581389452482819506L, fingerprint("test".getBytes(UTF_8)));
    // 32 characters long
    assertEquals(-4196240717365766262L, fingerprint(Strings.repeat("test", 8).getBytes(UTF_8)));
    // 256 characters long
    assertEquals(3500507768004279527L, fingerprint(Strings.repeat("test", 64).getBytes(UTF_8)));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fingerprint (Alternative Action: fingerprint=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: MapToStringTester
 Method: testToString_size0
 Body: {
    assertEquals("emptyMap.toString should return {}", "{}", getMap().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: MapToStringTester
 Method: testToString_minimal
 Body: {
    assertNotNull("toString() should not return null", getMap().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: MapToStringTester
 Method: testToString_size1
 Body: {
    assertEquals("size1Map.toString should return {entry}", "{" + e0() + "}", getMap().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_wildcard_boundIsInterface
 Body: {
    assertNull(TypeToken.of(Types.subtypeOf(CharSequence.class)).getGenericSuperclass());
    assertEquals(
        new TypeToken<CharSequence[]>() {},
        TypeToken.of(Types.subtypeOf(CharSequence[].class)).getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: of=2 ) - Predicate: N/A - Scenario: TypeToken.of(Types.subtypeOf(CharSequence.class)) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testIsArray_wildcardType
 Body: {
    assertTrue(TypeToken.of(Types.subtypeOf(Object[].class)).isArray());
    assertTrue(TypeToken.of(Types.subtypeOf(int[].class)).isArray());
    assertFalse(TypeToken.of(Types.subtypeOf(Object.class)).isArray());
    assertFalse(TypeToken.of(Types.supertypeOf(Object[].class)).isArray());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isArray (Alternative Action: of=4 ) - Predicate: N/A - Scenario: TypeToken.of(Types.subtypeOf(Object[].class)) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetComponentType_arrayClasses
 Body: {
    assertEquals(Object.class, TypeToken.of(Object[].class).getComponentType().getType());
    assertEquals(Object[].class, TypeToken.of(Object[][].class).getComponentType().getType());
    assertEquals(char.class, TypeToken.of(char[].class).getComponentType().getType());
    assertEquals(char[].class, TypeToken.of(char[][].class).getComponentType().getType());
    assertEquals(byte.class, TypeToken.of(byte[].class).getComponentType().getType());
    assertEquals(short.class, TypeToken.of(short[].class).getComponentType().getType());
    assertEquals(int.class, TypeToken.of(int[].class).getComponentType().getType());
    assertEquals(long.class, TypeToken.of(long[].class).getComponentType().getType());
    assertEquals(float.class, TypeToken.of(float[].class).getComponentType().getType());
    assertEquals(double.class, TypeToken.of(double[].class).getComponentType().getType());
    assertNull(TypeToken.of(Object.class).getComponentType());
    assertNull(TypeToken.of(void.class).getComponentType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: of=12 ) - Predicate: N/A - Scenario: TypeToken.of(Object[].class).getComponentType() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testRejectTypeVariable_genericArrayType
 Body: {
    assertNoTypeVariable(new TypeCapture<Iterable<? extends String>[]>() {}.capture());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: capture (Alternative Action: capture=1 ) - Predicate: N/A - Scenario: new TypeCapture<Iterable<? extends String>[]>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssignableGenericArrayToGenericArray
 Body: {
    assertTrue(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T[]>() {}));
    assertTrue(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T1[]>() {}));
    assertFalse(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T[][]>() {}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isSupertypeOf (Alternative Action: isSupertypeOf=3 ) - Predicate: N/A - Scenario: new TypeToken<T[]>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testIsArray_arrayClasses
 Body: {
    assertTrue(TypeToken.of(Object[].class).isArray());
    assertTrue(TypeToken.of(Object[][].class).isArray());
    assertTrue(TypeToken.of(char[].class).isArray());
    assertTrue(TypeToken.of(char[][].class).isArray());
    assertTrue(TypeToken.of(byte[].class).isArray());
    assertTrue(TypeToken.of(short[].class).isArray());
    assertTrue(TypeToken.of(int[].class).isArray());
    assertTrue(TypeToken.of(long[].class).isArray());
    assertTrue(TypeToken.of(float[].class).isArray());
    assertTrue(TypeToken.of(double[].class).isArray());
    assertFalse(TypeToken.of(Object.class).isArray());
    assertFalse(TypeToken.of(void.class).isArray());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isArray (Alternative Action: of=12 ) - Predicate: N/A - Scenario: TypeToken.of(Object[].class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_fromArray
 Body: {
    assertEquals(
        new TypeToken<Iterable<String>[]>() {},
        new TypeToken<List<String>[]>() {}.getSupertype(Iterable[].class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getSupertype (Alternative Action: getSupertype=1 ) - Predicate: N/A - Scenario: new TypeToken<List<String>[]>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testArrayClassPreserved
 Body: {
    assertEquals(int[].class, TypeToken.of(int[].class).getType());
    assertEquals(int[][].class, TypeToken.of(int[][].class).getType());
    assertEquals(String[].class, TypeToken.of(String[].class).getType());
    assertEquals(Integer.class, new TypeToken<Integer>() {}.getType());
    assertEquals(Integer.class, TypeToken.of(Integer.class).getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getType=5 ) - Predicate: N/A - Scenario: TypeToken.of(int[].class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssertSubtypeBeforeSupertype_empty
 Body: {
    assertSubtypeBeforeSupertype(ImmutableList.<Class<?>>of());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableList (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_typeVariable_boundIsFBoundedClass
 Body: {
    assertEquals(
        new TypeToken<Enum<T>>() {},
        TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericSuperclass());
    assertEquals(TypeToken.of(Object.class), new TypeToken<T[]>() {}.getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: of=2 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGenericVariableTypeArrays
 Body: {
    assertEquals("T[]", new TypeToken<T[]>() {}.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: new TypeToken<T[]>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSubtype_fromRawClass
 Body: {
    assertEquals(List.class, new TypeToken<Iterable>() {}.getSubtype(List.class).getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getType=1 ) - Predicate: N/A - Scenario: new TypeToken<Iterable>() {}.getSubtype(List.class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testRejectTypeVariable_withOwnerType
 Body: {
    // Neither has subclass
    assertHasTypeVariable(new From<Integer>().new To<String>().type());
    assertHasTypeVariable(new From<T>().new To<String>().type());
    assertHasTypeVariable(new From<Integer>().new To<T>().type());

    // Owner is subclassed
    assertHasTypeVariable(new From<Integer>() {}.new To<String>().type());
    assertHasTypeVariable(new From<T>() {}.new To<String>().type());

    // Inner is subclassed
    assertNoTypeVariable(new From<Integer>().new To<String>() {}.type());
    assertHasTypeVariable(new From<Integer>().new To<T>() {}.type());
    assertHasTypeVariable(new From<T>().new To<String>() {}.type());

    // both subclassed
    assertHasTypeVariable(new From<T>() {}.new To<String>() {}.type());
    assertNoTypeVariable(new From<Integer>() {}.new To<String>() {}.type());
    assertHasTypeVariable(new From<Integer>() {}.new To<T>() {}.type());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: type (Alternative Action: type=11 ) - Predicate: N/A - Scenario: new From<Integer>().new To<String>() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_withArray
 Body: {
    assertEquals(
        new TypeToken<Iterable<List<String>>[]>() {},
        TypeToken.of(StringListIterable[].class).getSupertype(Iterable[].class));
    assertEquals(int[].class, TypeToken.of(int[].class).getSupertype(int[].class).getType());
    assertEquals(Object.class, TypeToken.of(int[].class).getSupertype(Object.class).getType());
    assertEquals(int[][].class, TypeToken.of(int[][].class).getSupertype(int[][].class).getType());
    assertEquals(
        Object[].class, TypeToken.of(String[].class).getSupertype(Object[].class).getType());
    assertEquals(Object.class, TypeToken.of(String[].class).getSupertype(Object.class).getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getSupertype (Alternative Action: of=6 ) - Predicate: N/A - Scenario: TypeToken.of(StringListIterable[].class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssertSubtypeBeforeSupertype_subtypeFirst
 Body: {
    assertSubtypeBeforeSupertype(ImmutableList.of(String.class, CharSequence.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableList (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetComponentType_genericArrayClasses
 Body: {
    assertNull(TypeToken.of(new TypeCapture<T>() {}.capture()).getComponentType());
    assertEquals(
        TypeToken.of(new TypeCapture<T>() {}.capture()),
        new TypeToken<T[]>() {}.getComponentType());
    assertEquals(new TypeToken<T[]>() {}, new TypeToken<T[][]>() {}.getComponentType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getComponentType (Alternative Action: getComponentType=3 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssertSubtypeBeforeSupertype_oneType
 Body: {
    assertSubtypeBeforeSupertype(ImmutableList.of(String.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableList (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssertSubtypeTokenBeforeSupertypeToken_empty
 Body: {
    assertSubtypeTokenBeforeSupertypeToken(ImmutableList.<TypeToken<?>>of());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableList (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_typeVariable_boundIsClass
 Body: {
    assertEquals(
        new TypeToken<ArrayList<String>>() {},
        TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericSuperclass());
    assertEquals(TypeToken.of(Object.class), new TypeToken<T[]>() {}.getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: of=2 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testMultipleTypeBoundsAssignability
 Body: {
    assertTrue(new Assignability<From, String>() {}.isAssignable());
    assertFalse(new Assignability<From, Number>() {}.isAssignable());
    assertTrue(new Assignability<From, Iterable<? extends CharSequence>>() {}.isAssignable());
    assertFalse(new Assignability<From, Iterable<Object>>() {}.isAssignable());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isAssignable (Alternative Action: isAssignable=4 ) - Predicate: N/A - Scenario: new Assignability<From, String>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSupertype_typeVariableWithMultipleBounds
 Body: {
    assertEquals(
        Number.class, new TypeToken<T>(getClass()) {}.getSupertype(Number.class).getType());
    assertEquals(
        new TypeToken<Iterable<A>>() {},
        new TypeToken<T>(getClass()) {}.getSupertype(Iterable.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getClass=2 ) - Predicate: N/A - Scenario: new TypeToken<T>(getClass()) {}.getSupertype(Number.class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testWhere
 Body: {
    assertEquals(new TypeToken<Map<String, Integer>>() {}, mapOf(String.class, Integer.class));
    assertEquals(new TypeToken<int[]>() {}, arrayOf(int.class));
    assertEquals(int[].class, arrayOf(int.class).getRawType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: mapOf (Alternative Action: arrayOf=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_typeVariable_boundIsInterface
 Body: {
    assertNull(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericSuperclass());
    assertEquals(TypeToken.of(Object.class), new TypeToken<T[]>() {}.getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: of=2 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_typeVariable_boundIsTypeVariableAndInterface
 Body: {
    assertNull(TypeToken.of(new TypeCapture<T1>() {}.capture()).getGenericSuperclass());
    assertEquals(TypeToken.of(Object.class), new TypeToken<T1[]>() {}.getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: of=2 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T1>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testTypeResolution
 Body: {
    assertEquals(String.class, new IKnowMyType<String>() {}.type().getType());
    assertEquals(
        new TypeToken<Map<String, Integer>>() {},
        new IKnowMyType<Map<String, Integer>>() {}.type());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: type=2 ) - Predicate: N/A - Scenario: new IKnowMyType<String>() {}.type() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetGenericSuperclass_noSuperclass
 Body: {
    assertNull(new TypeToken<Object>() {}.getGenericSuperclass());
    assertEquals(TypeToken.of(Object.class), new TypeToken<Object[]>() {}.getGenericSuperclass());
    assertNull(new TypeToken<List<String>>() {}.getGenericSuperclass());
    assertEquals(
        TypeToken.of(Object.class), new TypeToken<List<String>[]>() {}.getGenericSuperclass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getGenericSuperclass (Alternative Action: getGenericSuperclass=4 ) - Predicate: N/A - Scenario: new TypeToken<Object>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSubtype_fromArray
 Body: {
    assertEquals(
        new TypeToken<List<String>[]>() {},
        new TypeToken<Iterable<String>[]>() {}.getSubtype(List[].class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getSubtype (Alternative Action: getSubtype=1 ) - Predicate: N/A - Scenario: new TypeToken<Iterable<String>[]>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSubtype_withTypeVariable
 Body: {
    assertEquals(
        new TypeToken<ListIterable<String>>() {},
        new TypeToken<Iterable<List<String>>>() {}.getSubtype(ListIterable.class));
    assertEquals(
        new TypeToken<ListArrayIterable<String>>() {},
        new TypeToken<Iterable<List<String>[]>>() {}.getSubtype(ListArrayIterable.class));
    assertEquals(
        new TypeToken<ListArrayIterable<String>[]>() {},
        new TypeToken<Iterable<List<String>[]>[]>() {}.getSubtype(ListArrayIterable[].class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getSubtype (Alternative Action: getSubtype=3 ) - Predicate: N/A - Scenario: new TypeToken<Iterable<List<String>>>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testRejectTypeVariable_withTypeVariable
 Body: {
    assertHasTypeVariable(new TypeCapture<T>() {}.capture());
    assertHasTypeVariable(new TypeCapture<T[]>() {}.capture());
    assertHasTypeVariable(new TypeCapture<Iterable<T>>() {}.capture());
    assertHasTypeVariable(new TypeCapture<Map<String, T>>() {}.capture());
    assertHasTypeVariable(new TypeCapture<Map<String, ? extends T>>() {}.capture());
    assertHasTypeVariable(new TypeCapture<Map<String, ? super T[]>>() {}.capture());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: capture (Alternative Action: capture=6 ) - Predicate: N/A - Scenario: new TypeCapture<T>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testIsArray_genericArrayClasses
 Body: {
    assertFalse(TypeToken.of(new TypeCapture<T>() {}.capture()).isArray());
    assertTrue(new TypeToken<T[]>() {}.isArray());
    assertTrue(new TypeToken<T[][]>() {}.isArray());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isArray (Alternative Action: isArray=3 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeCapture<T>() {}.capture()) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testRejectTypeVariable_wildcardType
 Body: {
    assertNoTypeVariable(new TypeCapture<Iterable<? extends String>>() {}.capture());
    assertNoTypeVariable(new TypeCapture<Iterable<? super String>>() {}.capture());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: capture (Alternative Action: capture=2 ) - Predicate: N/A - Scenario: new TypeCapture<Iterable<? extends String>>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testRejectTypeVariable_parameterizedType
 Body: {
    assertNoTypeVariable(new TypeCapture<Iterable<String>>() {}.capture());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: capture (Alternative Action: capture=1 ) - Predicate: N/A - Scenario: new TypeCapture<Iterable<String>>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testAssignableGenericArrayToArrayClass
 Body: {
    assertTrue(TypeToken.of(Object[].class).isSupertypeOf(new TypeToken<T[]>() {}));
    assertTrue(TypeToken.of(Object[].class).isSupertypeOf(new TypeToken<T[][]>() {}));
    assertTrue(TypeToken.of(Object[][].class).isSupertypeOf(new TypeToken<T[][]>() {}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isSupertypeOf (Alternative Action: of=3 ) - Predicate: N/A - Scenario: TypeToken.of(Object[].class) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testGetSubtype_withoutTypeVariable
 Body: {
    assertEquals(
        StringListIterable.class,
        TypeToken.of(Iterable.class).getSubtype(StringListIterable.class).getType());
    assertEquals(
        StringListIterable[].class,
        TypeToken.of(Iterable[].class).getSubtype(StringListIterable[].class).getType());
    assertEquals(
        TypeToken.of(StringListArrayIterable.class),
        new TypeToken<Iterable<List<String>>>() {}.getSubtype(StringListArrayIterable.class));
    assertEquals(
        TypeToken.of(StringListArrayIterable[].class),
        new TypeToken<Iterable<List<String>>[]>() {}.getSubtype(StringListArrayIterable[].class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: of=4 ) - Predicate: N/A - Scenario: TypeToken.of(Iterable.class).getSubtype(StringListIterable.class) (Alternative Scenario:  )

Project: guava
 Class: AbstractMapEntryTest
 Method: testToString
 Body: {
    assertEquals("foo=1", entry("foo", 1).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: entry=1 ) - Predicate: N/A - Scenario: entry("foo", 1) (Alternative Scenario:  )

Project: guava
 Class: AbstractMapEntryTest
 Method: testToStringNull
 Body: {
    assertEquals("null=1", entry(NK, 1).toString());
    assertEquals("foo=null", entry("foo", NV).toString());
    assertEquals("null=null", entry(NK, NV).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: entry=3 ) - Predicate: N/A - Scenario: entry(NK, 1) (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Chars.lastIndexOf(EMPTY, (char) 1));
    assertEquals(-1, Chars.lastIndexOf(ARRAY1, (char) 2));
    assertEquals(-1, Chars.lastIndexOf(ARRAY234, (char) 1));
    assertEquals(0, Chars.lastIndexOf(new char[] {(char) -1}, (char) -1));
    assertEquals(0, Chars.lastIndexOf(ARRAY234, (char) 2));
    assertEquals(1, Chars.lastIndexOf(ARRAY234, (char) 3));
    assertEquals(2, Chars.lastIndexOf(ARRAY234, (char) 4));
    assertEquals(
        3, Chars.lastIndexOf(new char[] {(char) 2, (char) 3, (char) 2, (char) 3}, (char) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=8 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testContains
 Body: {
    assertFalse(Chars.contains(EMPTY, (char) 1));
    assertFalse(Chars.contains(ARRAY1, (char) 2));
    assertFalse(Chars.contains(ARRAY234, (char) 1));
    assertTrue(Chars.contains(new char[] {(char) -1}, (char) -1));
    assertTrue(Chars.contains(ARRAY234, (char) 2));
    assertTrue(Chars.contains(ARRAY234, (char) 3));
    assertTrue(Chars.contains(ARRAY234, (char) 4));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=7 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testFromBytes
 Body: {
    assertEquals('\u2345', Chars.fromBytes((byte) 0x23, (byte) 0x45));
    assertEquals('\uFEDC', Chars.fromBytes((byte) 0xFE, (byte) 0xDC));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromBytes (Alternative Action: fromBytes=2 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Chars.indexOf(EMPTY, (char) 1));
    assertEquals(-1, Chars.indexOf(ARRAY1, (char) 2));
    assertEquals(-1, Chars.indexOf(ARRAY234, (char) 1));
    assertEquals(0, Chars.indexOf(new char[] {(char) -1}, (char) -1));
    assertEquals(0, Chars.indexOf(ARRAY234, (char) 2));
    assertEquals(1, Chars.indexOf(ARRAY234, (char) 3));
    assertEquals(2, Chars.indexOf(ARRAY234, (char) 4));
    assertEquals(1, Chars.indexOf(new char[] {(char) 2, (char) 3, (char) 2, (char) 3}, (char) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=8 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testIndexOf_arrayTarget
 Body: {
    assertEquals(0, Chars.indexOf(EMPTY, EMPTY));
    assertEquals(0, Chars.indexOf(ARRAY234, EMPTY));
    assertEquals(-1, Chars.indexOf(EMPTY, ARRAY234));
    assertEquals(-1, Chars.indexOf(ARRAY234, ARRAY1));
    assertEquals(-1, Chars.indexOf(ARRAY1, ARRAY234));
    assertEquals(0, Chars.indexOf(ARRAY1, ARRAY1));
    assertEquals(0, Chars.indexOf(ARRAY234, ARRAY234));
    assertEquals(0, Chars.indexOf(ARRAY234, new char[] {(char) 2, (char) 3}));
    assertEquals(1, Chars.indexOf(ARRAY234, new char[] {(char) 3, (char) 4}));
    assertEquals(1, Chars.indexOf(ARRAY234, new char[] {(char) 3}));
    assertEquals(2, Chars.indexOf(ARRAY234, new char[] {(char) 4}));
    assertEquals(
        1,
        Chars.indexOf(
            new char[] {(char) 2, (char) 3, (char) 3, (char) 3, (char) 3}, new char[] {(char) 3}));
    assertEquals(
        2,
        Chars.indexOf(
            new char[] {(char) 2, (char) 3, (char) 2, (char) 3, (char) 4, (char) 2, (char) 3},
            new char[] {(char) 2, (char) 3, (char) 4}));
    assertEquals(
        1,
        Chars.indexOf(
            new char[] {(char) 2, (char) 2, (char) 3, (char) 4, (char) 2, (char) 3, (char) 4},
            new char[] {(char) 2, (char) 3, (char) 4}));
    assertEquals(
        -1,
        Chars.indexOf(
            new char[] {(char) 4, (char) 3, (char) 2}, new char[] {(char) 2, (char) 3, (char) 4}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=15 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testMax
 Body: {
    assertEquals(LEAST, Chars.max(LEAST));
    assertEquals(GREATEST, Chars.max(GREATEST));
    assertEquals(
        (char) 9, Chars.max((char) 8, (char) 6, (char) 7, (char) 5, (char) 3, (char) 0, (char) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testFromByteArray
 Body: {
    assertEquals('\u2345', Chars.fromByteArray(new byte[] {0x23, 0x45, (byte) 0xDC}));
    assertEquals('\uFEDC', Chars.fromByteArray(new byte[] {(byte) 0xFE, (byte) 0xDC}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromByteArray (Alternative Action: fromByteArray=2 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testJoin
 Body: {
    assertEquals("", Chars.join(",", EMPTY));
    assertEquals("1", Chars.join(",", '1'));
    assertEquals("1,2", Chars.join(",", '1', '2'));
    assertEquals("123", Chars.join("", '1', '2', '3'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testMin
 Body: {
    assertEquals(LEAST, Chars.min(LEAST));
    assertEquals(GREATEST, Chars.min(GREATEST));
    assertEquals(
        (char) 0, Chars.min((char) 8, (char) 6, (char) 7, (char) 5, (char) 3, (char) 0, (char) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: Chars (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNonEmptyCollectionOnPresentKey
 Body: {
    assertTrue(multimap().putAll(k0(), Lists.newArrayList(v3(), v4())));
    assertGet(k0(), v0(), v3(), v4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k0=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNonEmptyCollectionOnAbsentKey
 Body: {
    assertTrue(multimap().putAll(k3(), Lists.newArrayList(v3(), v4())));
    assertGet(k3(), v3(), v4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k3=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNullValueOnAbsentKey_supported
 Body: {
    assertTrue(multimap().putAll(k3(), Lists.newArrayList(v3(), null)));
    assertGet(k3(), v3(), null);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k3=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNullValueOnPresentKey_supported
 Body: {
    assertTrue(multimap().putAll(k0(), Lists.newArrayList(v3(), null)));
    assertGet(k0(), v0(), v3(), null);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k0=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNonEmptyIterableOnAbsentKey
 Body: {
    assertTrue(
        multimap()
            .putAll(
                k3(),
                new Iterable<V>() {
                  @Override
                  public Iterator<V> iterator() {
                    return Lists.newArrayList(v3(), v4()).iterator();
                  }
                }));
    assertGet(k3(), v3(), v4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k3=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllOnPresentNullKey
 Body: {
    assertTrue(multimap().putAll(null, Lists.newArrayList(v3(), v4())));
    assertGet(null, v3(), v4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: v3=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNonEmptyIterableOnPresentKey
 Body: {
    assertTrue(
        multimap()
            .putAll(
                k0(),
                new Iterable<V>() {
                  @Override
                  public Iterator<V> iterator() {
                    return Lists.newArrayList(v3(), v4()).iterator();
                  }
                }));
    assertGet(k0(), v0(), v3(), v4());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: putAll (Alternative Action: k0=2 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32InvalidDecodings
 Body: {
    // These contain bytes not in the decodabet.
    assertFailsToDecode(base32(), "A ", "Unrecognized character: 0x20");
    assertFailsToDecode(base32(), "Wf2!", "Unrecognized character: f");
    // This sentence just isn't base32() encoded.
    assertFailsToDecode(base32(), "let's not talk of love or chains!");
    // An 8n+{1,3,6} length string is never legal base32.
    assertFailsToDecode(base32(), "A", "Invalid input length 1");
    assertFailsToDecode(base32(), "ABC");
    assertFailsToDecode(base32(), "ABCDEF");
    // These have a combination of invalid length, unrecognized characters and wrong padding.
    assertFailsToDecode(base32(), "AB=C", "Unrecognized character: =");
    assertFailsToDecode(base32(), "A=BCDE", "Invalid input length 6");
    assertFailsToDecode(base32(), "?", "Invalid input length 1");
  }
 Pattern Name: AllAssertionPattern_1MC - Action: base32 (Alternative Action: base32=9 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: BaseEncodingTest
 Method: testToString
 Body: {
    assertEquals("BaseEncoding.base64().withPadChar('=')", base64().toString());
    assertEquals("BaseEncoding.base32Hex().omitPadding()", base32Hex().omitPadding().toString());
    assertEquals(
        "BaseEncoding.base32().lowerCase().withPadChar('$')",
        base32().lowerCase().withPadChar('$').toString());
    assertEquals(
        "BaseEncoding.base16().withSeparator(\"\n\", 10)",
        base16().withSeparator("\n", 10).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=4 ) - Predicate: N/A - Scenario: base64() (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase16InvalidDecodings
 Body: {
    // These contain bytes not in the decodabet.
    assertFailsToDecode(base16(), "\n\n", "Unrecognized character: 0xa");
    assertFailsToDecode(base16(), "EFGH", "Unrecognized character: G");
    // Valid base16 strings always have an even length.
    assertFailsToDecode(base16(), "A", "Invalid input length 1");
    assertFailsToDecode(base16(), "ABC");
    // These have a combination of invalid length and unrecognized characters.
    assertFailsToDecode(base16(), "?", "Invalid input length 1");
  }
 Pattern Name: AllAssertionPattern_1MC - Action: base16 (Alternative Action: base16=5 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: BaseEncodingTest
 Method: testBase32HexInvalidDecodings
 Body: {
    // These contain bytes not in the decodabet.
    assertFailsToDecode(base32Hex(), "A\u007f", "Unrecognized character: 0x7f");
    assertFailsToDecode(base32Hex(), "Wf2!", "Unrecognized character: W");
    // This sentence just isn't base32 encoded.
    assertFailsToDecode(base32Hex(), "let's not talk of love or chains!");
    // An 8n+{1,3,6} length string is never legal base32.
    assertFailsToDecode(base32Hex(), "A");
    assertFailsToDecode(base32Hex(), "ABC");
    assertFailsToDecode(base32Hex(), "ABCDEF");
  }
 Pattern Name: AllAssertionPattern_1MC - Action: base32Hex (Alternative Action: base32Hex=6 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: BaseEncodingTest
 Method: testBase64InvalidDecodings
 Body: {
    // These contain bytes not in the decodabet.
    assertFailsToDecode(base64(), "A\u007f", "Unrecognized character: 0x7f");
    assertFailsToDecode(base64(), "Wf2!", "Unrecognized character: !");
    // This sentence just isn't base64() encoded.
    assertFailsToDecode(base64(), "let's not talk of love or chains!");
    // A 4n+1 length string is never legal base64().
    assertFailsToDecode(base64(), "12345", "Invalid input length 5");
    // These have a combination of invalid length, unrecognized characters and wrong padding.
    assertFailsToDecode(base64(), "AB=C", "Unrecognized character: =");
    assertFailsToDecode(base64(), "A=BCD", "Invalid input length 5");
    assertFailsToDecode(base64(), "?", "Invalid input length 1");
  }
 Pattern Name: AllAssertionPattern_1MC - Action: base64 (Alternative Action: base64=7 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: MultimapContainsKeyTester
 Method: testContainsKeyNullAbsent
 Body: {
    assertFalse(multimap().containsKey(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsKey (Alternative Action: containsKey=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testGetPortOrDefault
 Body: {
    assertEquals(80, HostAndPort.fromString("host:80").getPortOrDefault(123));
    assertEquals(123, HostAndPort.fromString("host").getPortOrDefault(123));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getPortOrDefault (Alternative Action: fromString=2 ) - Predicate: N/A - Scenario: HostAndPort.fromString("host:80") (Alternative Scenario:  )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testCopyOf_stream
 Body: {
    assertThat(ImmutableDoubleArray.copyOf(DoubleStream.empty()))
        .isSameAs(ImmutableDoubleArray.of());
    assertThat(ImmutableDoubleArray.copyOf(DoubleStream.of(0, 1, 3)).asList())
        .containsExactly(0.0, 1.0, 3.0)
        .inOrder();
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=2 ) - Predicate: N/A - Scenario: ImmutableDoubleArray (Alternative Scenario:  )

Project: guava
 Class: ImmutableDoubleArrayTest
 Method: testCopyOf_array_empty
 Body: {
    /*
     * We don't guarantee the same-as property, so we aren't obligated to test it. However, it's
     * useful in testing - when two things are the same then one can't have bugs the other doesn't.
     */
    assertThat(ImmutableDoubleArray.copyOf(new double[0])).isSameAs(ImmutableDoubleArray.of());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableDoubleArray (Alternative Scenario:  )

Project: guava
 Class: MultimapContainsEntryTester
 Method: testContainsEntryNullNo
 Body: {
    assertFalse(multimap().containsEntry(null, null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsEntry (Alternative Action: containsEntry=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: SortedSetNavigationTester
 Method: testSingletonSetLast
 Body: {
    assertEquals(a, sortedSet.last());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: last (Alternative Action: last=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario:  )

Project: guava
 Class: SortedSetNavigationTester
 Method: testLast
 Body: {
    assertEquals(c, sortedSet.last());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: last (Alternative Action: last=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario:  )

Project: guava
 Class: SortedSetNavigationTester
 Method: testFirst
 Body: {
    assertEquals(a, sortedSet.first());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: first (Alternative Action: first=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario:  )

Project: guava
 Class: SortedSetNavigationTester
 Method: testSingletonSetFirst
 Body: {
    assertEquals(a, sortedSet.first());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: first (Alternative Action: first=1 ) - Predicate: N/A - Scenario: sortedSet (Alternative Scenario:  )

Project: guava
 Class: PairedStatsTest
 Method: testXStats
 Body: {
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, EMPTY_PAIRED_STATS.xStats());
    assertStatsApproxEqual(ONE_VALUE_STATS, ONE_VALUE_PAIRED_STATS.xStats());
    assertStatsApproxEqual(TWO_VALUES_STATS, TWO_VALUES_PAIRED_STATS.xStats());
    assertStatsApproxEqual(MANY_VALUES_STATS_ITERABLE, MANY_VALUES_PAIRED_STATS.xStats());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: xStats (Alternative Action: xStats=4 ) - Predicate: N/A - Scenario: EMPTY_PAIRED_STATS (Alternative Scenario:  )

Project: guava
 Class: PairedStatsTest
 Method: testYStats
 Body: {
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, EMPTY_PAIRED_STATS.yStats());
    assertStatsApproxEqual(OTHER_ONE_VALUE_STATS, ONE_VALUE_PAIRED_STATS.yStats());
    assertStatsApproxEqual(OTHER_TWO_VALUES_STATS, TWO_VALUES_PAIRED_STATS.yStats());
    assertStatsApproxEqual(OTHER_MANY_VALUES_STATS, MANY_VALUES_PAIRED_STATS.yStats());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: yStats (Alternative Action: yStats=4 ) - Predicate: N/A - Scenario: EMPTY_PAIRED_STATS (Alternative Scenario:  )

Project: guava
 Class: PairedStatsAccumulatorTest
 Method: testXStats
 Body: {
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulator.xStats());
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulatorByAddAllEmptyPairedStats.xStats());
    assertStatsApproxEqual(ONE_VALUE_STATS, oneValueAccumulator.xStats());
    assertStatsApproxEqual(ONE_VALUE_STATS, oneValueAccumulatorByAddAllEmptyPairedStats.xStats());
    assertStatsApproxEqual(TWO_VALUES_STATS, twoValuesAccumulator.xStats());
    assertStatsApproxEqual(
        TWO_VALUES_STATS, twoValuesAccumulatorByAddAllPartitionedPairedStats.xStats());
    assertStatsApproxEqual(MANY_VALUES_STATS_ITERABLE, manyValuesAccumulator.xStats());
    assertStatsApproxEqual(
        MANY_VALUES_STATS_ITERABLE, manyValuesAccumulatorByAddAllPartitionedPairedStats.xStats());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: xStats (Alternative Action: xStats=8 ) - Predicate: N/A - Scenario: emptyAccumulator (Alternative Scenario:  )

Project: guava
 Class: PairedStatsAccumulatorTest
 Method: testYStats
 Body: {
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulator.yStats());
    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulatorByAddAllEmptyPairedStats.yStats());
    assertStatsApproxEqual(OTHER_ONE_VALUE_STATS, oneValueAccumulator.yStats());
    assertStatsApproxEqual(
        OTHER_ONE_VALUE_STATS, oneValueAccumulatorByAddAllEmptyPairedStats.yStats());
    assertStatsApproxEqual(OTHER_TWO_VALUES_STATS, twoValuesAccumulator.yStats());
    assertStatsApproxEqual(
        OTHER_TWO_VALUES_STATS, twoValuesAccumulatorByAddAllPartitionedPairedStats.yStats());
    assertStatsApproxEqual(OTHER_MANY_VALUES_STATS, manyValuesAccumulator.yStats());
    assertStatsApproxEqual(
        OTHER_MANY_VALUES_STATS, manyValuesAccumulatorByAddAllPartitionedPairedStats.yStats());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: yStats (Alternative Action: yStats=8 ) - Predicate: N/A - Scenario: emptyAccumulator (Alternative Scenario:  )

Project: guava
 Class: CountTest
 Method: testGet
 Body: {
    assertEquals(20, new Count(20).get());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: new Count(20) (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testUtf16be
 Body: {
    assertEquals(Charset.forName("UTF-16BE"), Charsets.UTF_16BE);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testUtf16
 Body: {
    assertEquals(Charset.forName("UTF-16"), Charsets.UTF_16);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testUsAscii
 Body: {
    assertEquals(Charset.forName("US-ASCII"), Charsets.US_ASCII);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testIso88591
 Body: {
    assertEquals(Charset.forName("ISO-8859-1"), Charsets.ISO_8859_1);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testUtf8
 Body: {
    assertEquals(Charset.forName("UTF-8"), Charsets.UTF_8);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: CharsetsTest
 Method: testUtf16le
 Body: {
    assertEquals(Charset.forName("UTF-16LE"), Charsets.UTF_16LE);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: forName (Alternative Action: forName=1 ) - Predicate: N/A - Scenario: Charset (Alternative Scenario:  )

Project: guava
 Class: MultimapSizeTester
 Method: testIsEmptyNo
 Body: {
    assertFalse(multimap().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapSizeTester
 Method: testIsEmptyYes
 Body: {
    assertTrue(multimap().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testMax
 Body: {
    assertEquals(LEAST, UnsignedBytes.max(LEAST));
    assertEquals(GREATEST, UnsignedBytes.max(GREATEST));
    assertEquals(
        (byte) 255, UnsignedBytes.max((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: UnsignedBytes (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testJoin
 Body: {
    assertEquals("", UnsignedBytes.join(",", new byte[] {}));
    assertEquals("1", UnsignedBytes.join(",", new byte[] {(byte) 1}));
    assertEquals("1,2", UnsignedBytes.join(",", (byte) 1, (byte) 2));
    assertEquals("123", UnsignedBytes.join("", (byte) 1, (byte) 2, (byte) 3));
    assertEquals("128,255", UnsignedBytes.join(",", (byte) 128, (byte) -1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=5 ) - Predicate: N/A - Scenario: UnsignedBytes (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testMin
 Body: {
    assertEquals(LEAST, UnsignedBytes.min(LEAST));
    assertEquals(GREATEST, UnsignedBytes.min(GREATEST));
    assertEquals(
        (byte) 0, UnsignedBytes.min((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));
    assertEquals(
        (byte) 0, UnsignedBytes.min((byte) -1, (byte) 127, (byte) 1, (byte) -128, (byte) 0));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=4 ) - Predicate: N/A - Scenario: UnsignedBytes (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testToInt
 Body: {
    assertEquals(0, UnsignedBytes.toInt((byte) 0));
    assertEquals(1, UnsignedBytes.toInt((byte) 1));
    assertEquals(127, UnsignedBytes.toInt((byte) 127));
    assertEquals(128, UnsignedBytes.toInt((byte) -128));
    assertEquals(129, UnsignedBytes.toInt((byte) -127));
    assertEquals(255, UnsignedBytes.toInt((byte) -1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toInt (Alternative Action: toInt=6 ) - Predicate: N/A - Scenario: UnsignedBytes (Alternative Scenario:  )

Project: guava
 Class: CollectionContainsTester
 Method: testContains_nullNotContainedButQueriesSupported
 Body: {
    assertFalse("contains(null) should return false", collection.contains(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: HashingTest
 Method: testConcatenatingVarArgs_bits
 Body: {
    assertEquals(
        Hashing.md5().bits() + Hashing.md5().bits(),
        Hashing.concatenating(Hashing.md5(), Hashing.md5()).bits());
    assertEquals(
        Hashing.md5().bits() + Hashing.murmur3_32().bits(),
        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).bits());
    assertEquals(
        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),
        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: bits (Alternative Action: bits=10 ) - Predicate: N/A - Scenario: Hashing.concatenating(Hashing.md5(), Hashing.md5()) (Alternative Scenario:  )

Project: guava
 Class: HashingTest
 Method: testCrc32
 Body: {
    HashTestUtils.assertInvariants(Hashing.crc32());
    assertEquals("Hashing.crc32()", Hashing.crc32().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: crc32 (Alternative Action: crc32=2 ) - Predicate: N/A - Scenario: Hashing (Alternative Scenario:  )

Project: guava
 Class: HashingTest
 Method: testConcatenatingIterable_bits
 Body: {
    assertEquals(
        Hashing.md5().bits() + Hashing.md5().bits(),
        Hashing.concatenating(asList(Hashing.md5(), Hashing.md5())).bits());
    assertEquals(
        Hashing.md5().bits() + Hashing.murmur3_32().bits(),
        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).bits());
    assertEquals(
        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),
        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()))
            .bits());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: bits (Alternative Action: bits=10 ) - Predicate: N/A - Scenario: Hashing.concatenating(asList(Hashing.md5(), Hashing.md5())) (Alternative Scenario:  )

Project: guava
 Class: HashingTest
 Method: testAdler32
 Body: {
    HashTestUtils.assertInvariants(Hashing.adler32());
    assertEquals("Hashing.adler32()", Hashing.adler32().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: adler32 (Alternative Action: adler32=2 ) - Predicate: N/A - Scenario: Hashing (Alternative Scenario:  )

Project: guava
 Class: DoubleUtilsTest
 Method: testOneBits
 Body: {
    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: doubleToRawLongBits (Alternative Action: doubleToRawLongBits=1 ) - Predicate: N/A - Scenario: Double (Alternative Scenario:  )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testCopyOf_array_empty
 Body: {
    /*
     * We don't guarantee the same-as property, so we aren't obligated to test it. However, it's
     * useful in testing - when two things are the same then one can't have bugs the other doesn't.
     */
    assertThat(ImmutableIntArray.copyOf(new int[0])).isSameAs(ImmutableIntArray.of());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableIntArray (Alternative Scenario:  )

Project: guava
 Class: ImmutableIntArrayTest
 Method: testCopyOf_stream
 Body: {
    assertThat(ImmutableIntArray.copyOf(IntStream.empty())).isSameAs(ImmutableIntArray.of());
    assertThat(ImmutableIntArray.copyOf(IntStream.of(0, 1, 3)).asList())
        .containsExactly(0, 1, 3)
        .inOrder();
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=2 ) - Predicate: N/A - Scenario: ImmutableIntArray (Alternative Scenario:  )

Project: guava
 Class: AbstractFutureTest
 Method: testToString_allUnique
 Body: {
    // Two futures should not have the same toString, to avoid people asserting on it
    assertThat(SettableFuture.create().toString()).isNotEqualTo(SettableFuture.create().toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: create=2 ) - Predicate: N/A - Scenario: SettableFuture.create() (Alternative Scenario:  )

Project: guava
 Class: MediaTypeTest
 Method: testGetType
 Body: {
    assertEquals("text", MediaType.parse("text/plain").type());
    assertEquals("application", MediaType.parse("application/atom+xml; charset=utf-8").type());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: type (Alternative Action: parse=2 ) - Predicate: N/A - Scenario: MediaType.parse("text/plain") (Alternative Scenario:  )

Project: guava
 Class: MediaTypeTest
 Method: testHasWildcard
 Body: {
    assertFalse(PLAIN_TEXT_UTF_8.hasWildcard());
    assertFalse(JPEG.hasWildcard());
    assertTrue(ANY_TYPE.hasWildcard());
    assertTrue(ANY_APPLICATION_TYPE.hasWildcard());
    assertTrue(ANY_AUDIO_TYPE.hasWildcard());
    assertTrue(ANY_IMAGE_TYPE.hasWildcard());
    assertTrue(ANY_TEXT_TYPE.hasWildcard());
    assertTrue(ANY_VIDEO_TYPE.hasWildcard());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hasWildcard (Alternative Action: hasWildcard=8 ) - Predicate: N/A - Scenario: PLAIN_TEXT_UTF_8 (Alternative Scenario:  )

Project: guava
 Class: MediaTypeTest
 Method: testGetSubtype
 Body: {
    assertEquals("plain", MediaType.parse("text/plain").subtype());
    assertEquals("atom+xml", MediaType.parse("application/atom+xml; charset=utf-8").subtype());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: subtype (Alternative Action: subtype=2 ) - Predicate: N/A - Scenario: MediaType.parse("text/plain") (Alternative Scenario:  )

Project: guava
 Class: MediaTypeTest
 Method: testToString
 Body: {
    assertEquals("text/plain", MediaType.create("text", "plain").toString());
    assertEquals(
        "text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\"",
        MediaType.create("text", "plain")
            .withParameter("something", "cr@zy")
            .withParameter("something-else", "crazy with spaces")
            .toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: create=2 ) - Predicate: N/A - Scenario: MediaType.create("text", "plain") (Alternative Scenario:  )

Project: guava
 Class: ByteSourceTester
 Method: testContentEquals
 Body: {
    assertTrue(
        source.contentEquals(
            new ByteSource() {
              @Override
              public InputStream openStream() throws IOException {
                return new RandomAmountInputStream(
                    new ByteArrayInputStream(expected), new Random());
              }
            }));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contentEquals (Alternative Action: contentEquals=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: ByteSourceTester
 Method: testSize
 Body: {
    assertEquals(expected.length, source.size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: ByteSourceTester
 Method: testIsEmpty
 Body: {
    assertEquals(expected.length == 0, source.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Longs.lastIndexOf(EMPTY, (long) 1));
    assertEquals(-1, Longs.lastIndexOf(ARRAY1, (long) 2));
    assertEquals(-1, Longs.lastIndexOf(ARRAY234, (long) 1));
    assertEquals(0, Longs.lastIndexOf(new long[] {(long) -1}, (long) -1));
    assertEquals(0, Longs.lastIndexOf(ARRAY234, (long) 2));
    assertEquals(1, Longs.lastIndexOf(ARRAY234, (long) 3));
    assertEquals(2, Longs.lastIndexOf(ARRAY234, (long) 4));
    assertEquals(
        3, Longs.lastIndexOf(new long[] {(long) 2, (long) 3, (long) 2, (long) 3}, (long) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=8 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testStringConverter_nullConversions
 Body: {
    assertNull(Longs.stringConverter().convert(null));
    assertNull(Longs.stringConverter().reverse().convert(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: convert=2 ) - Predicate: N/A - Scenario: Longs.stringConverter() (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testIndexOf_arrayTarget
 Body: {
    assertEquals(0, Longs.indexOf(EMPTY, EMPTY));
    assertEquals(0, Longs.indexOf(ARRAY234, EMPTY));
    assertEquals(-1, Longs.indexOf(EMPTY, ARRAY234));
    assertEquals(-1, Longs.indexOf(ARRAY234, ARRAY1));
    assertEquals(-1, Longs.indexOf(ARRAY1, ARRAY234));
    assertEquals(0, Longs.indexOf(ARRAY1, ARRAY1));
    assertEquals(0, Longs.indexOf(ARRAY234, ARRAY234));
    assertEquals(0, Longs.indexOf(ARRAY234, new long[] {(long) 2, (long) 3}));
    assertEquals(1, Longs.indexOf(ARRAY234, new long[] {(long) 3, (long) 4}));
    assertEquals(1, Longs.indexOf(ARRAY234, new long[] {(long) 3}));
    assertEquals(2, Longs.indexOf(ARRAY234, new long[] {(long) 4}));
    assertEquals(
        1,
        Longs.indexOf(
            new long[] {(long) 2, (long) 3, (long) 3, (long) 3, (long) 3}, new long[] {(long) 3}));
    assertEquals(
        2,
        Longs.indexOf(
            new long[] {(long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2, (long) 3},
            new long[] {(long) 2, (long) 3, (long) 4}));
    assertEquals(
        1,
        Longs.indexOf(
            new long[] {(long) 2, (long) 2, (long) 3, (long) 4, (long) 2, (long) 3, (long) 4},
            new long[] {(long) 2, (long) 3, (long) 4}));
    assertEquals(
        -1,
        Longs.indexOf(
            new long[] {(long) 4, (long) 3, (long) 2}, new long[] {(long) 2, (long) 3, (long) 4}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=15 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testMax
 Body: {
    assertEquals(MIN_VALUE, Longs.max(MIN_VALUE));
    assertEquals(MAX_VALUE, Longs.max(MAX_VALUE));
    assertEquals(
        (long) 9, Longs.max((long) 8, (long) 6, (long) 7, (long) 5, (long) 3, (long) 0, (long) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testToByteArray
 Body: {
    assertByteArrayEquals(
        new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},
        Longs.toByteArray(0x1213141516171819L));
    assertByteArrayEquals(
        new byte[] {
          (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,
          (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88
        },
        Longs.toByteArray(0xFFEEDDCCBBAA9988L));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toByteArray (Alternative Action: toByteArray=2 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testContains
 Body: {
    assertFalse(Longs.contains(EMPTY, (long) 1));
    assertFalse(Longs.contains(ARRAY1, (long) 2));
    assertFalse(Longs.contains(ARRAY234, (long) 1));
    assertTrue(Longs.contains(new long[] {(long) -1}, (long) -1));
    assertTrue(Longs.contains(ARRAY234, (long) 2));
    assertTrue(Longs.contains(ARRAY234, (long) 3));
    assertTrue(Longs.contains(ARRAY234, (long) 4));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=7 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Longs.indexOf(EMPTY, (long) 1));
    assertEquals(-1, Longs.indexOf(ARRAY1, (long) 2));
    assertEquals(-1, Longs.indexOf(ARRAY234, (long) 1));
    assertEquals(0, Longs.indexOf(new long[] {(long) -1}, (long) -1));
    assertEquals(0, Longs.indexOf(ARRAY234, (long) 2));
    assertEquals(1, Longs.indexOf(ARRAY234, (long) 3));
    assertEquals(2, Longs.indexOf(ARRAY234, (long) 4));
    assertEquals(1, Longs.indexOf(new long[] {(long) 2, (long) 3, (long) 2, (long) 3}, (long) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=8 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testFromBytes
 Body: {
    assertEquals(
        0x1213141516171819L,
        Longs.fromBytes(
            (byte) 0x12,
            (byte) 0x13,
            (byte) 0x14,
            (byte) 0x15,
            (byte) 0x16,
            (byte) 0x17,
            (byte) 0x18,
            (byte) 0x19));
    assertEquals(
        0xFFEEDDCCBBAA9988L,
        Longs.fromBytes(
            (byte) 0xFF,
            (byte) 0xEE,
            (byte) 0xDD,
            (byte) 0xCC,
            (byte) 0xBB,
            (byte) 0xAA,
            (byte) 0x99,
            (byte) 0x88));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromBytes (Alternative Action: fromBytes=2 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testMin
 Body: {
    assertEquals(MIN_VALUE, Longs.min(MIN_VALUE));
    assertEquals(MAX_VALUE, Longs.min(MAX_VALUE));
    assertEquals(
        (long) 0, Longs.min((long) 8, (long) 6, (long) 7, (long) 5, (long) 3, (long) 0, (long) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testFromByteArray
 Body: {
    assertEquals(
        0x1213141516171819L,
        Longs.fromByteArray(new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x33}));
    assertEquals(
        0xFFEEDDCCBBAA9988L,
        Longs.fromByteArray(
            new byte[] {
              (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,
              (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88
            }));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromByteArray (Alternative Action: fromByteArray=2 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testJoin
 Body: {
    assertEquals("", Longs.join(",", EMPTY));
    assertEquals("1", Longs.join(",", ARRAY1));
    assertEquals("1,2", Longs.join(",", (long) 1, (long) 2));
    assertEquals("123", Longs.join("", (long) 1, (long) 2, (long) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Longs (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testCollapse_any
 Body: {
    assertEquals("", CharMatcher.any().collapseFrom("", '_'));
    assertEquals("_", CharMatcher.any().collapseFrom("a", '_'));
    assertEquals("_", CharMatcher.any().collapseFrom("ab", '_'));
    assertEquals("_", CharMatcher.any().collapseFrom("abcd", '_'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: collapseFrom (Alternative Action: collapseFrom=4 ) - Predicate: N/A - Scenario: CharMatcher.any() (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testReplaceFrom
 Body: {
    assertEquals("yoho", is('a').replaceFrom("yaha", 'o'));
    assertEquals("yh", is('a').replaceFrom("yaha", ""));
    assertEquals("yoho", is('a').replaceFrom("yaha", "o"));
    assertEquals("yoohoo", is('a').replaceFrom("yaha", "oo"));
    assertEquals("12 &gt; 5", is('>').replaceFrom("12 > 5", "&gt;"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: replaceFrom (Alternative Action: replaceFrom=5 ) - Predicate: N/A - Scenario: is('a') (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testToString
 Body: {
    assertToStringWorks("CharMatcher.none()", CharMatcher.anyOf(""));
    assertToStringWorks("CharMatcher.is('\\u0031')", CharMatcher.anyOf("1"));
    assertToStringWorks("CharMatcher.isNot('\\u0031')", CharMatcher.isNot('1'));
    assertToStringWorks("CharMatcher.anyOf(\"\\u0031\\u0032\")", CharMatcher.anyOf("12"));
    assertToStringWorks("CharMatcher.anyOf(\"\\u0031\\u0032\\u0033\")", CharMatcher.anyOf("321"));
    assertToStringWorks("CharMatcher.inRange('\\u0031', '\\u0033')", CharMatcher.inRange('1', '3'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: anyOf (Alternative Action: anyOf=4 ) - Predicate: N/A - Scenario: CharMatcher (Alternative Scenario:  )

Project: guava
 Class: FunnelsTest
 Method: testForStrings_null
 Body: {
    assertNullsThrowException(Funnels.unencodedCharsFunnel());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: unencodedCharsFunnel (Alternative Action: unencodedCharsFunnel=1 ) - Predicate: N/A - Scenario: Funnels (Alternative Scenario:  )

Project: guava
 Class: FunnelsTest
 Method: testForInts_null
 Body: {
    assertNullsThrowException(Funnels.integerFunnel());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: integerFunnel (Alternative Action: integerFunnel=1 ) - Predicate: N/A - Scenario: Funnels (Alternative Scenario:  )

Project: guava
 Class: FunnelsTest
 Method: testForBytes_null
 Body: {
    assertNullsThrowException(Funnels.byteArrayFunnel());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: byteArrayFunnel (Alternative Action: byteArrayFunnel=1 ) - Predicate: N/A - Scenario: Funnels (Alternative Scenario:  )

Project: guava
 Class: FunnelsTest
 Method: testForLongs_null
 Body: {
    assertNullsThrowException(Funnels.longFunnel());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: longFunnel (Alternative Action: longFunnel=1 ) - Predicate: N/A - Scenario: Funnels (Alternative Scenario:  )

Project: guava
 Class: LongMathTest
 Method: testConstantsSqrtMaxLong
 Body: {
    assertEquals(
        /*expected=*/ LongMath.sqrt(Long.MAX_VALUE, FLOOR),
        /*actual=*/ LongMath.FLOOR_SQRT_MAX_LONG);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: sqrt (Alternative Action: sqrt=1 ) - Predicate: N/A - Scenario: LongMath (Alternative Scenario:  )

Project: guava
 Class: LongMathTest
 Method: testMaxSignedPowerOfTwo
 Body: {
    assertTrue(LongMath.isPowerOfTwo(LongMath.MAX_SIGNED_POWER_OF_TWO));
    assertFalse(LongMath.isPowerOfTwo(LongMath.MAX_SIGNED_POWER_OF_TWO * 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isPowerOfTwo (Alternative Action: isPowerOfTwo=2 ) - Predicate: N/A - Scenario: LongMath (Alternative Scenario:  )

Project: guava
 Class: LongMathTest
 Method: testConstantMaxPowerOfSqrt2Unsigned
 Body: {
    assertEquals(
        /*expected=*/ BigIntegerMath.sqrt(BigInteger.ZERO.setBit(2 * Long.SIZE - 1), FLOOR)
            .longValue(),
        /*actual=*/ LongMath.MAX_POWER_OF_SQRT2_UNSIGNED);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: longValue (Alternative Action: sqrt=1 ) - Predicate: N/A - Scenario: BigIntegerMath.sqrt(BigInteger.ZERO.setBit(2 * Long.SIZE - 1), FLOOR) (Alternative Scenario:  )

Project: guava
 Class: OrderingTest
 Method: testReverseOfReverseSameAsForward
 Body: {
    // Not guaranteed by spec, but it works, and saves us from testing
    // exhaustively
    assertSame(numberOrdering, numberOrdering.reverse().reverse());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: reverse (Alternative Action: reverse=2 ) - Predicate: N/A - Scenario: numberOrdering.reverse() (Alternative Scenario:  )

Project: guava
 Class: ImmutableTypeToInstanceMapTest
 Method: testEmpty
 Body: {
    assertEquals(0, ImmutableTypeToInstanceMap.of().size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: ImmutableTypeToInstanceMap.of() (Alternative Scenario:  )

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: addEdge_parallelSelfLoopEdge
 Body: {
    assertTrue(addEdge(N1, N1, E11));
    assertTrue(addEdge(N1, N1, E11_A));
    assertThat(network.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: edgesConnecting_parallelSelfLoopEdges
 Body: {
    assertTrue(addEdge(N1, N1, E11));
    assertTrue(addEdge(N1, N1, E11_A));
    assertThat(network.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: edgesConnecting_parallelEdges
 Body: {
    assertTrue(addEdge(N1, N2, E12));
    assertTrue(addEdge(N1, N2, E12_A));
    assertTrue(addEdge(N2, N1, E21));
    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12, E12_A, E21);
    assertThat(network.edgesConnecting(N2, N1)).containsExactly(E12, E12_A, E21);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: ConfigurableUndirectedMultiNetworkTest
 Method: addEdge_parallelEdge
 Body: {
    assertTrue(addEdge(N1, N2, E12));
    assertTrue(addEdge(N1, N2, E12_A));
    assertTrue(addEdge(N2, N1, E21));
    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12, E12_A, E21);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: addEdge (Alternative Action: addEdge=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: PredicatesTest
 Method: testOr_applyTernary
 Body: {
    assertEvalsLikeOdd(Predicates.or(isOdd(), FALSE, FALSE));
    assertEvalsLikeOdd(Predicates.or(FALSE, isOdd(), FALSE));
    assertEvalsLikeOdd(Predicates.or(FALSE, FALSE, isOdd()));
    assertEvalsToTrue(Predicates.or(FALSE, TRUE, NEVER_REACHED));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: or (Alternative Action: or=4 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testOr_applyNoArgs
 Body: {
    assertEvalsToFalse(Predicates.or());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: or (Alternative Action: or=1 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testAlwaysFalse_apply
 Body: {
    assertEvalsToFalse(Predicates.alwaysFalse());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: alwaysFalse (Alternative Action: alwaysFalse=1 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testAnd_applyNoArgs
 Body: {
    assertEvalsToTrue(Predicates.and());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: and (Alternative Action: and=1 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testOr_applyOneArg
 Body: {
    assertEvalsToTrue(Predicates.or(TRUE));
    assertEvalsToFalse(Predicates.or(FALSE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: or (Alternative Action: or=2 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testAlwaysTrue_apply
 Body: {
    assertEvalsToTrue(Predicates.alwaysTrue());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: alwaysTrue (Alternative Action: alwaysTrue=1 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testAnd_applyBinary
 Body: {
    assertEvalsLikeOdd(Predicates.and(isOdd(), TRUE));
    assertEvalsLikeOdd(Predicates.and(TRUE, isOdd()));
    assertEvalsToFalse(Predicates.and(FALSE, NEVER_REACHED));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: and (Alternative Action: and=3 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testAnd_applyTernary
 Body: {
    assertEvalsLikeOdd(Predicates.and(isOdd(), TRUE, TRUE));
    assertEvalsLikeOdd(Predicates.and(TRUE, isOdd(), TRUE));
    assertEvalsLikeOdd(Predicates.and(TRUE, TRUE, isOdd()));
    assertEvalsToFalse(Predicates.and(TRUE, FALSE, NEVER_REACHED));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: and (Alternative Action: and=4 ) - Predicate: N/A - Scenario: Predicates (Alternative Scenario:  )

Project: guava
 Class: FuturesGetUncheckedTest
 Method: testGetUnchecked_success
 Body: {
    assertEquals("foo", getUnchecked(immediateFuture("foo")));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getUnchecked (Alternative Action: immediateFuture=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: StringsTest
 Method: testPadStart_negativeMinLength
 Body: {
    assertSame("x", Strings.padStart("x", -1, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padStart (Alternative Action: padStart=1 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testPadStart_noPadding
 Body: {
    assertSame("", Strings.padStart("", 0, '-'));
    assertSame("x", Strings.padStart("x", 0, '-'));
    assertSame("x", Strings.padStart("x", 1, '-'));
    assertSame("xx", Strings.padStart("xx", 0, '-'));
    assertSame("xx", Strings.padStart("xx", 2, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padStart (Alternative Action: padStart=5 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testPadStart_somePadding
 Body: {
    assertEquals("-", Strings.padStart("", 1, '-'));
    assertEquals("--", Strings.padStart("", 2, '-'));
    assertEquals("-x", Strings.padStart("x", 2, '-'));
    assertEquals("--x", Strings.padStart("x", 3, '-'));
    assertEquals("-xx", Strings.padStart("xx", 3, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padStart (Alternative Action: padStart=5 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testEmptyToNull
 Body: {
    assertNull(Strings.emptyToNull(null));
    assertNull(Strings.emptyToNull(""));
    assertEquals("a", Strings.emptyToNull("a"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: emptyToNull (Alternative Action: emptyToNull=3 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testPadEnd_negativeMinLength
 Body: {
    assertSame("x", Strings.padEnd("x", -1, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padEnd (Alternative Action: padEnd=1 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testCommonSuffix
 Body: {
    assertEquals("", Strings.commonSuffix("", ""));
    assertEquals("", Strings.commonSuffix("abc", ""));
    assertEquals("", Strings.commonSuffix("", "abc"));
    assertEquals("", Strings.commonSuffix("abcde", "xyz"));
    assertEquals("", Strings.commonSuffix("xyz", "abcde"));
    assertEquals("", Strings.commonSuffix("xyz", "xyzabc"));
    assertEquals("c", Strings.commonSuffix("abc", "ccccc"));
    assertEquals("aa", Strings.commonSuffix("aa", "aaaaa"));
    assertEquals("abc", Strings.commonSuffix(new StringBuffer("xyzabc"), "xxxabc"));

    // Identical valid surrogate pairs.
    assertEquals(
        "\uD8AB\uDCABdef", Strings.commonSuffix("abc\uD8AB\uDCABdef", "xyz\uD8AB\uDCABdef"));
    // Differing valid surrogate pairs.
    assertEquals("def", Strings.commonSuffix("abc\uD8AB\uDCABdef", "abc\uD8AC\uDCABdef"));
    // One invalid pair.
    assertEquals("def", Strings.commonSuffix("abc\uD8AB\uDCABdef", "xyz\uDCAB\uDCABdef"));
    // Two identical invalid pairs.
    assertEquals(
        "\uD8AB\uD8ABdef", Strings.commonSuffix("abc\uD8AB\uD8ABdef", "xyz\uD8AB\uD8ABdef"));
    // Two differing invalid pairs.
    assertEquals("\uDCABdef", Strings.commonSuffix("abc\uDCAB\uDCABdef", "abc\uDCAC\uDCABdef"));
    // One orphan low surrogate.
    assertEquals("", Strings.commonSuffix("x\uD8AB\uDCAB", "\uDCAB"));
    // Two orphan low surrogates.
    assertEquals("\uDCAB", Strings.commonSuffix("\uDCAB", "\uDCAB"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: commonSuffix (Alternative Action: commonSuffix=16 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testValidSurrogatePairAt
 Body: {
    assertTrue(Strings.validSurrogatePairAt("\uD8AB\uDCAB", 0));
    assertTrue(Strings.validSurrogatePairAt("abc\uD8AB\uDCAB", 3));
    assertTrue(Strings.validSurrogatePairAt("abc\uD8AB\uDCABxyz", 3));
    assertFalse(Strings.validSurrogatePairAt("\uD8AB\uD8AB", 0));
    assertFalse(Strings.validSurrogatePairAt("\uDCAB\uDCAB", 0));
    assertFalse(Strings.validSurrogatePairAt("\uD8AB\uDCAB", -1));
    assertFalse(Strings.validSurrogatePairAt("\uD8AB\uDCAB", 1));
    assertFalse(Strings.validSurrogatePairAt("\uD8AB\uDCAB", -2));
    assertFalse(Strings.validSurrogatePairAt("\uD8AB\uDCAB", 2));
    assertFalse(Strings.validSurrogatePairAt("x\uDCAB", 0));
    assertFalse(Strings.validSurrogatePairAt("\uD8ABx", 0));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: validSurrogatePairAt (Alternative Action: validSurrogatePairAt=11 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testPadEnd_somePadding
 Body: {
    assertEquals("-", Strings.padEnd("", 1, '-'));
    assertEquals("--", Strings.padEnd("", 2, '-'));
    assertEquals("x-", Strings.padEnd("x", 2, '-'));
    assertEquals("x--", Strings.padEnd("x", 3, '-'));
    assertEquals("xx-", Strings.padEnd("xx", 3, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padEnd (Alternative Action: padEnd=5 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testLenientFormat
 Body: {
    assertEquals("%s", Strings.lenientFormat("%s"));
    assertEquals("5", Strings.lenientFormat("%s", 5));
    assertEquals("foo [5]", Strings.lenientFormat("foo", 5));
    assertEquals("foo [5, 6, 7]", Strings.lenientFormat("foo", 5, 6, 7));
    assertEquals("%s 1 2", Strings.lenientFormat("%s %s %s", "%s", 1, 2));
    assertEquals(" [5, 6]", Strings.lenientFormat("", 5, 6));
    assertEquals("123", Strings.lenientFormat("%s%s%s", 1, 2, 3));
    assertEquals("1%s%s", Strings.lenientFormat("%s%s%s", 1));
    assertEquals("5 + 6 = 11", Strings.lenientFormat("%s + 6 = 11", 5));
    assertEquals("5 + 6 = 11", Strings.lenientFormat("5 + %s = 11", 6));
    assertEquals("5 + 6 = 11", Strings.lenientFormat("5 + 6 = %s", 11));
    assertEquals("5 + 6 = 11", Strings.lenientFormat("%s + %s = %s", 5, 6, 11));
    assertEquals("null [null, null]", Strings.lenientFormat("%s", null, null, null));
    assertEquals("null [5, 6]", Strings.lenientFormat(null, 5, 6));
    assertEquals("null", Strings.lenientFormat("%s", (Object) null));
    assertEquals("(Object[])null", Strings.lenientFormat("%s", (Object[]) null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lenientFormat (Alternative Action: lenientFormat=16 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testCommonPrefix
 Body: {
    assertEquals("", Strings.commonPrefix("", ""));
    assertEquals("", Strings.commonPrefix("abc", ""));
    assertEquals("", Strings.commonPrefix("", "abc"));
    assertEquals("", Strings.commonPrefix("abcde", "xyz"));
    assertEquals("", Strings.commonPrefix("xyz", "abcde"));
    assertEquals("", Strings.commonPrefix("xyz", "abcxyz"));
    assertEquals("a", Strings.commonPrefix("abc", "aaaaa"));
    assertEquals("aa", Strings.commonPrefix("aa", "aaaaa"));
    assertEquals("abc", Strings.commonPrefix(new StringBuffer("abcdef"), "abcxyz"));

    // Identical valid surrogate pairs.
    assertEquals(
        "abc\uD8AB\uDCAB", Strings.commonPrefix("abc\uD8AB\uDCABdef", "abc\uD8AB\uDCABxyz"));
    // Differing valid surrogate pairs.
    assertEquals("abc", Strings.commonPrefix("abc\uD8AB\uDCABdef", "abc\uD8AB\uDCACxyz"));
    // One invalid pair.
    assertEquals("abc", Strings.commonPrefix("abc\uD8AB\uDCABdef", "abc\uD8AB\uD8ABxyz"));
    // Two identical invalid pairs.
    assertEquals(
        "abc\uD8AB\uD8AC", Strings.commonPrefix("abc\uD8AB\uD8ACdef", "abc\uD8AB\uD8ACxyz"));
    // Two differing invalid pairs.
    assertEquals("abc\uD8AB", Strings.commonPrefix("abc\uD8AB\uD8ABdef", "abc\uD8AB\uD8ACxyz"));
    // One orphan high surrogate.
    assertEquals("", Strings.commonPrefix("\uD8AB\uDCAB", "\uD8AB"));
    // Two orphan high surrogates.
    assertEquals("\uD8AB", Strings.commonPrefix("\uD8AB", "\uD8AB"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: commonPrefix (Alternative Action: commonPrefix=16 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testPadEnd_noPadding
 Body: {
    assertSame("", Strings.padEnd("", 0, '-'));
    assertSame("x", Strings.padEnd("x", 0, '-'));
    assertSame("x", Strings.padEnd("x", 1, '-'));
    assertSame("xx", Strings.padEnd("xx", 0, '-'));
    assertSame("xx", Strings.padEnd("xx", 2, '-'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padEnd (Alternative Action: padEnd=5 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testIsNullOrEmpty
 Body: {
    assertTrue(Strings.isNullOrEmpty(null));
    assertTrue(Strings.isNullOrEmpty(""));
    assertFalse(Strings.isNullOrEmpty("a"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isNullOrEmpty (Alternative Action: isNullOrEmpty=3 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: StringsTest
 Method: testNullToEmpty
 Body: {
    assertEquals("", Strings.nullToEmpty(null));
    assertEquals("", Strings.nullToEmpty(""));
    assertEquals("a", Strings.nullToEmpty("a"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: nullToEmpty (Alternative Action: nullToEmpty=3 ) - Predicate: N/A - Scenario: Strings (Alternative Scenario:  )

Project: guava
 Class: BigIntegerMathTest
 Method: testFactorial0
 Body: {
    assertEquals(BigInteger.ONE, BigIntegerMath.factorial(0));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: factorial (Alternative Action: factorial=1 ) - Predicate: N/A - Scenario: BigIntegerMath (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testSplitterIterableIsLazy_string
 Body: {
    assertSplitterIterableIsLazy(Splitter.on(","));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: on (Alternative Action: on=1 ) - Predicate: N/A - Scenario: Splitter (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testSplitterIterableIsUnmodifiable_char
 Body: {
    assertIteratorIsUnmodifiable(COMMA_SPLITTER.split("a,b").iterator());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: iterator (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: COMMA_SPLITTER.split("a,b") (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testSplitterIterableIsUnmodifiable_pattern
 Body: {
    assertIteratorIsUnmodifiable(Splitter.on(Pattern.compile(",")).split("a,b").iterator());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: iterator (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: Splitter.on(Pattern.compile(",")).split("a,b") (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testToString
 Body: {
    assertEquals("[]", COMMA_SPLITTER.split("").toString());
    assertEquals("[a, b, c]", COMMA_SPLITTER.split("a,b,c").toString());
    assertEquals("[yam, bam, jam, ham]", Splitter.on(", ").split("yam, bam, jam, ham").toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: split=3 ) - Predicate: N/A - Scenario: COMMA_SPLITTER.split("") (Alternative Scenario:  )

Project: guava
 Class: SplitterTest
 Method: testSplitterIterableIsUnmodifiable_string
 Body: {
    assertIteratorIsUnmodifiable(Splitter.on(",").split("a,b").iterator());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: iterator (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: Splitter.on(",").split("a,b") (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testLastIndexOf
 Body: {
    assertEquals(-1, Ints.lastIndexOf(EMPTY, (int) 1));
    assertEquals(-1, Ints.lastIndexOf(ARRAY1, (int) 2));
    assertEquals(-1, Ints.lastIndexOf(ARRAY234, (int) 1));
    assertEquals(0, Ints.lastIndexOf(new int[] {(int) -1}, (int) -1));
    assertEquals(0, Ints.lastIndexOf(ARRAY234, (int) 2));
    assertEquals(1, Ints.lastIndexOf(ARRAY234, (int) 3));
    assertEquals(2, Ints.lastIndexOf(ARRAY234, (int) 4));
    assertEquals(3, Ints.lastIndexOf(new int[] {(int) 2, (int) 3, (int) 2, (int) 3}, (int) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: lastIndexOf (Alternative Action: lastIndexOf=8 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testFromByteArray
 Body: {
    assertEquals(0x12131415, Ints.fromByteArray(new byte[] {0x12, 0x13, 0x14, 0x15, 0x33}));
    assertEquals(
        0xFFEEDDCC,
        Ints.fromByteArray(new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromByteArray (Alternative Action: fromByteArray=2 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testMin
 Body: {
    assertEquals(LEAST, Ints.min(LEAST));
    assertEquals(GREATEST, Ints.min(GREATEST));
    assertEquals((int) 0, Ints.min((int) 8, (int) 6, (int) 7, (int) 5, (int) 3, (int) 0, (int) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testStringConverter_nullConversions
 Body: {
    assertNull(Ints.stringConverter().convert(null));
    assertNull(Ints.stringConverter().reverse().convert(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: convert (Alternative Action: convert=2 ) - Predicate: N/A - Scenario: Ints.stringConverter() (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testJoin
 Body: {
    assertEquals("", Ints.join(",", EMPTY));
    assertEquals("1", Ints.join(",", ARRAY1));
    assertEquals("1,2", Ints.join(",", (int) 1, (int) 2));
    assertEquals("123", Ints.join("", (int) 1, (int) 2, (int) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=4 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testMax
 Body: {
    assertEquals(LEAST, Ints.max(LEAST));
    assertEquals(GREATEST, Ints.max(GREATEST));
    assertEquals((int) 9, Ints.max((int) 8, (int) 6, (int) 7, (int) 5, (int) 3, (int) 0, (int) 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testIndexOf_arrayTarget
 Body: {
    assertEquals(0, Ints.indexOf(EMPTY, EMPTY));
    assertEquals(0, Ints.indexOf(ARRAY234, EMPTY));
    assertEquals(-1, Ints.indexOf(EMPTY, ARRAY234));
    assertEquals(-1, Ints.indexOf(ARRAY234, ARRAY1));
    assertEquals(-1, Ints.indexOf(ARRAY1, ARRAY234));
    assertEquals(0, Ints.indexOf(ARRAY1, ARRAY1));
    assertEquals(0, Ints.indexOf(ARRAY234, ARRAY234));
    assertEquals(0, Ints.indexOf(ARRAY234, new int[] {(int) 2, (int) 3}));
    assertEquals(1, Ints.indexOf(ARRAY234, new int[] {(int) 3, (int) 4}));
    assertEquals(1, Ints.indexOf(ARRAY234, new int[] {(int) 3}));
    assertEquals(2, Ints.indexOf(ARRAY234, new int[] {(int) 4}));
    assertEquals(
        1,
        Ints.indexOf(new int[] {(int) 2, (int) 3, (int) 3, (int) 3, (int) 3}, new int[] {(int) 3}));
    assertEquals(
        2,
        Ints.indexOf(
            new int[] {(int) 2, (int) 3, (int) 2, (int) 3, (int) 4, (int) 2, (int) 3},
            new int[] {(int) 2, (int) 3, (int) 4}));
    assertEquals(
        1,
        Ints.indexOf(
            new int[] {(int) 2, (int) 2, (int) 3, (int) 4, (int) 2, (int) 3, (int) 4},
            new int[] {(int) 2, (int) 3, (int) 4}));
    assertEquals(
        -1,
        Ints.indexOf(new int[] {(int) 4, (int) 3, (int) 2}, new int[] {(int) 2, (int) 3, (int) 4}));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=15 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testIndexOf
 Body: {
    assertEquals(-1, Ints.indexOf(EMPTY, (int) 1));
    assertEquals(-1, Ints.indexOf(ARRAY1, (int) 2));
    assertEquals(-1, Ints.indexOf(ARRAY234, (int) 1));
    assertEquals(0, Ints.indexOf(new int[] {(int) -1}, (int) -1));
    assertEquals(0, Ints.indexOf(ARRAY234, (int) 2));
    assertEquals(1, Ints.indexOf(ARRAY234, (int) 3));
    assertEquals(2, Ints.indexOf(ARRAY234, (int) 4));
    assertEquals(1, Ints.indexOf(new int[] {(int) 2, (int) 3, (int) 2, (int) 3}, (int) 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: indexOf (Alternative Action: indexOf=8 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testFromBytes
 Body: {
    assertEquals(0x12131415, Ints.fromBytes((byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15));
    assertEquals(0xFFEEDDCC, Ints.fromBytes((byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: fromBytes (Alternative Action: fromBytes=2 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testContains
 Body: {
    assertFalse(Ints.contains(EMPTY, (int) 1));
    assertFalse(Ints.contains(ARRAY1, (int) 2));
    assertFalse(Ints.contains(ARRAY234, (int) 1));
    assertTrue(Ints.contains(new int[] {(int) -1}, (int) -1));
    assertTrue(Ints.contains(ARRAY234, (int) 2));
    assertTrue(Ints.contains(ARRAY234, (int) 3));
    assertTrue(Ints.contains(ARRAY234, (int) 4));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=7 ) - Predicate: N/A - Scenario: Ints (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testMax
 Body: {
    assertEquals(LEAST, UnsignedInts.max(LEAST));
    assertEquals(GREATEST, UnsignedInts.max(GREATEST));
    assertEquals(
        (int) 0xff1a618bL,
        UnsignedInts.max(
            (int) 8L,
            (int) 6L,
            (int) 7L,
            (int) 0x12345678L,
            (int) 0x5a4316b8L,
            (int) 0xff1a618bL,
            (int) 0L));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: UnsignedInts (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testDecodeInt
 Body: {
    assertEquals(0xffffffff, UnsignedInts.decode("0xffffffff"));
    assertEquals(01234567, UnsignedInts.decode("01234567")); // octal
    assertEquals(0x12345678, UnsignedInts.decode("#12345678"));
    assertEquals(76543210, UnsignedInts.decode("76543210"));
    assertEquals(0x13579135, UnsignedInts.decode("0x13579135"));
    assertEquals(0x13579135, UnsignedInts.decode("0X13579135"));
    assertEquals(0, UnsignedInts.decode("0"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: decode (Alternative Action: decode=7 ) - Predicate: N/A - Scenario: UnsignedInts (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testJoin
 Body: {
    assertEquals("", join());
    assertEquals("1", join(1));
    assertEquals("1,2", join(1, 2));
    assertEquals("4294967295,2147483648", join(-1, Integer.MIN_VALUE));

    assertEquals("123", UnsignedInts.join("", 1, 2, 3));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=5 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: UnsignedIntsTest
 Method: testMin
 Body: {
    assertEquals(LEAST, UnsignedInts.min(LEAST));
    assertEquals(GREATEST, UnsignedInts.min(GREATEST));
    assertEquals(
        (int) 0L,
        UnsignedInts.min(
            (int) 8L,
            (int) 6L,
            (int) 7L,
            (int) 0x12345678L,
            (int) 0x5a4316b8L,
            (int) 0xff1a618bL,
            (int) 0L));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: UnsignedInts (Alternative Scenario:  )

Project: guava
 Class: IntMathTest
 Method: testPowersSqrtMaxInt
 Body: {
    assertEquals(
        /*expected=*/ IntMath.sqrt(Integer.MAX_VALUE, FLOOR),
        /*actual=*/ IntMath.FLOOR_SQRT_MAX_INT);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: sqrt (Alternative Action: sqrt=1 ) - Predicate: N/A - Scenario: IntMath (Alternative Scenario:  )

Project: guava
 Class: IntMathTest
 Method: testConstantMaxPowerOfSqrt2Unsigned
 Body: {
    assertEquals(
        /*expected=*/ BigIntegerMath.sqrt(BigInteger.ZERO.setBit(2 * Integer.SIZE - 1), FLOOR)
            .intValue(),
        /*actual=*/ IntMath.MAX_POWER_OF_SQRT2_UNSIGNED);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: intValue (Alternative Action: sqrt=1 ) - Predicate: N/A - Scenario: BigIntegerMath.sqrt(BigInteger.ZERO.setBit(2 * Integer.SIZE - 1), FLOOR) (Alternative Scenario:  )

Project: guava
 Class: MapContainsValueTester
 Method: testContains_nullNotContainedButAllowed
 Body: {
    assertFalse("containsValue(null) should return false", getMap().containsValue(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsValue (Alternative Action: getMap=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: ImmutableCollectionTest
 Method: testCapacityExpansion
 Body: {
    assertEquals(1, ImmutableCollection.Builder.expandedCapacity(0, 1));
    assertEquals(2, ImmutableCollection.Builder.expandedCapacity(0, 2));
    assertEquals(2, ImmutableCollection.Builder.expandedCapacity(1, 2));
    assertEquals(
        Integer.MAX_VALUE, ImmutableCollection.Builder.expandedCapacity(0, Integer.MAX_VALUE));
    assertEquals(
        Integer.MAX_VALUE, ImmutableCollection.Builder.expandedCapacity(1, Integer.MAX_VALUE));
    assertEquals(
        Integer.MAX_VALUE,
        ImmutableCollection.Builder.expandedCapacity(Integer.MAX_VALUE - 1, Integer.MAX_VALUE));

    assertEquals(13, ImmutableCollection.Builder.expandedCapacity(8, 9));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: expandedCapacity (Alternative Action: expandedCapacity=7 ) - Predicate: N/A - Scenario: ImmutableCollection.Builder (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash32Test
 Method: testKnownIntegerInputs
 Body: {
    assertHash(593689054, murmur3_32().hashInt(0));
    assertHash(-189366624, murmur3_32().hashInt(-42));
    assertHash(-1134849565, murmur3_32().hashInt(42));
    assertHash(-1718298732, murmur3_32().hashInt(Integer.MIN_VALUE));
    assertHash(-1653689534, murmur3_32().hashInt(Integer.MAX_VALUE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashInt (Alternative Action: hashInt=5 ) - Predicate: N/A - Scenario: murmur3_32() (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash32Test
 Method: testKnownLongInputs
 Body: {
    assertHash(1669671676, murmur3_32().hashLong(0L));
    assertHash(-846261623, murmur3_32().hashLong(-42L));
    assertHash(1871679806, murmur3_32().hashLong(42L));
    assertHash(1366273829, murmur3_32().hashLong(Long.MIN_VALUE));
    assertHash(-2106506049, murmur3_32().hashLong(Long.MAX_VALUE));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashLong (Alternative Action: murmur3_32=5 ) - Predicate: N/A - Scenario: murmur3_32() (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash32Test
 Method: testKnownStringInputs
 Body: {
    assertHash(0, murmur3_32().hashUnencodedChars(""));
    assertHash(679745764, murmur3_32().hashUnencodedChars("k"));
    assertHash(1510782915, murmur3_32().hashUnencodedChars("hell"));
    assertHash(-675079799, murmur3_32().hashUnencodedChars("hello"));
    assertHash(1935035788, murmur3_32().hashUnencodedChars("http://www.google.com/"));
    assertHash(
        -528633700, murmur3_32().hashUnencodedChars("The quick brown fox jumps over the lazy dog"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashUnencodedChars (Alternative Action: murmur3_32=6 ) - Predicate: N/A - Scenario: murmur3_32() (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash32Test
 Method: testInvariants
 Body: {
    HashTestUtils.assertInvariants(murmur3_32());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: murmur3_32 (Alternative Action: murmur3_32=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: SingletonImmutableTableTest
 Method: testGet
 Body: {
    assertEquals("blah", testTable.get('a', 1));
    assertNull(testTable.get('a', 2));
    assertNull(testTable.get('A', 1));
    assertNull(testTable.get('A', 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: get=4 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testContainsRow
 Body: {
    assertTrue(testTable.containsRow('a'));
    assertFalse(testTable.containsRow('A'));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsRow (Alternative Action: containsRow=2 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testToString
 Body: {
    assertEquals("{a={1=blah}}", testTable.toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testContainsValue
 Body: {
    assertTrue(testTable.containsValue("blah"));
    assertFalse(testTable.containsValue(""));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsValue (Alternative Action: containsValue=2 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testContains
 Body: {
    assertTrue(testTable.contains('a', 1));
    assertFalse(testTable.contains('a', 2));
    assertFalse(testTable.contains('A', 1));
    assertFalse(testTable.contains('A', 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: contains (Alternative Action: contains=4 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testContainsColumn
 Body: {
    assertTrue(testTable.containsColumn(1));
    assertFalse(testTable.containsColumn(2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsColumn (Alternative Action: containsColumn=2 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testIsEmpty
 Body: {
    assertFalse(testTable.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: SingletonImmutableTableTest
 Method: testSize
 Body: {
    assertEquals(1, testTable.size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: testTable (Alternative Scenario:  )

Project: guava
 Class: CollectionEqualsTester
 Method: testEquals_self
 Body: {
    assertTrue("An Object should be equal to itself.", collection.equals(collection));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: equals (Alternative Action: equals=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: CollectionEqualsTester
 Method: testEquals_null
 Body: {
    // noinspection ObjectEqualsNull
    assertFalse("An object should not be equal to null.", collection.equals(null));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: equals (Alternative Action: equals=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: CollectionEqualsTester
 Method: testEquals_notACollection
 Body: {
    // noinspection EqualsBetweenInconvertibleTypes
    assertFalse(
        "A Collection should never equal an object that is not a Collection.",
        collection.equals("huh?"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: equals (Alternative Action: equals=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: ImmutableSetMultimapTest
 Method: testOf
 Body: {
    assertMultimapEquals(ImmutableSetMultimap.of("one", 1), "one", 1);
    assertMultimapEquals(ImmutableSetMultimap.of("one", 1, "two", 2), "one", 1, "two", 2);
    assertMultimapEquals(
        ImmutableSetMultimap.of("one", 1, "two", 2, "three", 3), "one", 1, "two", 2, "three", 3);
    assertMultimapEquals(
        ImmutableSetMultimap.of("one", 1, "two", 2, "three", 3, "four", 4),
        "one",
        1,
        "two",
        2,
        "three",
        3,
        "four",
        4);
    assertMultimapEquals(
        ImmutableSetMultimap.of("one", 1, "two", 2, "three", 3, "four", 4, "five", 5),
        "one",
        1,
        "two",
        2,
        "three",
        3,
        "four",
        4,
        "five",
        5);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=5 ) - Predicate: N/A - Scenario: ImmutableSetMultimap (Alternative Scenario:  )

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyEmptyString
 Body: {
    assertEquals(".", simplifyPath(""));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify8
 Body: {
    assertEquals("/", simplifyPath("/././././"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testHiddenFiles
 Body: {
    assertEquals(".b", simplifyPath(".b"));
    assertEquals(".b", simplifyPath("./.b"));
    assertEquals(".metadata/b", simplifyPath(".metadata/b"));
    assertEquals(".metadata/b", simplifyPath("./.metadata/b"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=4 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify9
 Body: {
    assertEquals("/a", simplifyPath("/a/b/.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyDotDot
 Body: {
    assertEquals("..", simplifyPath(".."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify10
 Body: {
    assertEquals("/", simplifyPath("/a/b/../../.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify5
 Body: {
    assertEquals("/a/b", simplifyPath("/a//b"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testMultipleDotFilenames
 Body: {
    assertEquals("..a", simplifyPath("..a"));
    assertEquals("/..a", simplifyPath("/..a"));
    assertEquals("/..a/..b", simplifyPath("/..a/..b"));
    assertEquals("/.....a/..b", simplifyPath("/.....a/..b"));
    assertEquals("..../....", simplifyPath("..../...."));
    assertEquals("..a../..b..", simplifyPath("..a../..b.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=6 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testRfc2396Normal
 Body: {
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/./g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/g/"));

    assertEquals("/a/b/c/g?y", simplifyPath("/a/b/c/g?y"));
    assertEquals("/a/b/c/g#s", simplifyPath("/a/b/c/g#s"));
    assertEquals("/a/b/c/g?y#s", simplifyPath("/a/b/c/g?y#s"));
    assertEquals("/a/b/c/;x", simplifyPath("/a/b/c/;x"));
    assertEquals("/a/b/c/g;x", simplifyPath("/a/b/c/g;x"));
    assertEquals("/a/b/c/g;x?y#s", simplifyPath("/a/b/c/g;x?y#s"));
    assertEquals("/a/b/c", simplifyPath("/a/b/c/."));
    assertEquals("/a/b/c", simplifyPath("/a/b/c/./"));
    assertEquals("/a/b", simplifyPath("/a/b/c/.."));
    assertEquals("/a/b", simplifyPath("/a/b/c/../"));
    assertEquals("/a/b/g", simplifyPath("/a/b/c/../g"));
    assertEquals("/a", simplifyPath("/a/b/c/../.."));
    assertEquals("/a", simplifyPath("/a/b/c/../../"));
    assertEquals("/a/g", simplifyPath("/a/b/c/../../g"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=17 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify6
 Body: {
    assertEquals("/a/b", simplifyPath("//a//b/"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify11
 Body: {
    assertEquals("/", simplifyPath("//a//b/..////../..//"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyDotDotSlash
 Body: {
    assertEquals("..", simplifyPath("../"));
    assertEquals("..", simplifyPath("a/../.."));
    assertEquals("..", simplifyPath("a/../../"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testMadbotsBug
 Body: {
    assertEquals("../this", simplifyPath("../this"));
    assertEquals("../this/is/ok", simplifyPath("../this/is/ok"));
    assertEquals("../ok", simplifyPath("../this/../ok"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=3 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify3
 Body: {
    assertEquals("/a/b/c/d", simplifyPath("/a/b/c/d"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify2
 Body: {
    assertEquals("x", simplifyPath("x"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify12
 Body: {
    assertEquals("/x", simplifyPath("//a//../x//"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testConsecutiveParentsAfterPresent
 Body: {
    assertEquals("../..", simplifyPath("./../../"));
    assertEquals("../..", simplifyPath("./.././../"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testInitialSlashDotDot
 Body: {
    assertEquals("/c", simplifyPath("/../c"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testRfc3986Normal
 Body: {
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/./g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/g/"));

    assertEquals("/a/b/c/g?y", simplifyPath("/a/b/c/g?y"));
    assertEquals("/a/b/c/g#s", simplifyPath("/a/b/c/g#s"));
    assertEquals("/a/b/c/g?y#s", simplifyPath("/a/b/c/g?y#s"));
    assertEquals("/a/b/c/;x", simplifyPath("/a/b/c/;x"));
    assertEquals("/a/b/c/g;x", simplifyPath("/a/b/c/g;x"));
    assertEquals("/a/b/c/g;x?y#s", simplifyPath("/a/b/c/g;x?y#s"));

    assertEquals("/a/b/c", simplifyPath("/a/b/c/."));
    assertEquals("/a/b/c", simplifyPath("/a/b/c/./"));
    assertEquals("/a/b", simplifyPath("/a/b/c/.."));
    assertEquals("/a/b", simplifyPath("/a/b/c/../"));
    assertEquals("/a/b/g", simplifyPath("/a/b/c/../g"));
    assertEquals("/a", simplifyPath("/a/b/c/../.."));
    assertEquals("/a", simplifyPath("/a/b/c/../../"));
    assertEquals("/a/g", simplifyPath("/a/b/c/../../g"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=17 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify4
 Body: {
    assertEquals("/a/b/c/d", simplifyPath("/a/b/c/d/"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: test716
 Body: {
    assertEquals("b", simplifyPath("./b"));
    assertEquals("b", simplifyPath("./b/."));
    assertEquals("b", simplifyPath("././b/./."));
    assertEquals("b", simplifyPath("././b"));
    assertEquals("a/b", simplifyPath("./a/b"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=5 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testRfc3986Abnormal
 Body: {
    assertEquals("/g", simplifyPath("/a/b/c/../../../g"));
    assertEquals("/g", simplifyPath("/a/b/c/../../../../g"));

    assertEquals("/a/b/c/g.", simplifyPath("/a/b/c/g."));
    assertEquals("/a/b/c/.g", simplifyPath("/a/b/c/.g"));
    assertEquals("/a/b/c/g..", simplifyPath("/a/b/c/g.."));
    assertEquals("/a/b/c/..g", simplifyPath("/a/b/c/..g"));
    assertEquals("/a/b/g", simplifyPath("/a/b/c/./../g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/./g/."));
    assertEquals("/a/b/c/g/h", simplifyPath("/a/b/c/g/./h"));
    assertEquals("/a/b/c/h", simplifyPath("/a/b/c/g/../h"));
    assertEquals("/a/b/c/g;x=1/y", simplifyPath("/a/b/c/g;x=1/./y"));
    assertEquals("/a/b/c/y", simplifyPath("/a/b/c/g;x=1/../y"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=12 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify7
 Body: {
    assertEquals("/", simplifyPath("/.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplify13
 Body: {
    assertEquals("../c", simplifyPath("a/b/../../../c"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: test705
 Body: {
    assertEquals("../b", simplifyPath("x/../../b"));
    assertEquals("b", simplifyPath("x/../b"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testRfc2396Abnormal
 Body: {
    assertEquals("/a/b/c/g.", simplifyPath("/a/b/c/g."));
    assertEquals("/a/b/c/.g", simplifyPath("/a/b/c/.g"));
    assertEquals("/a/b/c/g..", simplifyPath("/a/b/c/g.."));
    assertEquals("/a/b/c/..g", simplifyPath("/a/b/c/..g"));
    assertEquals("/a/b/g", simplifyPath("/a/b/c/./../g"));
    assertEquals("/a/b/c/g", simplifyPath("/a/b/c/./g/."));
    assertEquals("/a/b/c/g/h", simplifyPath("/a/b/c/g/./h"));
    assertEquals("/a/b/c/h", simplifyPath("/a/b/c/g/../h"));
    assertEquals("/a/b/c/g;x=1/y", simplifyPath("/a/b/c/g;x=1/./y"));
    assertEquals("/a/b/c/y", simplifyPath("/a/b/c/g;x=1/../y"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=10 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyWhiteSpace
 Body: {
    assertEquals(" ", simplifyPath(" "));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyRootedDotDots
 Body: {
    assertEquals("/", simplifyPath("/../../.."));
    assertEquals("/", simplifyPath("/../../../"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSlashDot
 Body: {
    assertEquals("/", simplifyPath("/."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyDotDots
 Body: {
    assertEquals("../..", simplifyPath("a/../../.."));
    assertEquals("../../..", simplifyPath("a/../../../.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testSimplifyDot
 Body: {
    assertEquals(".", simplifyPath("."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: FilesSimplifyPathTest
 Method: testInitialSlashDot
 Body: {
    assertEquals("/a", simplifyPath("/./a"));
    assertEquals("/.a", simplifyPath("/.a/a/.."));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: simplifyPath (Alternative Action: simplifyPath=2 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: HashCodeTest
 Method: testPadToLong
 Body: {
    assertEquals(0x1111111111111111L, HashCode.fromLong(0x1111111111111111L).padToLong());
    assertEquals(0x9999999999999999L, HashCode.fromLong(0x9999999999999999L).padToLong());
    assertEquals(0x0000000011111111L, HashCode.fromInt(0x11111111).padToLong());
    assertEquals(0x0000000099999999L, HashCode.fromInt(0x99999999).padToLong());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padToLong (Alternative Action: padToLong=4 ) - Predicate: N/A - Scenario: HashCode.fromLong(0x1111111111111111L) (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testPadToLongWith6Bytes
 Body: {
    assertEquals(0x0000999999999999L, HashCode.fromBytesNoCopy(byteArrayWith9s(6)).padToLong());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padToLong (Alternative Action: padToLong=1 ) - Predicate: N/A - Scenario: HashCode.fromBytesNoCopy(byteArrayWith9s(6)) (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testPadToLongWith4Bytes
 Body: {
    assertEquals(0x0000000099999999L, HashCode.fromBytesNoCopy(byteArrayWith9s(4)).padToLong());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padToLong (Alternative Action: padToLong=1 ) - Predicate: N/A - Scenario: HashCode.fromBytesNoCopy(byteArrayWith9s(4)) (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testPadToLongWith8Bytes
 Body: {
    assertEquals(0x9999999999999999L, HashCode.fromBytesNoCopy(byteArrayWith9s(8)).padToLong());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: padToLong (Alternative Action: padToLong=1 ) - Predicate: N/A - Scenario: HashCode.fromBytesNoCopy(byteArrayWith9s(8)) (Alternative Scenario:  )

Project: guava
 Class: MultisetReadsTester
 Method: testHashCode_size0
 Body: {
    assertEquals("multiset has incorrect hash code", 0, getMultiset().hashCode());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashCode (Alternative Action: hashCode=1 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: MultisetReadsTester
 Method: testHashCode_size1
 Body: {
    assertEquals("multiset has incorrect hash code", 1 ^ e0().hashCode(), getMultiset().hashCode());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashCode (Alternative Action: hashCode=2 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: MultisetReadsTester
 Method: testEntrySet_hashCode_size1
 Body: {
    assertEquals(
        "multiset.entrySet() has incorrect hash code",
        1 ^ e0().hashCode(),
        getMultiset().entrySet().hashCode());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashCode (Alternative Action: hashCode=2 ) - Predicate: N/A - Scenario: getMultiset().entrySet() (Alternative Scenario:  )

Project: guava
 Class: MultisetReadsTester
 Method: testEntrySet_hashCode_size0
 Body: {
    assertEquals(
        "multiset.entrySet() has incorrect hash code", 0, getMultiset().entrySet().hashCode());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: hashCode (Alternative Action: entrySet=1 ) - Predicate: N/A - Scenario: getMultiset().entrySet() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testResolveOwnerClass
 Body: {
    assertEquals(Integer.class, new Owner<Integer>().new Inner<String>() {}.getOwnerType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getOwnerType (Alternative Action: getOwnerType=1 ) - Predicate: N/A - Scenario: new Owner<Integer>().new Inner<String>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testResolveInnerClass
 Body: {
    assertEquals(String.class, new Owner<Integer>().new Inner<String>() {}.getTypeArgument());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getTypeArgument (Alternative Action: getTypeArgument=1 ) - Predicate: N/A - Scenario: new Owner<Integer>().new Inner<String>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testAnonymousClassInsideStaticMethod
 Body: {
    assertNotNull(staticMethodWithAnonymousClass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: staticMethodWithAnonymousClass (Alternative Action: staticMethodWithAnonymousClass=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: TypeTokenResolutionTest
 Method: testInterfaceTypeParameterResolution
 Body: {
    assertEquals(
        String.class,
        TypeToken.of(new TypeToken<ArrayList<String>>() {}.getType())
            .resolveType(List.class.getTypeParameters()[0])
            .getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getType=2 ) - Predicate: N/A - Scenario: TypeToken.of(new TypeToken<ArrayList<String>>() {}.getType())
            .resolveType(List.class.getTypeParameters()[0]) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testStaticContext
 Body: {
    assertEquals(Map.class, mapType().getRawType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getRawType (Alternative Action: getRawType=1 ) - Predicate: N/A - Scenario: mapType() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testAnonymousClassInsideNonStaticMethod
 Body: {
    assertNotNull(
        new Object() {
          Type getType() {
            return new TypeToken<Object>() {}.getType();
          }
        }.getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getType=2 ) - Predicate: N/A - Scenario: new Object() {
          Type getType() {
            return new TypeToken<Object>() {}.getType();
          }
        } (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testLocalClassInsideStaticMethod
 Body: {
    assertNotNull(staticMethodWithLocalClass());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: staticMethodWithLocalClass (Alternative Action: staticMethodWithLocalClass=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: TypeTokenResolutionTest
 Method: testResolveNestedClass
 Body: {
    assertEquals(String.class, new Owner.Nested<String>() {}.getTypeArgument());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getTypeArgument (Alternative Action: getTypeArgument=1 ) - Predicate: N/A - Scenario: new Owner.Nested<String>() {} (Alternative Scenario:  )

Project: guava
 Class: TypeTokenResolutionTest
 Method: testConstructor_typeArgsResolvedFromAncestorClass
 Body: {
    assertEquals(String.class, new StringIntegerFoo() {}.getClassA());
    assertEquals(Integer.class, new StringIntegerFoo() {}.getClassB());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getClassA (Alternative Action: getClassB=1 ) - Predicate: N/A - Scenario: new StringIntegerFoo() {} (Alternative Scenario:  )

Project: guava
 Class: ComparisonChainTest
 Method: testOneEqual
 Body: {
    assertEquals(0, ComparisonChain.start().compare("a", "a").result());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: result (Alternative Action: result=1 ) - Predicate: N/A - Scenario: ComparisonChain.start().compare("a", "a") (Alternative Scenario:  )

Project: guava
 Class: ComparisonChainTest
 Method: testOneEqualUsingComparator
 Body: {
    assertEquals(
        0, ComparisonChain.start().compare("a", "A", String.CASE_INSENSITIVE_ORDER).result());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: result (Alternative Action: result=1 ) - Predicate: N/A - Scenario: ComparisonChain.start().compare("a", "A", String.CASE_INSENSITIVE_ORDER) (Alternative Scenario:  )

Project: guava
 Class: ComparisonChainTest
 Method: testManyEqual
 Body: {
    assertEquals(
        0,
        ComparisonChain.start()
            .compare(1, 1)
            .compare(1L, 1L)
            .compareFalseFirst(true, true)
            .compare(1.0, 1.0)
            .compare(1.0f, 1.0f)
            .compare("a", "a", Ordering.usingToString())
            .result());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: result (Alternative Action: compare=5 ) - Predicate: N/A - Scenario: ComparisonChain.start()
            .compare(1, 1)
            .compare(1L, 1L)
            .compareFalseFirst(true, true)
            .compare(1.0, 1.0)
            .compare(1.0f, 1.0f)
            .compare("a", "a", Ordering.usingToString()) (Alternative Scenario:  )

Project: guava
 Class: ComparisonChainTest
 Method: testDegenerate
 Body: {
    // kinda bogus, but who cares?
    assertEquals(0, ComparisonChain.start().result());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: result (Alternative Action: result=1 ) - Predicate: N/A - Scenario: ComparisonChain.start() (Alternative Scenario:  )

Project: guava
 Class: ComparisonChainTest
 Method: testCompareBooleans
 Body: {
    assertEquals(
        0,
        ComparisonChain.start()
            .compare(true, true)
            .compare(true, Boolean.TRUE)
            .compare(Boolean.TRUE, true)
            .compare(Boolean.TRUE, Boolean.TRUE)
            .result());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: result (Alternative Action: compare=4 ) - Predicate: N/A - Scenario: ComparisonChain.start()
            .compare(true, true)
            .compare(true, Boolean.TRUE)
            .compare(Boolean.TRUE, true)
            .compare(Boolean.TRUE, Boolean.TRUE) (Alternative Scenario:  )

Project: guava
 Class: MultisetsImmutableEntryTest
 Method: testToStringNull
 Body: {
    assertEquals("null", entry(NE, 1).toString());
    assertEquals("null x 2", entry(NE, 2).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: entry=2 ) - Predicate: N/A - Scenario: entry(NE, 1) (Alternative Scenario:  )

Project: guava
 Class: MultisetsImmutableEntryTest
 Method: testToString
 Body: {
    assertEquals("foo", entry("foo", 1).toString());
    assertEquals("bar x 2", entry("bar", 2).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: entry=2 ) - Predicate: N/A - Scenario: entry("foo", 1) (Alternative Scenario:  )

Project: guava
 Class: InetAddressesTest
 Method: testIsUriInetAddress
 Body: {
    assertTrue(InetAddresses.isUriInetAddress("192.168.1.1"));
    assertTrue(InetAddresses.isUriInetAddress("[3ffe:0:0:0:0:0:0:1]"));
    assertTrue(InetAddresses.isUriInetAddress("[::ffff:192.0.2.1]"));

    assertFalse(InetAddresses.isUriInetAddress("[192.168.1.1"));
    assertFalse(InetAddresses.isUriInetAddress("192.168.1.1]"));
    assertFalse(InetAddresses.isUriInetAddress(""));
    assertFalse(InetAddresses.isUriInetAddress("192.168.999.888"));
    assertFalse(InetAddresses.isUriInetAddress("www.google.com"));
    assertFalse(InetAddresses.isUriInetAddress("1:2e"));
    assertFalse(InetAddresses.isUriInetAddress("[3ffe:0:0:0:0:0:0:1"));
    assertFalse(InetAddresses.isUriInetAddress("3ffe:0:0:0:0:0:0:1]"));
    assertFalse(InetAddresses.isUriInetAddress("3ffe:0:0:0:0:0:0:1"));
    assertFalse(InetAddresses.isUriInetAddress("::ffff:192.0.2.1"));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isUriInetAddress (Alternative Action: isUriInetAddress=13 ) - Predicate: N/A - Scenario: InetAddresses (Alternative Scenario:  )

Project: guava
 Class: ByteSourceTest
 Method: testSize
 Body: {
    assertEquals(bytes.length, source.size());
    assertTrue(source.wasStreamOpened() && source.wasStreamClosed());

    // test that we can get the size even if skip() isn't supported
    assertEquals(bytes.length, new TestByteSource(bytes, SKIP_THROWS).size());

    // test that we can get the size even if available() always returns zero
    assertEquals(bytes.length, new TestByteSource(bytes, AVAILABLE_ALWAYS_ZERO).size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=3 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: ByteSourceTest
 Method: testRead_toArray
 Body: {
    assertArrayEquals(bytes, source.read());
    assertTrue(source.wasStreamOpened() && source.wasStreamClosed());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: read (Alternative Action: wasStreamClosed=1 ) - Predicate: N/A - Scenario: source (Alternative Scenario:  )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testCopyOf_stream
 Body: {
    assertThat(ImmutableLongArray.copyOf(LongStream.empty())).isSameAs(ImmutableLongArray.of());
    assertThat(ImmutableLongArray.copyOf(LongStream.of(0, 1, 3)).asList())
        .containsExactly(0L, 1L, 3L)
        .inOrder();
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=2 ) - Predicate: N/A - Scenario: ImmutableLongArray (Alternative Scenario:  )

Project: guava
 Class: ImmutableLongArrayTest
 Method: testCopyOf_array_empty
 Body: {
    /*
     * We don't guarantee the same-as property, so we aren't obligated to test it. However, it's
     * useful in testing - when two things are the same then one can't have bugs the other doesn't.
     */
    assertThat(ImmutableLongArray.copyOf(new long[0])).isSameAs(ImmutableLongArray.of());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: of (Alternative Action: of=1 ) - Predicate: N/A - Scenario: ImmutableLongArray (Alternative Scenario:  )

Project: guava
 Class: CollectionIsEmptyTester
 Method: testIsEmpty_yes
 Body: {
    assertTrue("isEmpty() should return true", collection.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: CollectionIsEmptyTester
 Method: testIsEmpty_no
 Body: {
    assertFalse("isEmpty() should return false", collection.isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: Crc32cHashFunctionTest
 Method: testSomeOtherKnownValues
 Body: {
    assertCrc(0x22620404, "The quick brown fox jumps over the lazy dog".getBytes(UTF_8));
    assertCrc(0xE3069283, "123456789".getBytes(UTF_8));
    assertCrc(0xf3dbd4fe, "1234567890".getBytes(UTF_8));
    assertCrc(0xBFE92A83, "23456789".getBytes(UTF_8));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getBytes (Alternative Action: getBytes=4 ) - Predicate: N/A - Scenario: "The quick brown fox jumps over the lazy dog" (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testLog2Zero
 Body: {
    assertEquals(Double.NEGATIVE_INFINITY, DoubleMath.log2(0.0));
    assertEquals(Double.NEGATIVE_INFINITY, DoubleMath.log2(-0.0));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: log2 (Alternative Action: log2=2 ) - Predicate: N/A - Scenario: DoubleMath (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testMean_intVarargs
 Body: {
    assertEquals(-13.75, DoubleMath.mean(11, -22, 44, -88), 1.0e-10);
    assertEquals(11.0, DoubleMath.mean(11), 1.0e-10);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: mean (Alternative Action: mean=2 ) - Predicate: N/A - Scenario: DoubleMath (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare7
 Body: {
    assertEquals(7, size(TOLERANCE_CANDIDATES));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: DoubleMathTest
 Method: testMean_longVarargs
 Body: {
    assertEquals(-13.75, DoubleMath.mean(11L, -22L, 44L, -88L), 1.0e-10);
    assertEquals(11.0, DoubleMath.mean(11L), 1.0e-10);
  }
 Pattern Name: AllAssertionPattern_1MC - Action: mean (Alternative Action: mean=2 ) - Predicate: N/A - Scenario: DoubleMath (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFactorialTooHigh
 Body: {
    assertEquals(Double.POSITIVE_INFINITY, DoubleMath.factorial(DoubleMath.MAX_FACTORIAL + 1));
    assertEquals(Double.POSITIVE_INFINITY, DoubleMath.factorial(DoubleMath.MAX_FACTORIAL + 20));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: factorial (Alternative Action: factorial=2 ) - Predicate: N/A - Scenario: DoubleMath (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testMin
 Body: {
    assertEquals(LEAST, SignedBytes.min(LEAST));
    assertEquals(GREATEST, SignedBytes.min(GREATEST));
    assertEquals(
        (byte) -128, SignedBytes.min((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: min (Alternative Action: min=3 ) - Predicate: N/A - Scenario: SignedBytes (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testMax
 Body: {
    assertEquals(LEAST, SignedBytes.max(LEAST));
    assertEquals(GREATEST, SignedBytes.max(GREATEST));
    assertEquals(
        (byte) 127, SignedBytes.max((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: max (Alternative Action: max=3 ) - Predicate: N/A - Scenario: SignedBytes (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testJoin
 Body: {
    assertEquals("", SignedBytes.join(",", EMPTY));
    assertEquals("1", SignedBytes.join(",", ARRAY1));
    assertEquals("1,2", SignedBytes.join(",", (byte) 1, (byte) 2));
    assertEquals("123", SignedBytes.join("", (byte) 1, (byte) 2, (byte) 3));
    assertEquals("-128,-1", SignedBytes.join(",", (byte) -128, (byte) -1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: join (Alternative Action: join=5 ) - Predicate: N/A - Scenario: SignedBytes (Alternative Scenario:  )

Project: guava
 Class: ListEqualsTester
 Method: testEquals_otherListWithSameElements
 Body: {
    assertTrue(
        "A List should equal any other List containing the same elements.",
        getList().equals(new ArrayList<E>(getOrderedElements())));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: equals (Alternative Action: getList=1 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemove_occurrences_wrongType
 Body: {
    assertEquals(
        "multiset.remove(wrongType, 1) didn't return 0",
        0,
        getMultiset().remove(WrongType.VALUE, 1));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: remove (Alternative Action: getMultiset=1 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: MultisetRemoveTester
 Method: testRemove_nullAbsent
 Body: {
    assertEquals(0, getMultiset().remove(null, 2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: remove (Alternative Action: getMultiset=1 ) - Predicate: N/A - Scenario: getMultiset() (Alternative Scenario:  )

Project: guava
 Class: ReflectionTest
 Method: testGetPackageName
 Body: {
    assertEquals("java.lang", Reflection.getPackageName(Iterable.class));
    assertEquals("java", Reflection.getPackageName("java.MyType"));
    assertEquals("java.lang", Reflection.getPackageName(Iterable.class.getName()));
    assertEquals("", Reflection.getPackageName("NoPackage"));
    assertEquals("java.util", Reflection.getPackageName(Map.Entry.class));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getPackageName (Alternative Action: getPackageName=5 ) - Predicate: N/A - Scenario: Reflection (Alternative Scenario:  )

Project: guava
 Class: Murmur3Hash128Test
 Method: testInvariants
 Body: {
    HashTestUtils.assertInvariants(murmur3_128());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: murmur3_128 (Alternative Action: murmur3_128=1 ) - Predicate: N/A - Scenario: null

Project: guava
 Class: InvokableTest
 Method: testConstructor_returnType
 Body: {
    assertEquals(Prepender.class, Prepender.constructor().getReturnType().getType());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: getType (Alternative Action: getReturnType=1 ) - Predicate: N/A - Scenario: Prepender.constructor().getReturnType() (Alternative Scenario:  )

Project: guava
 Class: CharStreamsTest
 Method: testToString
 Body: {
    assertEquals(TEXT, CharStreams.toString(new StringReader(TEXT)));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=1 ) - Predicate: N/A - Scenario: CharStreams (Alternative Scenario:  )

Project: guava
 Class: CollectionContainsAllTester
 Method: testContainsAll_self
 Body: {
    assertTrue("containsAll(this) should return true", collection.containsAll(collection));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: containsAll (Alternative Action: containsAll=1 ) - Predicate: N/A - Scenario: collection (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testOfToString
 Body: {
    assertEquals("[yam, bam, jam, ham]", FluentIterable.of("yam", "bam", "jam", "ham").toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: of=1 ) - Predicate: N/A - Scenario: FluentIterable.of("yam", "bam", "jam", "ham") (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testSize1Collection
 Body: {
    assertEquals(1, FluentIterable.from(asList("a")).size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: FluentIterable.from(asList("a")) (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testGet
 Body: {
    assertEquals("a", FluentIterable.from(Lists.newArrayList("a", "b", "c")).get(0));
    assertEquals("b", FluentIterable.from(Lists.newArrayList("a", "b", "c")).get(1));
    assertEquals("c", FluentIterable.from(Lists.newArrayList("a", "b", "c")).get(2));
  }
 Pattern Name: AllAssertionPattern_1MC - Action: get (Alternative Action: newArrayList=3 ) - Predicate: N/A - Scenario: FluentIterable.from(Lists.newArrayList("a", "b", "c")) (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testToString
 Body: {
    assertEquals("[]", FluentIterable.from(Collections.emptyList()).toString());
    assertEquals("[]", FluentIterable.<String>of().toString());

    assertEquals(
        "[yam, bam, jam, ham]", FluentIterable.from(asList("yam", "bam", "jam", "ham")).toString());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: toString (Alternative Action: toString=3 ) - Predicate: N/A - Scenario: FluentIterable.from(Collections.emptyList()) (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testIsEmpty
 Body: {
    assertTrue(FluentIterable.<String>from(Collections.<String>emptyList()).isEmpty());
    assertFalse(FluentIterable.<String>from(Lists.newArrayList("foo")).isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=2 ) - Predicate: N/A - Scenario: FluentIterable.<String>from(Collections.<String>emptyList()) (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testToSet_empty
 Body: {
    assertTrue(fluent().toSet().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: toSet=1 ) - Predicate: N/A - Scenario: fluent().toSet() (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testToList_empty
 Body: {
    assertTrue(fluent().toList().isEmpty());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: fluent().toList() (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testSize0
 Body: {
    assertEquals(0, FluentIterable.<String>of().size());
  }
 Pattern Name: AllAssertionPattern_1MC - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: FluentIterable.<String>of() (Alternative Scenario:  )

