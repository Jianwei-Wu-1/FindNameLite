Project: guava
 Class: LocalCacheTest
 Method: testSetInitialCapacity
 Body: {
    // share capacity over each segment, then round up to nearest power of two

    checkInitialCapacity(1, 0, 1);
    checkInitialCapacity(1, 1, 1);
    checkInitialCapacity(1, 2, 2);
    checkInitialCapacity(1, 3, 4);
    checkInitialCapacity(1, 4, 4);
    checkInitialCapacity(1, 5, 8);
    checkInitialCapacity(1, 6, 8);
    checkInitialCapacity(1, 7, 8);
    checkInitialCapacity(1, 8, 8);

    checkInitialCapacity(2, 0, 1);
    checkInitialCapacity(2, 1, 1);
    checkInitialCapacity(2, 2, 1);
    checkInitialCapacity(2, 3, 2);
    checkInitialCapacity(2, 4, 2);
    checkInitialCapacity(2, 5, 4);
    checkInitialCapacity(2, 6, 4);
    checkInitialCapacity(2, 7, 4);
    checkInitialCapacity(2, 8, 4);

    checkInitialCapacity(4, 0, 1);
    checkInitialCapacity(4, 1, 1);
    checkInitialCapacity(4, 2, 1);
    checkInitialCapacity(4, 3, 1);
    checkInitialCapacity(4, 4, 1);
    checkInitialCapacity(4, 5, 2);
    checkInitialCapacity(4, 6, 2);
    checkInitialCapacity(4, 7, 2);
    checkInitialCapacity(4, 8, 2);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkInitialCapacity (Alternative Action: checkInitialCapacity=27 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: LocalCacheTest
 Method: testSetConcurrencyLevel
 Body: {
    // round up to nearest power of two

    checkConcurrencyLevel(1, 1);
    checkConcurrencyLevel(2, 2);
    checkConcurrencyLevel(3, 4);
    checkConcurrencyLevel(4, 4);
    checkConcurrencyLevel(5, 8);
    checkConcurrencyLevel(6, 8);
    checkConcurrencyLevel(7, 8);
    checkConcurrencyLevel(8, 8);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkConcurrencyLevel (Alternative Action: checkConcurrencyLevel=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingBlockingDequeTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingBlockingDeque.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailOneArgThrowsWrongType
 Body: {
    shouldFail(new FailOneArgThrowsWrongType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoNullableArgsFirstThrowsNPE
 Body: {
    shouldPass(new PassTwoNullableArgsFirstThrowsNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoMixedArgsFirstArgThrowsWrongType
 Body: {
    shouldFail(new FailTwoMixedArgsFirstArgThrowsWrongType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassWithBadSuperclassForPackageProtectedMethod
 Body: {
    shouldFail(new SubclassWithBadSuperclassForProtected(), Visibility.PROTECTED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoNullableArgsSecondThrowsOther
 Body: {
    shouldPass(new PassTwoNullableArgsSecondThrowsOther());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testEmptyEnumDefaultValue
 Body: {
    new EmptyEnumDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new EmptyEnumDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoMixedArgsSecondArgDoesntThrowNPE
 Body: {
    shouldFail(new FailTwoMixedArgsSecondArgDoesntThrowNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testNonGenericTypeTokenDefaultValue
 Body: {
    new NonGenericTypeTokenDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new NonGenericTypeTokenDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoArgsSecondArgDoesntThrowNPE
 Body: {
    shouldFail(new FailTwoArgsSecondArgDoesntThrowNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGenericInterfaceReturnedByGenericMethod
 Body: {
    new GenericInterface2DefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new GenericInterface2DefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGenericTypeResolvedForDefaultValue
 Body: {
    new GenericDefaultValueResolvedToStringChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new GenericDefaultValueResolvedToStringChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGenericTypeTokenDefaultValue
 Body: {
    new GenericTypeTokenDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new GenericTypeTokenDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassOneNullableArgThrowsNPE
 Body: {
    shouldPass(new PassOneNullableArgThrowsNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoMixedArgsSecondArgThrowsWrongType
 Body: {
    shouldFail(new FailTwoMixedArgsSecondArgThrowsWrongType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassThatOverridesBadSuperclassMethod
 Body: {
    shouldPass(new SubclassThatOverridesBadSuperclassMethod());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailOneArgDoesntThrowNpe
 Body: {
    shouldFail(new FailOneArgDoesntThrowNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoMixedArgSecondNullableArgThrowsOther
 Body: {
    shouldPass(new PassTwoMixedArgSecondNullableArgThrowsOther());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGenericInterfaceDefaultValue
 Body: {
    new GenericInterfaceDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new GenericInterfaceDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoArgsFirstArgThrowsWrongType
 Body: {
    shouldFail(new FailTwoArgsFirstArgThrowsWrongType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testNullRejectingInterfaceDefaultValue
 Body: {
    new NullRejectingInterfaceDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new NullRejectingInterfaceDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testStringArrayDefaultValue
 Body: {
    new StringArrayDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new StringArrayDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassWithBadSuperclassForPackagePrivateMethod
 Body: {
    shouldFail(new SubclassWithBadSuperclassForPackagePrivate(), Visibility.PACKAGE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testBridgeMethodIgnored
 Body: {
    new NullPointerTester().testAllPublicInstanceMethods(new StringFoo());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: testAllPublicInstanceMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassThatFailsToThrowForStatic
 Body: {
    shouldFail(SubclassThatFailsToThrowForStatic.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGenericClassDefaultValue
 Body: {
    new GenericClassTypeDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new GenericClassTypeDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testMultipleInterfacesDefaultValue
 Body: {
    new MultipleInterfacesDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new MultipleInterfacesDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoArgsSecondArgThrowsWrongType
 Body: {
    shouldFail(new FailTwoArgsSecondArgThrowsWrongType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoMixedArgsNullableArgThrowsNPE
 Body: {
    shouldPass(new PassTwoMixedArgsNullableArgThrowsNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testCanCreateDefault
 Body: {
    shouldPass(new CanCreateDefault());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testNonGenericClassDefaultValue
 Body: {
    new NonGenericClassTypeDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new NonGenericClassTypeDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testClassThatFailsToThrowForStatic
 Body: {
    shouldFail(ClassThatFailsToThrowForStatic.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testDefaultValues
 Body: {
    new AllDefaultValuesChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new AllDefaultValuesChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testEqualsMethod
 Body: {
    shouldPass(new OverridesEquals());
    shouldFail(new DoesNotOverrideEquals());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testGoodClass
 Body: {
    shouldPass(new PassObject());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoNullableArgsSecondThrowsNPE
 Body: {
    shouldPass(new PassTwoNullableArgsSecondThrowsNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testCannotCreateDefault
 Body: {
    shouldFail(new CannotCreateDefault());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoArgsFirstArgDoesntThrowNPE
 Body: {
    shouldFail(new FailTwoArgsFirstArgDoesntThrowNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testFailTwoMixedArgsFirstArgDoesntThrowNPE
 Body: {
    shouldFail(new FailTwoMixedArgsFirstArgDoesntThrowNPE());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testObjectArrayDefaultValue
 Body: {
    new ObjectArrayDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new ObjectArrayDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassWithBadSuperclass
 Body: {
    shouldFail(new SubclassWithBadSuperclass());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testDefaultValueResolvedForPackagePrivateMethod
 Body: {
    new DefaultValueForPackagePrivateMethodResolvedToStringChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new DefaultValueForPackagePrivateMethodResolvedToStringChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassThatTriesToOverrideBadStaticMethod
 Body: {
    shouldFail(SubclassThatTriesToOverrideBadStaticMethod.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testConverterDefaultValue
 Body: {
    new ConverterDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new ConverterDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testIntArrayDefaultValue
 Body: {
    new IntArrayDefaultValueChecker().check();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: check (Alternative Action: check=1 ) - Predicate: N/A - Scenario: new IntArrayDefaultValueChecker() (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoNullableArgsNeitherThrowsAnything
 Body: {
    shouldPass(new PassTwoNullableArgsNeitherThrowsAnything());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testPassTwoNullableArgsFirstThrowsOther
 Body: {
    shouldPass(new PassTwoNullableArgsFirstThrowsOther());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldPass (Alternative Action: shouldPass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: NullPointerTesterTest
 Method: testSubclassOverridesTheWrongMethod
 Body: {
    shouldFail(new SubclassOverridesTheWrongMethod());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: shouldFail (Alternative Action: shouldFail=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FakeTimeLimiterTest
 Method: testRunWithTimeout_returnsWithoutException
 Body: {
    timeLimiter.runWithTimeout(Runnables.doNothing(), DELAY_MS, TimeUnit.MILLISECONDS);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runWithTimeout (Alternative Action: doNothing=1 ) - Predicate: N/A - Scenario: timeLimiter (Alternative Scenario:  )

Project: guava
 Class: ForwardingNavigableSetTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            NavigableSet.class,
            new Function<NavigableSet, NavigableSet>() {
              @Override
              public NavigableSet apply(NavigableSet delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ListListIteratorTester
 Method: testListIterator_atSize
 Body: {
    getList().listIterator(getNumElements());
    // TODO: run the iterator through ListIteratorTester
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: listIterator (Alternative Action: getList=1 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: ListListIteratorTester
 Method: testListIterator_fullyModifiable
 Body: {
    runListIteratorTest(MODIFIABLE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runListIteratorTest (Alternative Action: runListIteratorTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ListListIteratorTester
 Method: testListIterator_unmodifiable
 Body: {
    runListIteratorTest(UNMODIFIABLE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runListIteratorTest (Alternative Action: runListIteratorTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MoreExecutorsTest
 Method: testListeningExecutorServiceInvokeAllJavadocCodeCompiles
 Body: {
    ListeningExecutorService executor = newDirectExecutorService();
    List<Callable<T>> tasks = ImmutableList.of();
    List<? extends Future<?>> unused = executor.invokeAll(tasks);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: newDirectExecutorService=1 ) - Predicate: N/A - Scenario: executor (Alternative Scenario: executor=1 )

Project: guava
 Class: CollectionIteratorTester
 Method: testIterator_unknownOrderRemoveSupported
 Body: {
    runIteratorTest(MODIFIABLE, IteratorTester.KnownOrder.UNKNOWN_ORDER, getSampleElements());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runIteratorTest (Alternative Action: getSampleElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionIteratorTester
 Method: testIterator_knownOrderRemoveUnsupported
 Body: {
    runIteratorTest(UNMODIFIABLE, IteratorTester.KnownOrder.KNOWN_ORDER, getOrderedElements());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runIteratorTest (Alternative Action: runIteratorTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionIteratorTester
 Method: testIterator_unknownOrderRemoveUnsupported
 Body: {
    runIteratorTest(UNMODIFIABLE, IteratorTester.KnownOrder.UNKNOWN_ORDER, getSampleElements());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runIteratorTest (Alternative Action: getSampleElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionIteratorTester
 Method: testIterator_knownOrderRemoveSupported
 Body: {
    runIteratorTest(MODIFIABLE, IteratorTester.KnownOrder.KNOWN_ORDER, getOrderedElements());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runIteratorTest (Alternative Action: runIteratorTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingListenableFutureTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingListenableFuture.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: ForwardingSetTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Set.class,
            new Function<Set, Set>() {
              @Override
              public Set apply(Set delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: TreeRangeSetTest
 Method: testEmptyEnclosing
 Body: {
    testEnclosing(TreeRangeSet.<Integer>create());
    testEnclosing(TreeRangeSet.<Integer>create().complement());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEnclosing (Alternative Action: testEnclosing=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: TreeRangeSetTest
 Method: testEmptyIntersecting
 Body: {
    testIntersects(TreeRangeSet.<Integer>create());
    testIntersects(TreeRangeSet.<Integer>create().complement());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testIntersects (Alternative Action: testIntersects=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableSortedSet
 Body: {
    doHasAllFauxveridesTest(ImmutableSortedSet.class, ImmutableSet.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableSortedMultiset
 Body: {
    doHasAllFauxveridesTest(ImmutableSortedMultiset.class, ImmutableMultiset.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableListMultimap
 Body: {
    doHasAllFauxveridesTest(ImmutableListMultimap.class, ImmutableMultimap.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableBiMap
 Body: {
    doHasAllFauxveridesTest(ImmutableBiMap.class, ImmutableMap.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableSetMultimap
 Body: {
    doHasAllFauxveridesTest(ImmutableSetMultimap.class, ImmutableMultimap.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FauxveridesTest
 Method: testImmutableSortedMap
 Body: {
    doHasAllFauxveridesTest(ImmutableSortedMap.class, ImmutableMap.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doHasAllFauxveridesTest (Alternative Action: doHasAllFauxveridesTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingSortedMapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            SortedMap.class,
            new Function<SortedMap, SortedMap>() {
              @Override
              public SortedMap apply(SortedMap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingCheckedFutureTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingCheckedFuture.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: ListReplaceAllTester
 Method: testReplaceAll
 Body: {
    getList().replaceAll(e -> samples.e3());
    expectContents(Collections.nCopies(getNumElements(), samples.e3()));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: e3=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapContainsKeyTester
 Method: testContains_nullNotContainedAndUnsupported
 Body: {
    expectNullKeyMissingWhenNullKeysUnsupported("containsKey(null) should return false or throw");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectNullKeyMissingWhenNullKeysUnsupported (Alternative Action: expectNullKeyMissingWhenNullKeysUnsupported=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ArbitraryInstancesTest
 Method: testGet_runnable
 Body: {
    ArbitraryInstances.get(Runnable.class).run();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: run (Alternative Action: get=1 ) - Predicate: N/A - Scenario: ArbitraryInstances.get(Runnable.class) (Alternative Scenario:  )

Project: guava
 Class: ListSetTester
 Method: testSet_null
 Body: {
    doTestSet(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestSet (Alternative Action: doTestSet=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FileBackedOutputStreamTest
 Method: testThreshold_resetOnFinalize
 Body: {
    testThreshold(0, 100, true, true);
    testThreshold(10, 100, true, true);
    testThreshold(100, 100, true, true);
    testThreshold(1000, 100, true, true);
    testThreshold(0, 100, false, true);
    testThreshold(10, 100, false, true);
    testThreshold(100, 100, false, true);
    testThreshold(1000, 100, false, true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testThreshold (Alternative Action: testThreshold=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FileBackedOutputStreamTest
 Method: testThreshold
 Body: {
    testThreshold(0, 100, true, false);
    testThreshold(10, 100, true, false);
    testThreshold(100, 100, true, false);
    testThreshold(1000, 100, true, false);
    testThreshold(0, 100, false, false);
    testThreshold(10, 100, false, false);
    testThreshold(100, 100, false, false);
    testThreshold(1000, 100, false, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testThreshold (Alternative Action: testThreshold=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: InternersTest
 Method: testNullPointerExceptions
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Interners.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: CollectionToStringTester
 Method: testToString_null
 Body: {
    initCollectionWithNullElement();
    testToString_minimal();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingTableTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Table.class,
            new Function<Table, Table>() {
              @Override
              public Table apply(Table delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingNavigableMapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            NavigableMap.class,
            new Function<NavigableMap, NavigableMap>() {
              @Override
              public NavigableMap apply(NavigableMap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ExecutionListTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicInstanceMethods(new ExecutionList());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: testAllPublicInstanceMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ExecutionListTest
 Method: testExceptionsCaught
 Body: {
    list.add(THROWING_RUNNABLE, directExecutor());
    list.execute();
    list.add(THROWING_RUNNABLE, directExecutor());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: add=2 ) - Predicate: N/A - Scenario: list (Alternative Scenario:  )

Project: guava
 Class: LineBufferTest
 Method: testProcess
 Body: {
    bufferHelper("");
    bufferHelper("\n", "\n");
    bufferHelper("\r\n", "\r\n");
    bufferHelper("\n\r", "\n", "\r");
    bufferHelper("\r", "\r");
    bufferHelper("\n\n", "\n", "\n");
    bufferHelper("\r\n\r\n", "\r\n", "\r\n");
    bufferHelper("\r\r", "\r", "\r");
    bufferHelper("\ra\r\n\n\r\r", "\r", "a\r\n", "\n", "\r", "\r");
    bufferHelper("no newlines at all", "no newlines at all");
    bufferHelper("two lines\nbut no newline at end", "two lines\n", "but no newline at end");
    bufferHelper(
        "\nempty first line\nno newline at end", "\n", "empty first line\n", "no newline at end");
    bufferHelper("three\rlines\rno newline at end", "three\r", "lines\r", "no newline at end");
    bufferHelper("mixed\nline\rendings\r\n", "mixed\n", "line\r", "endings\r\n");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: bufferHelper (Alternative Action: bufferHelper=14 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testHigherKey
 Body: {
    create().higherKey("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: higherKey (Alternative Action: higherKey=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testHigherEntry
 Body: {
    create().higherEntry("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: higherEntry (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testFloorEntry
 Body: {
    create().floorEntry("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: floorEntry (Alternative Action: floorEntry=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testContainsValue
 Body: {
    create().containsValue(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsValue (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testSize
 Body: {
    create().size();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testContainsKey
 Body: {
    create().containsKey(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsKey (Alternative Action: containsKey=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testToString
 Body: {
    create().toString();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: toString (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testLowerKey
 Body: {
    create().lowerKey("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: lowerKey (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testFloorKey
 Body: {
    create().floorKey("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: floorKey (Alternative Action: floorKey=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testIsEmpty
 Body: {
    create().isEmpty();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testCeilingKey
 Body: {
    create().ceilingKey("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: ceilingKey (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testLastEntry
 Body: {
    create().lastEntry();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: lastEntry (Alternative Action: lastEntry=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testClear
 Body: {
    create().clear();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: clear (Alternative Action: clear=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testHashCode
 Body: {
    create().hashCode();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: hashCode (Alternative Action: hashCode=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testGet
 Body: {
    create().get(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testComparator
 Body: {
    create().comparator();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: comparator (Alternative Action: comparator=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testLowerEntry
 Body: {
    create().lowerEntry("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: lowerEntry (Alternative Action: lowerEntry=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testPollFirstEntry
 Body: {
    create().pollFirstEntry();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: pollFirstEntry (Alternative Action: pollFirstEntry=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testRemove
 Body: {
    create().remove(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: remove (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testFirstEntry
 Body: {
    create().firstEntry();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: firstEntry (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testPollLastEntry
 Body: {
    create().pollLastEntry();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: pollLastEntry (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testPut
 Body: {
    create().put(null, null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: put (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedNavigableMapTest
 Method: testCeilingEntry
 Body: {
    create().ceilingEntry("a");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: ceilingEntry (Alternative Action: ceilingEntry=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: ConcurrentTests
 Method: testCopyOf_concurrentlyMutatedList
 Body: {
      runConcurrentlyMutatedTest(WrapWithIterable.NO_WRAP);
    }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runConcurrentlyMutatedTest (Alternative Action: runConcurrentlyMutatedTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentTests
 Method: testCopyOf_concurrentlyMutatedIterable
 Body: {
      runConcurrentlyMutatedTest(WrapWithIterable.WRAP);
    }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runConcurrentlyMutatedTest (Alternative Action: runConcurrentlyMutatedTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptiblesTest
 Method: testSleepNoInterrupt
 Body: {
    sleepSuccessfully(10);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: sleepSuccessfully (Alternative Action: sleepSuccessfully=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: TypeVisitorTest
 Method: testVisitNull
 Body: {
    new BaseTypeVisitor()
        .visit(((ParameterizedType) ArrayList.class.getGenericSuperclass()).getOwnerType());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: visit (Alternative Action: getGenericSuperclass=1 ) - Predicate: N/A - Scenario: new BaseTypeVisitor() (Alternative Scenario:  )

Project: guava
 Class: ImmutableSetTest
 Method: testResizeTable
 Body: {
    verifyTableSize(100, 2, 8);
    verifyTableSize(100, 5, 8);
    verifyTableSize(100, 33, 64);
    verifyTableSize(17, 17, 32);
    verifyTableSize(17, 16, 32);
    verifyTableSize(17, 15, 32);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: verifyTableSize (Alternative Action: verifyTableSize=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ImmutableSetTest
 Method: testCopyOf_threadSafe
 Body: {
    verifyThreadSafe();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: verifyThreadSafe (Alternative Action: verifyThreadSafe=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testSortIndexed
 Body: {
    testSort(new long[] {}, 0, 0, new long[] {});
    testSort(new long[] {2}, 0, 1, new long[] {2});
    testSort(new long[] {2, 1, 0}, 0, 2, new long[] {1, 2, 0});
    testSort(new long[] {2, GREATEST, 1, LEAST}, 1, 4, new long[] {2, LEAST, 1, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(UnsignedLongs.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testSort
 Body: {
    testSort(new long[] {}, new long[] {});
    testSort(new long[] {2}, new long[] {2});
    testSort(new long[] {2, 1, 0}, new long[] {0, 1, 2});
    testSort(new long[] {2, GREATEST, 1, LEAST}, new long[] {LEAST, 1, 2, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new long[] {}, new long[] {});
    testSortDescending(new long[] {1}, new long[] {1});
    testSortDescending(new long[] {1, 2}, new long[] {2, 1});
    testSortDescending(new long[] {1, 3, 1}, new long[] {3, 1, 1});
    testSortDescending(
        new long[] {GREATEST - 1, 1, GREATEST - 2, 2},
        new long[] {GREATEST - 1, GREATEST - 2, 2, 1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new long[] {}, 0, 0, new long[] {});
    testSortDescending(new long[] {1}, 0, 1, new long[] {1});
    testSortDescending(new long[] {1, 2}, 0, 2, new long[] {2, 1});
    testSortDescending(new long[] {1, 3, 1}, 0, 2, new long[] {3, 1, 1});
    testSortDescending(new long[] {1, 3, 1}, 0, 1, new long[] {1, 3, 1});
    testSortDescending(
        new long[] {GREATEST - 1, 1, GREATEST - 2, 2},
        1,
        3,
        new long[] {GREATEST - 1, GREATEST - 2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_disjointPreviouslyNonEmptyUnsupported
 Body: {
    expectThrows(disjoint);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_containsNonNullWithNull
 Body: {
    initCollectionWithNullElement();
    expectReturnsTrue(disjoint);
    expectContents();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_sameElements
 Body: {
    expectReturnsFalse(sameElements);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalse (Alternative Action: expectReturnsFalse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_containsDuplicatesSizeOne
 Body: {
    expectReturnsFalse(containsDuplicates);
    expectContents(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_subsetUnsupported
 Body: {
    expectThrows(nonEmptyProperSubset);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_disjointPreviouslyNonEmpty
 Body: {
    expectReturnsTrue(disjoint);
    expectContents();
    expectMissing(e0(), e1(), e2());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_nullSingletonPreviouslyNonEmpty
 Body: {
    expectReturnsTrue(nullSingleton);
    expectContents();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_nullSingletonPreviouslySeveralWithNull
 Body: {
    initCollectionWithNullElement();
    expectReturnsTrue(nullSingleton);
    expectContents(nullSingleton.toRetain);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_supersetUnsupported
 Body: {
    expectReturnsFalseOrThrows(superset);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalseOrThrows (Alternative Action: expectReturnsFalseOrThrows=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_disjointPreviouslyEmpty
 Body: {
    expectReturnsFalse(disjoint);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalse (Alternative Action: expectReturnsFalse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_disjointPreviouslyEmptyUnsupported
 Body: {
    expectReturnsFalseOrThrows(disjoint);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalseOrThrows (Alternative Action: expectReturnsFalseOrThrows=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_emptyPreviouslyNonEmpty
 Body: {
    expectReturnsTrue(empty);
    expectContents();
    expectMissing(e0(), e1(), e2());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_partialOverlap
 Body: {
    expectReturnsTrue(partialOverlap);
    expectContents(e2());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_subset
 Body: {
    expectReturnsTrue(nonEmptyProperSubset);
    expectContents(nonEmptyProperSubset.toRetain);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_emptyPreviouslyEmptyUnsupported
 Body: {
    expectReturnsFalseOrThrows(empty);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalseOrThrows (Alternative Action: expectReturnsFalseOrThrows=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_emptyPreviouslyNonEmptyUnsupported
 Body: {
    expectThrows(empty);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_sameElementsUnsupported
 Body: {
    expectReturnsFalseOrThrows(sameElements);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalseOrThrows (Alternative Action: expectReturnsFalseOrThrows=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_nullSingletonPreviouslySingletonWithNull
 Body: {
    initCollectionWithNullElement();
    expectReturnsFalse(nullSingleton);
    expectContents(createArrayWithNullElement());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initCollectionWithNullElement (Alternative Action: initCollectionWithNullElement=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_nullSingletonPreviouslyEmpty
 Body: {
    expectReturnsFalse(nullSingleton);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalse (Alternative Action: expectReturnsFalse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_superset
 Body: {
    expectReturnsFalse(superset);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalse (Alternative Action: expectReturnsFalse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_emptyPreviouslyEmpty
 Body: {
    expectReturnsFalse(empty);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectReturnsFalse (Alternative Action: expectReturnsFalse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_partialOverlapUnsupported
 Body: {
    expectThrows(partialOverlap);
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectUnchanged (Alternative Action: expectUnchanged=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionRetainAllTester
 Method: testRetainAll_containsDuplicatesSizeSeveral
 Body: {
    expectReturnsTrue(containsDuplicates);
    expectContents(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingQueueTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Queue.class,
            new Function<Queue, Queue>() {
              @Override
              public Queue apply(Queue delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testCloseNull
 Body: {
    Closeables.close(null, true);
    Closeables.close(null, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: close (Alternative Action: close=2 ) - Predicate: N/A - Scenario: Closeables (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testCloseQuietlyNull_reader
 Body: {
    Closeables.closeQuietly((Reader) null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: closeQuietly (Alternative Action: closeQuietly=1 ) - Predicate: N/A - Scenario: Closeables (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testClose_closeableWithThrownException
 Body: {
    // make sure that the exception is thrown if 'swallowException' is false
    // when the mock does throw an exception.
    setupCloseable(true);
    doClose(mockCloseable, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doClose (Alternative Action: doClose=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testCloseQuietlyNull_inputStream
 Body: {
    Closeables.closeQuietly((InputStream) null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: closeQuietly (Alternative Action: closeQuietly=1 ) - Predicate: N/A - Scenario: Closeables (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testClose_closeableWithEatenException
 Body: {
    // make sure that no exception is thrown if 'swallowException' is true
    // when the mock does throw an exception.
    setupCloseable(true);
    doClose(mockCloseable, true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doClose (Alternative Action: doClose=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CloseablesTest
 Method: testClose_closeableClean
 Body: {
    // make sure that no exception is thrown regardless of value of
    // 'swallowException' when the mock does not throw an exception.
    setupCloseable(false);
    doClose(mockCloseable, false, false);

    setupCloseable(false);
    doClose(mockCloseable, true, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doClose (Alternative Action: doClose=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testReverse
 Body: {
    testReverse(new byte[] {}, new byte[] {});
    testReverse(new byte[] {1}, new byte[] {1});
    testReverse(new byte[] {1, 2}, new byte[] {2, 1});
    testReverse(new byte[] {3, 1, 1}, new byte[] {1, 1, 3});
    testReverse(new byte[] {-1, 1, -2, 2}, new byte[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testReverseIndexed
 Body: {
    testReverse(new byte[] {}, 0, 0, new byte[] {});
    testReverse(new byte[] {1}, 0, 1, new byte[] {1});
    testReverse(new byte[] {1, 2}, 0, 2, new byte[] {2, 1});
    testReverse(new byte[] {3, 1, 1}, 0, 2, new byte[] {1, 3, 1});
    testReverse(new byte[] {3, 1, 1}, 0, 1, new byte[] {3, 1, 1});
    testReverse(new byte[] {-1, 1, -2, 2}, 1, 3, new byte[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BytesTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Bytes.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: UncaughtExceptionHandlersTest
 Method: testExiter
 Body: {
    new Exiter(runtimeMock).uncaughtException(new Thread(), new Exception());
    verify(runtimeMock).exit(1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: exit (Alternative Action: exit=1 ) - Predicate: N/A - Scenario: verify(runtimeMock) (Alternative Scenario:  )

Project: guava
 Class: ElementTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Element.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingCollectionTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Collection.class,
            new Function<Collection, Collection>() {
              @Override
              public Collection apply(Collection delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testRemoveOutOfHeadBoundsSeveral
 Body: {
    expectRemoveZero(sortedMultiset.headMultiset(c.getElement(), OPEN), c);
    expectRemoveZero(sortedMultiset.headMultiset(b.getElement(), CLOSED), c);
    expectRemoveZero(sortedMultiset.headMultiset(b.getElement(), OPEN), c);
    expectRemoveZero(sortedMultiset.headMultiset(b.getElement(), OPEN), b);
    expectRemoveZero(sortedMultiset.headMultiset(a.getElement(), CLOSED), c);
    expectRemoveZero(sortedMultiset.headMultiset(a.getElement(), CLOSED), b);
    expectRemoveZero(sortedMultiset.headMultiset(a.getElement(), OPEN), c);
    expectRemoveZero(sortedMultiset.headMultiset(a.getElement(), OPEN), b);
    expectRemoveZero(sortedMultiset.headMultiset(a.getElement(), OPEN), a);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectRemoveZero (Alternative Action: headMultiset=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSetCountOutOfTailBoundsSeveral
 Body: {
    expectSetCountFailure(sortedMultiset.tailMultiset(a.getElement(), OPEN), a);
    expectSetCountFailure(sortedMultiset.tailMultiset(b.getElement(), CLOSED), a);
    expectSetCountFailure(sortedMultiset.tailMultiset(b.getElement(), OPEN), a);
    expectSetCountFailure(sortedMultiset.tailMultiset(b.getElement(), OPEN), b);
    expectSetCountFailure(sortedMultiset.tailMultiset(c.getElement(), CLOSED), a);
    expectSetCountFailure(sortedMultiset.tailMultiset(c.getElement(), CLOSED), b);
    expectSetCountFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), a);
    expectSetCountFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), b);
    expectSetCountFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), c);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectSetCountFailure (Alternative Action: expectSetCountFailure=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testSetCountOutOfHeadBoundsSeveral
 Body: {
    expectSetCountFailure(sortedMultiset.headMultiset(c.getElement(), OPEN), c);
    expectSetCountFailure(sortedMultiset.headMultiset(b.getElement(), CLOSED), c);
    expectSetCountFailure(sortedMultiset.headMultiset(b.getElement(), OPEN), c);
    expectSetCountFailure(sortedMultiset.headMultiset(b.getElement(), OPEN), b);
    expectSetCountFailure(sortedMultiset.headMultiset(a.getElement(), CLOSED), c);
    expectSetCountFailure(sortedMultiset.headMultiset(a.getElement(), CLOSED), b);
    expectSetCountFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), c);
    expectSetCountFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), b);
    expectSetCountFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), a);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectSetCountFailure (Alternative Action: headMultiset=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailClosedDistinctElements
 Body: {
    testSubMultisetDistinctElements(SubMultisetSpec.TAIL_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetDistinctElements (Alternative Action: testSubMultisetDistinctElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testAddWithConflictingBounds
 Body: {
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(a.getElement(), CLOSED, a.getElement(), OPEN));
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(a.getElement(), OPEN, a.getElement(), OPEN));
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(a.getElement(), OPEN, a.getElement(), CLOSED));
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(b.getElement(), CLOSED, a.getElement(), CLOSED));
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(b.getElement(), CLOSED, a.getElement(), OPEN));
    testEmptyRangeSubMultisetSupportingAdd(
        sortedMultiset.subMultiset(b.getElement(), OPEN, a.getElement(), OPEN));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEmptyRangeSubMultisetSupportingAdd (Alternative Action: getElement=12 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailOpenEntrySet
 Body: {
    testSubMultisetEntrySet(SubMultisetSpec.TAIL_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetEntrySet (Alternative Action: testSubMultisetEntrySet=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailOpenSize
 Body: {
    testSubMultisetSize(SubMultisetSpec.TAIL_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetSize (Alternative Action: testSubMultisetSize=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailClosedSize
 Body: {
    testSubMultisetSize(SubMultisetSpec.TAIL_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetSize (Alternative Action: testSubMultisetSize=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testRemoveOutOfTailBoundsSeveral
 Body: {
    expectRemoveZero(sortedMultiset.tailMultiset(a.getElement(), OPEN), a);
    expectRemoveZero(sortedMultiset.tailMultiset(b.getElement(), CLOSED), a);
    expectRemoveZero(sortedMultiset.tailMultiset(b.getElement(), OPEN), a);
    expectRemoveZero(sortedMultiset.tailMultiset(b.getElement(), OPEN), b);
    expectRemoveZero(sortedMultiset.tailMultiset(c.getElement(), CLOSED), a);
    expectRemoveZero(sortedMultiset.tailMultiset(c.getElement(), CLOSED), b);
    expectRemoveZero(sortedMultiset.tailMultiset(c.getElement(), OPEN), a);
    expectRemoveZero(sortedMultiset.tailMultiset(c.getElement(), OPEN), b);
    expectRemoveZero(sortedMultiset.tailMultiset(c.getElement(), OPEN), c);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectRemoveZero (Alternative Action: getElement=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailClosedEntrySet
 Body: {
    testSubMultisetEntrySet(SubMultisetSpec.TAIL_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetEntrySet (Alternative Action: testSubMultisetEntrySet=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadClosedDistinctElements
 Body: {
    testSubMultisetDistinctElements(SubMultisetSpec.HEAD_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetDistinctElements (Alternative Action: testSubMultisetDistinctElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testConflictingBounds
 Body: {
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(a.getElement(), CLOSED, a.getElement(), OPEN));
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(a.getElement(), OPEN, a.getElement(), OPEN));
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(a.getElement(), OPEN, a.getElement(), CLOSED));
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(b.getElement(), CLOSED, a.getElement(), CLOSED));
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(b.getElement(), CLOSED, a.getElement(), OPEN));
    testEmptyRangeSubMultiset(
        sortedMultiset.subMultiset(b.getElement(), OPEN, a.getElement(), OPEN));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEmptyRangeSubMultiset (Alternative Action: getElement=12 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadOpenEntrySet
 Body: {
    testSubMultisetEntrySet(SubMultisetSpec.HEAD_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetEntrySet (Alternative Action: testSubMultisetEntrySet=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testAddOutOfTailBoundsSeveral
 Body: {
    expectAddFailure(sortedMultiset.tailMultiset(a.getElement(), OPEN), a);
    expectAddFailure(sortedMultiset.tailMultiset(b.getElement(), CLOSED), a);
    expectAddFailure(sortedMultiset.tailMultiset(b.getElement(), OPEN), a);
    expectAddFailure(sortedMultiset.tailMultiset(b.getElement(), OPEN), b);
    expectAddFailure(sortedMultiset.tailMultiset(c.getElement(), CLOSED), a);
    expectAddFailure(sortedMultiset.tailMultiset(c.getElement(), CLOSED), b);
    expectAddFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), a);
    expectAddFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), b);
    expectAddFailure(sortedMultiset.tailMultiset(c.getElement(), OPEN), c);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectAddFailure (Alternative Action: getElement=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadOpenDistinctElements
 Body: {
    testSubMultisetDistinctElements(SubMultisetSpec.HEAD_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetDistinctElements (Alternative Action: testSubMultisetDistinctElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadOpenSize
 Body: {
    testSubMultisetSize(SubMultisetSpec.HEAD_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetSize (Alternative Action: testSubMultisetSize=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testTailOpenDistinctElements
 Body: {
    testSubMultisetDistinctElements(SubMultisetSpec.TAIL_OPEN);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetDistinctElements (Alternative Action: testSubMultisetDistinctElements=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testAddOutOfHeadBoundsSeveral
 Body: {
    expectAddFailure(sortedMultiset.headMultiset(c.getElement(), OPEN), c);
    expectAddFailure(sortedMultiset.headMultiset(b.getElement(), CLOSED), c);
    expectAddFailure(sortedMultiset.headMultiset(b.getElement(), OPEN), c);
    expectAddFailure(sortedMultiset.headMultiset(b.getElement(), OPEN), b);
    expectAddFailure(sortedMultiset.headMultiset(a.getElement(), CLOSED), c);
    expectAddFailure(sortedMultiset.headMultiset(a.getElement(), CLOSED), b);
    expectAddFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), c);
    expectAddFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), b);
    expectAddFailure(sortedMultiset.headMultiset(a.getElement(), OPEN), a);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectAddFailure (Alternative Action: headMultiset=9 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadClosedSize
 Body: {
    testSubMultisetSize(SubMultisetSpec.HEAD_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetSize (Alternative Action: testSubMultisetSize=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetNavigationTester
 Method: testHeadClosedEntrySet
 Body: {
    testSubMultisetEntrySet(SubMultisetSpec.HEAD_CLOSED);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSubMultisetEntrySet (Alternative Action: testSubMultisetEntrySet=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveFromInverseRemovesFromForward
 Body: {
    getMap().inverse().remove(v0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveFromInverseKeySetRemovesFromForward
 Body: {
    getMap().inverse().keySet().remove(v0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveKeyFromKeySetRemovesFromInverse
 Body: {
    getMap().keySet().remove(k0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: k0=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveKeyRemovesFromInverse
 Body: {
    getMap().remove(k0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: k0=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveFromInverseValuesRemovesFromInverse
 Body: {
    getMap().inverse().values().remove(k0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: inverse=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapRemoveTester
 Method: testRemoveFromValuesRemovesFromInverse
 Body: {
    getMap().values().remove(v0());
    expectMissing(e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectMissing (Alternative Action: values=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingListMultimapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            ListMultimap.class,
            new Function<ListMultimap, ListMultimap>() {
              @Override
              public ListMultimap apply(ListMultimap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingDequeTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Deque.class,
            new Function<Deque, Deque>() {
              @Override
              public Deque apply(Deque delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: UnsignedLongTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(UnsignedLong.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: MultimapToStringTester
 Method: testToStringWithNullKey
 Body: {
    initMultimapWithNullKey();
    testToStringMatchesAsMap();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initMultimapWithNullKey (Alternative Action: initMultimapWithNullKey=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultimapToStringTester
 Method: testToStringWithNullValue
 Body: {
    initMultimapWithNullValue();
    testToStringMatchesAsMap();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initMultimapWithNullValue (Alternative Action: initMultimapWithNullValue=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SortedListsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(SortedLists.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: SuppliersTest
 Method: testMemoizeExceptionThrown
 Body: {
    memoizeExceptionThrownTest(new ThrowingSupplier());
    memoizeExceptionThrownTest(new SerializableThrowingSupplier());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: memoizeExceptionThrownTest (Alternative Action: memoizeExceptionThrownTest=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SuppliersTest
 Method: testMemoize_redudantly
 Body: {
    memoize_redudantlyTest(new CountingSupplier());
    memoize_redudantlyTest(new SerializableCountingSupplier());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: memoize_redudantlyTest (Alternative Action: memoize_redudantlyTest=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SuppliersTest
 Method: testMemoize
 Body: {
    memoizeTest(new CountingSupplier());
    memoizeTest(new SerializableCountingSupplier());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: memoizeTest (Alternative Action: memoizeTest=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapPutAllTester
 Method: testPutAll_supportedNonePresent
 Body: {
    putAll(createDisjointCollection());
    expectAdded(e3(), e4());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: putAll=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapPutAllTester
 Method: testPutAll_supportedSomePresent
 Body: {
    putAll(MinimalCollection.of(e3(), e0()));
    expectAdded(e3());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: e3=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapPutAllTester
 Method: testPutAll_nullKeySupported
 Body: {
    putAll(containsNullKey);
    expectAdded(containsNullKey.get(0));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: get=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapPutAllTester
 Method: testPutAll_supportedNothing
 Body: {
    getMap().putAll(emptyMap());
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: putAll=1 ) - Predicate: N/A - Scenario: getMap() (Alternative Scenario:  )

Project: guava
 Class: MapPutAllTester
 Method: testPutAll_nullValueSupported
 Body: {
    putAll(containsNullValue);
    expectAdded(containsNullValue.get(0));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: get=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetBasherTest
 Method: testAddAndRemove_ConcurrentSkipListMap
 Body: {
    testAddAndRemove(new ConcurrentSkipListMap<String, AtomicInteger>());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAddAndRemove (Alternative Action: testAddAndRemove=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetBasherTest
 Method: testAddAndRemove_ConcurrentHashMap
 Body: {
    testAddAndRemove(new ConcurrentHashMap<String, AtomicInteger>());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAddAndRemove (Alternative Action: testAddAndRemove=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testTryParseNaN
 Body: {
    checkTryParse("NaN");
    checkTryParse("+NaN");
    checkTryParse("-NaN");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkTryParse (Alternative Action: checkTryParse=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testReverse
 Body: {
    testReverse(new float[] {}, new float[] {});
    testReverse(new float[] {1}, new float[] {1});
    testReverse(new float[] {1, 2}, new float[] {2, 1});
    testReverse(new float[] {3, 1, 1}, new float[] {1, 1, 3});
    testReverse(new float[] {-1, 1, -2, 2}, new float[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Floats.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new float[] {}, 0, 0, new float[] {});
    testSortDescending(new float[] {1}, 0, 1, new float[] {1});
    testSortDescending(new float[] {1, 2}, 0, 2, new float[] {2, 1});
    testSortDescending(new float[] {1, 3, 1}, 0, 2, new float[] {3, 1, 1});
    testSortDescending(new float[] {1, 3, 1}, 0, 1, new float[] {1, 3, 1});
    testSortDescending(new float[] {-1, -2, 1, 2}, 1, 3, new float[] {-1, 1, -2, 2});
    testSortDescending(
        new float[] {-1, 1, Float.NaN, -2, 2}, 1, 4, new float[] {-1, Float.NaN, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testTryParseInfinity
 Body: {
    checkTryParse(Float.POSITIVE_INFINITY, "Infinity");
    checkTryParse(Float.POSITIVE_INFINITY, "+Infinity");
    checkTryParse(Float.NEGATIVE_INFINITY, "-Infinity");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkTryParse (Alternative Action: checkTryParse=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new float[] {}, new float[] {});
    testSortDescending(new float[] {1}, new float[] {1});
    testSortDescending(new float[] {1, 2}, new float[] {2, 1});
    testSortDescending(new float[] {1, 3, 1}, new float[] {3, 1, 1});
    testSortDescending(new float[] {-1, 1, -2, 2}, new float[] {2, 1, -1, -2});
    testSortDescending(
        new float[] {-1, 1, Float.NaN, -2, -0, 0, 2}, new float[] {Float.NaN, 2, 1, 0, -0, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FloatsTest
 Method: testReverseIndexed
 Body: {
    testReverse(new float[] {}, 0, 0, new float[] {});
    testReverse(new float[] {1}, 0, 1, new float[] {1});
    testReverse(new float[] {1, 2}, 0, 2, new float[] {2, 1});
    testReverse(new float[] {3, 1, 1}, 0, 2, new float[] {1, 3, 1});
    testReverse(new float[] {3, 1, 1}, 0, 1, new float[] {3, 1, 1});
    testReverse(new float[] {-1, 1, -2, 2}, 1, 3, new float[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testStreamParameterSkippedForNullTesting
 Body: {
    tester.testNulls(WithStreamParameter.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoNullCheckNeededDespitNotInstantiable
 Body: {
    tester.doTestNulls(NoNullCheckNeededDespitNotInstantiable.class, Visibility.PACKAGE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNulls (Alternative Action: doTestNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEqualsAndSerializableOnReturnValues_good
 Body: {
    tester
        .forAllPublicStaticMethods(GoodEqualsAndSerialiableFactory.class)
        .testEqualsAndSerializable();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEqualsAndSerializable (Alternative Action: testEqualsAndSerializable=1 ) - Predicate: N/A - Scenario: tester
        .forAllPublicStaticMethods(GoodEqualsAndSerialiableFactory.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNulls_interface
 Body: {
    tester.testNulls(AnInterface.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testGoodEquals
 Body: {
    tester.testEquals(GoodEquals.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated
 Body: {
    tester
        .forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class)
        .testEqualsAndSerializable();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEqualsAndSerializable (Alternative Action: testEqualsAndSerializable=1 ) - Predicate: N/A - Scenario: tester
        .forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEquals_abstractClass
 Body: {
    tester.testEquals(AnAbstractClass.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNullsOnReturnValues_good
 Body: {
    tester.forAllPublicStaticMethods(GoodNullsFactory.class).testNulls();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(GoodNullsFactory.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNulls_parameterOptionalNotInstantiable
 Body: {
    tester.testNulls(ConstructorParameterWithOptionalNotInstantiable.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testSerializableOnReturnValues_good
 Body: {
    tester.forAllPublicStaticMethods(GoodSerializableFactory.class).testSerializable();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSerializable (Alternative Action: testSerializable=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(GoodSerializableFactory.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEquals_interface
 Body: {
    tester.testEquals(AnInterface.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoNullChecksOnAnnotation
 Body: {
    tester.testNulls(MyAnnotation.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testGoodReferentialEqualityComparison
 Body: {
    tester.testEquals(UsesEnum.class);
    tester.testEquals(UsesReferentialEquality.class);
    tester.testEquals(SameListInstance.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=3 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNullsForReturnValues_factoryReturnsNullAndAnnotated
 Body: {
    tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class).testNulls();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEqualsOnReturnValues_good
 Body: {
    tester.forAllPublicStaticMethods(GoodEqualsFactory.class).testEquals();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: forAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(GoodEqualsFactory.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testGoodNulls
 Body: {
    tester.testNulls(GoodNulls.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNulls_abstractClass
 Body: {
    tester.testNulls(AnAbstractClass.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoNullChecksOnInterface
 Body: {
    tester.testNulls(Runnable.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEquals_enum
 Body: {
    tester.testEquals(OneConstantEnum.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoEqualsChecksOnEnum
 Body: {
    tester.testEquals(OneConstantEnum.class);
    tester.testEquals(NoConstantEnum.class);
    tester.testEquals(TimeUnit.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=3 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testSerializableForReturnValues_factoryReturnsNullAndAnnotated
 Body: {
    tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class).testSerializable();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSerializable (Alternative Action: testSerializable=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class) (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoEqualsChecksOnInterface
 Body: {
    tester.testEquals(Runnable.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNoEqualsChecksOnAnnotation
 Body: {
    tester.testEquals(MyAnnotation.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: testEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testNulls_enum
 Body: {
    tester.testNulls(OneConstantEnum.class);
    tester.testNulls(NoConstantEnum.class);
    tester.testNulls(TimeUnit.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=3 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ClassSanityTesterTest
 Method: testEqualsForReturnValues_factoryReturnsNullAndAnnotated
 Body: {
    tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class).testEquals();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: forAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: tester.forAllPublicStaticMethods(FactoryThatReturnsNullAndAnnotated.class) (Alternative Scenario:  )

Project: guava
 Class: MultimapBuilderTest
 Method: testGenerics
 Body: {
    ListMultimap<String, Integer> a = MultimapBuilder.hashKeys().arrayListValues().build();
    SortedSetMultimap<String, Integer> b = MultimapBuilder.linkedHashKeys().treeSetValues().build();
    SetMultimap<String, Integer> c =
        MultimapBuilder.treeKeys(String.CASE_INSENSITIVE_ORDER).hashSetValues().build();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: build=3 ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: MultimapBuilderTest
 Method: testGenerics_gwtCompatible
 Body: {
    ListMultimap<String, Integer> a =
        MultimapBuilder.hashKeys().arrayListValues().<String, Integer>build();
    SortedSetMultimap<String, Integer> b =
        MultimapBuilder.linkedHashKeys().treeSetValues().<String, Integer>build();
    SetMultimap<String, Integer> c =
        MultimapBuilder.treeKeys(String.CASE_INSENSITIVE_ORDER)
            .hashSetValues()
            .<String, Integer>build();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: build=3 ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: ClassPathTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(ClassPath.class);
    new NullPointerTester()
        .testAllPublicInstanceMethods(ClassPath.from(getClass().getClassLoader()));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: getClass=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingSetMultimapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            SetMultimap.class,
            new Function<SetMultimap, SetMultimap>() {
              @Override
              public SetMultimap apply(SetMultimap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_intStream
 Body: {
    SpliteratorTester.of(
            () -> Streams.mapWithIndex(IntStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator())
        .expect("0:0", "1:1", "2:2");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expect (Alternative Action: of=2 ) - Predicate: N/A - Scenario: SpliteratorTester.of(
            () -> Streams.mapWithIndex(IntStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator()) (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_doubleStream
 Body: {
    SpliteratorTester.of(
            () ->
                Streams.mapWithIndex(DoubleStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator())
        .expect("0.0:0", "1.0:1", "2.0:2");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expect (Alternative Action: of=2 ) - Predicate: N/A - Scenario: SpliteratorTester.of(
            () ->
                Streams.mapWithIndex(DoubleStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator()) (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_longStream
 Body: {
    SpliteratorTester.of(
            () -> Streams.mapWithIndex(LongStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator())
        .expect("0:0", "1:1", "2:2");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expect (Alternative Action: of=2 ) - Predicate: N/A - Scenario: SpliteratorTester.of(
            () -> Streams.mapWithIndex(LongStream.of(0, 1, 2), (x, i) -> x + ":" + i).spliterator()) (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_arrayListSource
 Body: {
    testMapWithIndex(elems -> new ArrayList<>(elems).stream());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testMapWithIndex (Alternative Action: testMapWithIndex=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_linkedHashSetSource
 Body: {
    testMapWithIndex(elems -> new LinkedHashSet<>(elems).stream());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testMapWithIndex (Alternative Action: testMapWithIndex=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testMapWithIndex_unsizedSource
 Body: {
    testMapWithIndex(
        elems -> Stream.of((Object) null).flatMap(unused -> ImmutableList.copyOf(elems).stream()));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testMapWithIndex (Alternative Action: flatMap=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: StreamsTest
 Method: testForEachPair_oneEmpty
 Body: {
    Streams.forEachPair(Stream.of("a"), Stream.empty(), (a, b) -> fail());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: forEachPair (Alternative Action: fail=1 ) - Predicate: N/A - Scenario: Streams (Alternative Scenario:  )

Project: guava
 Class: FuturesTest
 Method: testAllAsList_extensive
 Body: {
    runExtensiveMergerTest(Merger.allMerger);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runExtensiveMergerTest (Alternative Action: runExtensiveMergerTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FuturesTest
 Method: testSuccessfulAsList_extensive
 Body: {
    runExtensiveMergerTest(Merger.successMerger);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runExtensiveMergerTest (Alternative Action: runExtensiveMergerTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HashBasedTableTest
 Method: testNullPointerStatic
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(HashBasedTable.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Booleans.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testReverseIndexed
 Body: {
    testReverse(new boolean[] {}, 0, 0, new boolean[] {});
    testReverse(new boolean[] {true}, 0, 1, new boolean[] {true});
    testReverse(new boolean[] {false, true}, 0, 2, new boolean[] {true, false});
    testReverse(new boolean[] {true, false, false}, 0, 2, new boolean[] {false, true, false});
    testReverse(new boolean[] {true, false, false}, 0, 1, new boolean[] {true, false, false});
    testReverse(
        new boolean[] {true, true, false, false}, 1, 3, new boolean[] {true, false, true, false});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BooleansTest
 Method: testReverse
 Body: {
    testReverse(new boolean[] {}, new boolean[] {});
    testReverse(new boolean[] {true}, new boolean[] {true});
    testReverse(new boolean[] {false, true}, new boolean[] {true, false});
    testReverse(new boolean[] {true, false, false}, new boolean[] {false, false, true});
    testReverse(new boolean[] {true, true, false, false}, new boolean[] {false, false, true, true});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: OptionalTest
 Method: testSampleCodeError2
 Body: {
    FluentIterable<? extends Number> numbers = getSomeNumbers();
    Optional<? extends Number> first = numbers.first();
    // Number value = first.or(0.5); // error
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: first=1 ) - Predicate: N/A - Scenario: numbers (Alternative Scenario: numbers=1 )

Project: guava
 Class: OptionalTest
 Method: testSampleCodeFine1
 Body: {
    Optional<Number> optionalInt = Optional.of((Number) 1);
    Number value = optionalInt.or(0.5); // fine
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: or=1 ) - Predicate: N/A - Scenario: optionalInt (Alternative Scenario: optionalInt=1 )

Project: guava
 Class: OptionalTest
 Method: testSampleCodeFine2
 Body: {
    FluentIterable<? extends Number> numbers = getSomeNumbers();

    // Sadly, the following is what users will have to do in some circumstances.

    @SuppressWarnings("unchecked") // safe covariant cast
    Optional<Number> first = (Optional) numbers.first();
    Number value = first.or(0.5); // fine
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: or=1 ) - Predicate: N/A - Scenario: numbers (Alternative Scenario: numbers=1 )

Project: guava
 Class: FinalizableReferenceQueueTest
 Method: testThatFinalizerStops
 Body: {
    weaklyReferenceQueue();
    GcFinalization.awaitClear(queueReference);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: weaklyReferenceQueue (Alternative Action: weaklyReferenceQueue=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingExecutorServiceTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingExecutorService.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: FunctionsTest
 Method: testCompositionWildcard
 Body: {
    Map<String, Integer> mapJapaneseToInteger = Maps.newHashMap();
    Function<String, Integer> japaneseToInteger = Functions.forMap(mapJapaneseToInteger);

    Function<Object, String> numberToSpanish = Functions.constant("Yo no se");

    Function<String, String> japaneseToSpanish =
        Functions.compose(numberToSpanish, japaneseToInteger);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: constant=1 ) - Predicate: N/A - Scenario: japaneseToInteger (Alternative Scenario: japaneseToInteger=1 )

Project: guava
 Class: TypeResolverTest
 Method: testWhere_mapFromBoundedWildcard
 Body: {
    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();
    // TODO(benyu): This should check equality to an expected value, see discussion in cl/98674873
    Type unused =
        new TypeResolver()
            .where(
                new TypeCapture<Map<Integer, T>>() {}.capture(),
                new TypeCapture<Map<? extends Number, ? extends Number>>() {}.capture())
            .resolveType(subtype);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: capture=3 ) - Predicate: N/A - Scenario: subtype (Alternative Scenario: subtype=1 )

Project: guava
 Class: PreconditionsTest
 Method: testCheckPositionIndexes_ok
 Body: {
    Preconditions.checkPositionIndexes(0, 0, 0);
    Preconditions.checkPositionIndexes(0, 0, 1);
    Preconditions.checkPositionIndexes(0, 1, 1);
    Preconditions.checkPositionIndexes(1, 1, 1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositionIndexes (Alternative Action: checkPositionIndexes=4 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckState_simple_success
 Body: {
    Preconditions.checkState(true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkState (Alternative Action: checkState=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckState_simpleMessage_success
 Body: {
    Preconditions.checkState(true, IGNORE_ME);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkState (Alternative Action: checkState=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckState_complexMessage_success
 Body: {
    Preconditions.checkState(true, "%s", IGNORE_ME);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkState (Alternative Action: checkState=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckArgument_complexMessage_success
 Body: {
    Preconditions.checkArgument(true, "%s", IGNORE_ME);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArgument (Alternative Action: checkArgument=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckArgument_simpleMessage_success
 Body: {
    Preconditions.checkArgument(true, IGNORE_ME);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArgument (Alternative Action: checkArgument=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: PreconditionsTest
 Method: testCheckArgument_simple_success
 Body: {
    Preconditions.checkArgument(true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArgument (Alternative Action: checkArgument=1 ) - Predicate: N/A - Scenario: Preconditions (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testReverseIndexed
 Body: {
    testReverse(new short[] {}, 0, 0, new short[] {});
    testReverse(new short[] {1}, 0, 1, new short[] {1});
    testReverse(new short[] {1, 2}, 0, 2, new short[] {2, 1});
    testReverse(new short[] {3, 1, 1}, 0, 2, new short[] {1, 3, 1});
    testReverse(new short[] {3, 1, 1}, 0, 1, new short[] {3, 1, 1});
    testReverse(new short[] {-1, 1, -2, 2}, 1, 3, new short[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testReverse
 Body: {
    testReverse(new short[] {}, new short[] {});
    testReverse(new short[] {1}, new short[] {1});
    testReverse(new short[] {1, 2}, new short[] {2, 1});
    testReverse(new short[] {3, 1, 1}, new short[] {1, 1, 3});
    testReverse(new short[] {-1, 1, -2, 2}, new short[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new short[] {}, new short[] {});
    testSortDescending(new short[] {1}, new short[] {1});
    testSortDescending(new short[] {1, 2}, new short[] {2, 1});
    testSortDescending(new short[] {1, 3, 1}, new short[] {3, 1, 1});
    testSortDescending(new short[] {-1, 1, -2, 2}, new short[] {2, 1, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new short[] {}, 0, 0, new short[] {});
    testSortDescending(new short[] {1}, 0, 1, new short[] {1});
    testSortDescending(new short[] {1, 2}, 0, 2, new short[] {2, 1});
    testSortDescending(new short[] {1, 3, 1}, 0, 2, new short[] {3, 1, 1});
    testSortDescending(new short[] {1, 3, 1}, 0, 1, new short[] {1, 3, 1});
    testSortDescending(new short[] {-1, -2, 1, 2}, 1, 3, new short[] {-1, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ShortsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Shorts.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testTryParseNaN
 Body: {
    checkTryParse("NaN");
    checkTryParse("+NaN");
    checkTryParse("-NaN");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkTryParse (Alternative Action: checkTryParse=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testTryParseInfinity
 Body: {
    checkTryParse(Double.POSITIVE_INFINITY, "Infinity");
    checkTryParse(Double.POSITIVE_INFINITY, "+Infinity");
    checkTryParse(Double.NEGATIVE_INFINITY, "-Infinity");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkTryParse (Alternative Action: checkTryParse=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new double[] {}, 0, 0, new double[] {});
    testSortDescending(new double[] {1}, 0, 1, new double[] {1});
    testSortDescending(new double[] {1, 2}, 0, 2, new double[] {2, 1});
    testSortDescending(new double[] {1, 3, 1}, 0, 2, new double[] {3, 1, 1});
    testSortDescending(new double[] {1, 3, 1}, 0, 1, new double[] {1, 3, 1});
    testSortDescending(new double[] {-1, -2, 1, 2}, 1, 3, new double[] {-1, 1, -2, 2});
    testSortDescending(
        new double[] {-1, 1, Double.NaN, -2, 2}, 1, 4, new double[] {-1, Double.NaN, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testSortDescending
 Body: {
    testSortDescending(new double[] {}, new double[] {});
    testSortDescending(new double[] {1}, new double[] {1});
    testSortDescending(new double[] {1, 2}, new double[] {2, 1});
    testSortDescending(new double[] {1, 3, 1}, new double[] {3, 1, 1});
    testSortDescending(new double[] {-1, 1, -2, 2}, new double[] {2, 1, -1, -2});
    testSortDescending(
        new double[] {-1, 1, Double.NaN, -2, -0, 0, 2},
        new double[] {Double.NaN, 2, 1, 0, -0, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testReverse
 Body: {
    testReverse(new double[] {}, new double[] {});
    testReverse(new double[] {1}, new double[] {1});
    testReverse(new double[] {1, 2}, new double[] {2, 1});
    testReverse(new double[] {3, 1, 1}, new double[] {1, 1, 3});
    testReverse(new double[] {-1, 1, -2, 2}, new double[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testReverseIndexed
 Body: {
    testReverse(new double[] {}, 0, 0, new double[] {});
    testReverse(new double[] {1}, 0, 1, new double[] {1});
    testReverse(new double[] {1, 2}, 0, 2, new double[] {2, 1});
    testReverse(new double[] {3, 1, 1}, 0, 2, new double[] {1, 3, 1});
    testReverse(new double[] {3, 1, 1}, 0, 1, new double[] {3, 1, 1});
    testReverse(new double[] {-1, 1, -2, 2}, 1, 3, new double[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoublesTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Doubles.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: IterablesTest
 Method: testSkip_iterator
 Body: {
    new IteratorTester<Integer>(
        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return skip(newLinkedHashSet(asList(1, 2, 3)), 1).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return skip(newLinkedHashSet(asList(1, 2, 3)), 1).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IterablesTest
 Method: testSkip_iteratorList
 Body: {
    new IteratorTester<Integer>(
        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return skip(newArrayList(1, 2, 3), 1).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return skip(newArrayList(1, 2, 3), 1).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: MultiInputStreamTest
 Method: testJoin
 Body: {
    joinHelper(0);
    joinHelper(1);
    joinHelper(0, 0, 0);
    joinHelper(10, 20);
    joinHelper(10, 0, 20);
    joinHelper(0, 10, 20);
    joinHelper(10, 20, 0);
    joinHelper(10, 20, 1);
    joinHelper(1, 1, 1, 1, 1, 1, 1, 1);
    joinHelper(1, 0, 1, 0, 1, 0, 1, 0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: joinHelper (Alternative Action: joinHelper=10 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapToStringTester
 Method: testToStringWithNullKey
 Body: {
    initMapWithNullKey();
    testToString_formatting();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initMapWithNullKey (Alternative Action: initMapWithNullKey=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapToStringTester
 Method: testToStringWithNullValue
 Body: {
    initMapWithNullValue();
    testToString_formatting();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: initMapWithNullValue (Alternative Action: initMapWithNullValue=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(TypeToken.class);
    new NullPointerTester()
        .setDefault(TypeParameter.class, new TypeParameter<T>() {})
        .testAllPublicInstanceMethods(TypeToken.of(String.class));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: of=1 ) - Predicate: N/A - Scenario: new NullPointerTester()
        .setDefault(TypeParameter.class, new TypeParameter<T>() {}) (Alternative Scenario:  )

Project: guava
 Class: TypeTokenTest
 Method: testStaticLocalClass
 Body: {
    doTestStaticLocalClass();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestStaticLocalClass (Alternative Action: doTestStaticLocalClass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CycleDetectingLockFactoryTest
 Method: testDifferentOrderings_noViolations
 Body: {
    lock3.lock(); // MyOrder, ordinal() == 3
    lock01.lock(); // OtherOrder, ordinal() == 1
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: lock (Alternative Action: lock=2 ) - Predicate: N/A - Scenario: lock3 (Alternative Scenario:  )

Project: guava
 Class: CycleDetectingLockFactoryTest
 Method: testExplicitOrdering_noViolations
 Body: {
    lock1.lock();
    lock3.lock();
    lock3.unlock();
    lock2.lock();
    lock3.lock();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: unlock (Alternative Action: lock=4 ) - Predicate: N/A - Scenario: lock3 (Alternative Scenario:  )

Project: guava
 Class: EnumHashBiMapTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(EnumHashBiMap.class);
    new NullPointerTester().testAllPublicInstanceMethods(EnumHashBiMap.create(Currency.class));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: create=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedQueueTest
 Method: testHoldsLockOnAllOperations
 Body: {
    create().element();
    create().offer("foo");
    create().peek();
    create().poll();
    create().remove();
    create().add("foo");
    create().addAll(ImmutableList.of("foo"));
    create().clear();
    create().contains("foo");
    create().containsAll(ImmutableList.of("foo"));
    create().equals(new ArrayDeque<>(ImmutableList.of("foo")));
    create().hashCode();
    create().isEmpty();
    create().iterator();
    create().remove("foo");
    create().removeAll(ImmutableList.of("foo"));
    create().retainAll(ImmutableList.of("foo"));
    create().size();
    create().toArray();
    create().toArray(new String[] {"foo"});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: create=20 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testWildcardSubtypes
 Body: {
    new WildcardSubtypingTests().testAllDeclarations();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllDeclarations (Alternative Action: testAllDeclarations=1 ) - Predicate: N/A - Scenario: new WildcardSubtypingTests() (Alternative Scenario:  )

Project: guava
 Class: TypeTokenSubtypeTest
 Method: testOwnerTypeSubtypes
 Body: {
    new OwnerTypeSubtypingTests().testAllDeclarations();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllDeclarations (Alternative Action: testAllDeclarations=1 ) - Predicate: N/A - Scenario: new OwnerTypeSubtypingTests() (Alternative Scenario:  )

Project: guava
 Class: BiMapPutTester
 Method: testPutPresentKeyDifferentValue
 Body: {
    getMap().put(k0(), v0());
    getMap().put(k0(), v1());
    // verify that the bimap is changed, and that the old inverse mapping
    // from v1 -> v0 is deleted
    expectContents(Helpers.mapEntry(k0(), v1()));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: k0=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BiMapPutTester
 Method: testInversePut
 Body: {
    getMap().put(k0(), v0());
    getMap().inverse().put(v1(), k1());
    expectAdded(e0(), e1());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectAdded (Alternative Action: getMap=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new char[] {}, 0, 0, new char[] {});
    testSortDescending(new char[] {'1'}, 0, 1, new char[] {'1'});
    testSortDescending(new char[] {'1', '2'}, 0, 2, new char[] {'2', '1'});
    testSortDescending(new char[] {'1', '3', '1'}, 0, 2, new char[] {'3', '1', '1'});
    testSortDescending(new char[] {'1', '3', '1'}, 0, 1, new char[] {'1', '3', '1'});
    testSortDescending(new char[] {'A', '1', 'B', '2'}, 1, 3, new char[] {'A', 'B', '1', '2'});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Chars.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testReverseIndexed
 Body: {
    testReverse(new char[] {}, 0, 0, new char[] {});
    testReverse(new char[] {'1'}, 0, 1, new char[] {'1'});
    testReverse(new char[] {'1', '2'}, 0, 2, new char[] {'2', '1'});
    testReverse(new char[] {'3', '1', '1'}, 0, 2, new char[] {'1', '3', '1'});
    testReverse(new char[] {'3', '1', '1'}, 0, 1, new char[] {'3', '1', '1'});
    testReverse(new char[] {'A', '1', 'B', '2'}, 1, 3, new char[] {'A', 'B', '1', '2'});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new char[] {}, new char[] {});
    testSortDescending(new char[] {'1'}, new char[] {'1'});
    testSortDescending(new char[] {'1', '2'}, new char[] {'2', '1'});
    testSortDescending(new char[] {'1', '3', '1'}, new char[] {'3', '1', '1'});
    testSortDescending(new char[] {'A', '1', 'B', '2'}, new char[] {'B', 'A', '2', '1'});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharsTest
 Method: testReverse
 Body: {
    testReverse(new char[] {}, new char[] {});
    testReverse(new char[] {'1'}, new char[] {'1'});
    testReverse(new char[] {'1', '2'}, new char[] {'2', '1'});
    testReverse(new char[] {'3', '1', '1'}, new char[] {'1', '1', '3'});
    testReverse(new char[] {'A', '1', 'B', '2'}, new char[] {'2', 'B', '1', 'A'});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllEmptyIterableOnPresentKey
 Body: {
    multimap().putAll(k0(), Collections.<V>emptyList());
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: emptyList=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: MultimapPutIterableTester
 Method: testPutAllNullValueSingle_unsupported
 Body: {
    multimap().putAll(k1(), Lists.newArrayList((V) null));
    expectUnchanged();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: putAll (Alternative Action: newArrayList=1 ) - Predicate: N/A - Scenario: multimap() (Alternative Scenario:  )

Project: guava
 Class: FlushablesTest
 Method: testFlush_flushableWithThrownException
 Body: {
    // make sure that the exception is thrown if 'swallowException' is false
    // when the mock does throw an exception on flush.
    setupFlushable(true);
    doFlush(mockFlushable, false, true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: setupFlushable (Alternative Action: setupFlushable=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FlushablesTest
 Method: testFlushQuietly_flushableWithEatenException
 Body: {
    // make sure that no exception is thrown by flushQuietly when the mock does
    // throw an exception on flush.
    setupFlushable(true);
    Flushables.flushQuietly(mockFlushable);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: setupFlushable (Alternative Action: setupFlushable=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FlushablesTest
 Method: testFlush_clean
 Body: {
    // make sure that no exception is thrown regardless of value of
    // 'swallowException' when the mock does not throw an exception.
    setupFlushable(false);
    doFlush(mockFlushable, false, false);

    setupFlushable(false);
    doFlush(mockFlushable, true, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: setupFlushable (Alternative Action: setupFlushable=2 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FlushablesTest
 Method: testFlush_flushableWithEatenException
 Body: {
    // make sure that no exception is thrown if 'swallowException' is true
    // when the mock does throw an exception on flush.
    setupFlushable(true);
    doFlush(mockFlushable, true, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: setupFlushable (Alternative Action: setupFlushable=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32HexStreaming
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testStreamingEncodingWithCasing(base32Hex(), "", "");
    testStreamingEncodingWithCasing(base32Hex(), "f", "CO======");
    testStreamingEncodingWithCasing(base32Hex(), "fo", "CPNG====");
    testStreamingEncodingWithCasing(base32Hex(), "foo", "CPNMU===");
    testStreamingEncodingWithCasing(base32Hex(), "foob", "CPNMUOG=");
    testStreamingEncodingWithCasing(base32Hex(), "fooba", "CPNMUOJ1");
    testStreamingEncodingWithCasing(base32Hex(), "foobar", "CPNMUOJ1E8======");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testStreamingEncodingWithCasing (Alternative Action: testStreamingEncodingWithCasing=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase16Offset
 Body: {
    testEncodesWithOffset(base16(), "foobar", 0, 6, "666F6F626172");
    testEncodesWithOffset(base16(), "foobar", 1, 5, "6F6F626172");
    testEncodesWithOffset(base16(), "foobar", 2, 3, "6F6261");
    testEncodesWithOffset(base16(), "foobar", 3, 1, "62");
    testEncodesWithOffset(base16(), "foobar", 4, 0, "");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodesWithOffset (Alternative Action: base16=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testEncodingWithCasing(base32(), "", "");
    testEncodingWithCasing(base32(), "f", "MY======");
    testEncodingWithCasing(base32(), "fo", "MZXQ====");
    testEncodingWithCasing(base32(), "foo", "MZXW6===");
    testEncodingWithCasing(base32(), "foob", "MZXW6YQ=");
    testEncodingWithCasing(base32(), "fooba", "MZXW6YTB");
    testEncodingWithCasing(base32(), "foobar", "MZXW6YTBOI======");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodingWithCasing (Alternative Action: base32=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase64Streaming
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testStreamingEncodingWithSeparators(base64(), "", "");
    testStreamingEncodingWithSeparators(base64(), "f", "Zg==");
    testStreamingEncodingWithSeparators(base64(), "fo", "Zm8=");
    testStreamingEncodingWithSeparators(base64(), "foo", "Zm9v");
    testStreamingEncodingWithSeparators(base64(), "foob", "Zm9vYg==");
    testStreamingEncodingWithSeparators(base64(), "fooba", "Zm9vYmE=");
    testStreamingEncodingWithSeparators(base64(), "foobar", "Zm9vYmFy");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testStreamingEncodingWithSeparators (Alternative Action: base64=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testSeparatorsExplicitly
 Body: {
    testEncodes(base64().withSeparator("\n", 3), "foobar", "Zm9\nvYm\nFy");
    testEncodes(base64().withSeparator("$", 4), "foobar", "Zm9v$YmFy");
    testEncodes(base32().withSeparator("*", 4), "foobar", "MZXW*6YTB*OI==*====");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodes (Alternative Action: testEncodes=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32Hex
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testEncodingWithCasing(base32Hex(), "", "");
    testEncodingWithCasing(base32Hex(), "f", "CO======");
    testEncodingWithCasing(base32Hex(), "fo", "CPNG====");
    testEncodingWithCasing(base32Hex(), "foo", "CPNMU===");
    testEncodingWithCasing(base32Hex(), "foob", "CPNMUOG=");
    testEncodingWithCasing(base32Hex(), "fooba", "CPNMUOJ1");
    testEncodingWithCasing(base32Hex(), "foobar", "CPNMUOJ1E8======");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodingWithCasing (Alternative Action: base32Hex=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32LenientPadding
 Body: {
    testDecodes(base32(), "MZXW6", "foo");
    testDecodes(base32(), "MZXW6=", "foo");
    testDecodes(base32(), "MZXW6==", "foo");
    testDecodes(base32(), "MZXW6===", "foo"); // proper padding length
    testDecodes(base32(), "MZXW6====", "foo");
    testDecodes(base32(), "MZXW6=====", "foo");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testDecodes (Alternative Action: base32=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase64
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testEncodingWithSeparators(base64(), "", "");
    testEncodingWithSeparators(base64(), "f", "Zg==");
    testEncodingWithSeparators(base64(), "fo", "Zm8=");
    testEncodingWithSeparators(base64(), "foo", "Zm9v");
    testEncodingWithSeparators(base64(), "foob", "Zm9vYg==");
    testEncodingWithSeparators(base64(), "fooba", "Zm9vYmE=");
    testEncodingWithSeparators(base64(), "foobar", "Zm9vYmFy");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodingWithSeparators (Alternative Action: base64=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32Streaming
 Body: {
    // The following test vectors are specified in RFC 4648 itself
    testStreamingEncodingWithCasing(base32(), "", "");
    testStreamingEncodingWithCasing(base32(), "f", "MY======");
    testStreamingEncodingWithCasing(base32(), "fo", "MZXQ====");
    testStreamingEncodingWithCasing(base32(), "foo", "MZXW6===");
    testStreamingEncodingWithCasing(base32(), "foob", "MZXW6YQ=");
    testStreamingEncodingWithCasing(base32(), "fooba", "MZXW6YTB");
    testStreamingEncodingWithCasing(base32(), "foobar", "MZXW6YTBOI======");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testStreamingEncodingWithCasing (Alternative Action: testStreamingEncodingWithCasing=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase16
 Body: {
    testEncodingWithCasing(base16(), "", "");
    testEncodingWithCasing(base16(), "f", "66");
    testEncodingWithCasing(base16(), "fo", "666F");
    testEncodingWithCasing(base16(), "foo", "666F6F");
    testEncodingWithCasing(base16(), "foob", "666F6F62");
    testEncodingWithCasing(base16(), "fooba", "666F6F6261");
    testEncodingWithCasing(base16(), "foobar", "666F6F626172");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodingWithCasing (Alternative Action: base16=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase64Offset
 Body: {
    testEncodesWithOffset(base64(), "foobar", 0, 6, "Zm9vYmFy");
    testEncodesWithOffset(base64(), "foobar", 1, 5, "b29iYXI=");
    testEncodesWithOffset(base64(), "foobar", 2, 3, "b2Jh");
    testEncodesWithOffset(base64(), "foobar", 3, 1, "Yg==");
    testEncodesWithOffset(base64(), "foobar", 4, 0, "");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodesWithOffset (Alternative Action: base64=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase64LenientPadding
 Body: {
    testDecodes(base64(), "Zg", "f");
    testDecodes(base64(), "Zg=", "f");
    testDecodes(base64(), "Zg==", "f"); // proper padding length
    testDecodes(base64(), "Zg===", "f");
    testDecodes(base64(), "Zg====", "f");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testDecodes (Alternative Action: base64=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32HexLenientPadding
 Body: {
    testDecodes(base32Hex(), "CPNMU", "foo");
    testDecodes(base32Hex(), "CPNMU=", "foo");
    testDecodes(base32Hex(), "CPNMU==", "foo");
    testDecodes(base32Hex(), "CPNMU===", "foo"); // proper padding length
    testDecodes(base32Hex(), "CPNMU====", "foo");
    testDecodes(base32Hex(), "CPNMU=====", "foo");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testDecodes (Alternative Action: base32Hex=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BaseEncodingTest
 Method: testBase32Offset
 Body: {
    testEncodesWithOffset(base32(), "foobar", 0, 6, "MZXW6YTBOI======");
    testEncodesWithOffset(base32(), "foobar", 1, 5, "N5XWEYLS");
    testEncodesWithOffset(base32(), "foobar", 2, 3, "N5RGC===");
    testEncodesWithOffset(base32(), "foobar", 3, 1, "MI======");
    testEncodesWithOffset(base32(), "foobar", 4, 0, "");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodesWithOffset (Alternative Action: base32=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringWellFormed
 Body: {
    // Well-formed inputs.
    checkFromStringCase("google.com", 80, "google.com", 80, false);
    checkFromStringCase("google.com", 80, "google.com", 80, false);
    checkFromStringCase("192.0.2.1", 82, "192.0.2.1", 82, false);
    checkFromStringCase("[2001::1]", 84, "2001::1", 84, false);
    checkFromStringCase("2001::3", 86, "2001::3", 86, false);
    checkFromStringCase("host:", 80, "host", 80, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringParseableNonsense
 Body: {
    // Examples of nonsense that gets through.
    checkFromStringCase("[[:]]", 86, "[:]", 86, false);
    checkFromStringCase("x:y:z", 87, "x:y:z", 87, false);
    checkFromStringCase("", 88, "", 88, false);
    checkFromStringCase(":", 99, "", 99, false);
    checkFromStringCase(":123", -1, "", 123, true);
    checkFromStringCase("\nOMG\t", 89, "\nOMG\t", 89, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringUnparseableNonsense
 Body: {
    // Some nonsense that causes parse failures.
    checkFromStringCase("[goo.gl]", 1, null, 99, false);
    checkFromStringCase("[goo.gl]:80", 1, null, 99, false);
    checkFromStringCase("[", 1, null, 99, false);
    checkFromStringCase("[]:", 1, null, 99, false);
    checkFromStringCase("[]:80", 1, null, 99, false);
    checkFromStringCase("[]bad", 1, null, 99, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringBadPort
 Body: {
    // Out-of-range ports.
    checkFromStringCase("google.com:65536", 1, null, 99, false);
    checkFromStringCase("google.com:9999999999", 1, null, 99, false);
    // Invalid port parts.
    checkFromStringCase("google.com:port", 1, null, 99, false);
    checkFromStringCase("google.com:-25", 1, null, 99, false);
    checkFromStringCase("google.com:+25", 1, null, 99, false);
    checkFromStringCase("google.com:25  ", 1, null, 99, false);
    checkFromStringCase("google.com:25\t", 1, null, 99, false);
    checkFromStringCase("google.com:0x25 ", 1, null, 99, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringBadDefaultPort
 Body: {
    // Well-formed strings with bad default ports.
    checkFromStringCase("gmail.com:81", -1, "gmail.com", 81, true);
    checkFromStringCase("192.0.2.2:83", -1, "192.0.2.2", 83, true);
    checkFromStringCase("[2001::2]:85", -1, "2001::2", 85, true);
    checkFromStringCase("goo.gl:65535", 65536, "goo.gl", 65535, true);
    // No port, bad default.
    checkFromStringCase("google.com", -1, "google.com", -1, false);
    checkFromStringCase("192.0.2.1", 65536, "192.0.2.1", -1, false);
    checkFromStringCase("[2001::1]", -1, "2001::1", -1, false);
    checkFromStringCase("2001::3", 65536, "2001::3", -1, false);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HostAndPortTest
 Method: testFromStringUnusedDefaultPort
 Body: {
    // Default port, but unused.
    checkFromStringCase("gmail.com:81", 77, "gmail.com", 81, true);
    checkFromStringCase("192.0.2.2:83", 77, "192.0.2.2", 83, true);
    checkFromStringCase("[2001::2]:85", 77, "2001::2", 85, true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkFromStringCase (Alternative Action: checkFromStringCase=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MultisetIteratorTester
 Method: testRemovingIteratorKnownOrder
 Body: {
    new IteratorTester<E>(
        4,
        MODIFIABLE,
        getSubjectGenerator().order(Arrays.asList(e0(), e1(), e1(), e2())),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: e1=4 ) - Predicate: N/A - Scenario: new IteratorTester<E>(
        4,
        MODIFIABLE,
        getSubjectGenerator().order(Arrays.asList(e0(), e1(), e1(), e2())),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: MultisetIteratorTester
 Method: testRemovingIteratorUnknownOrder
 Body: {
    new IteratorTester<E>(
        4,
        MODIFIABLE,
        Arrays.asList(e0(), e1(), e1(), e2()),
        IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: e1=4 ) - Predicate: N/A - Scenario: new IteratorTester<E>(
        4,
        MODIFIABLE,
        Arrays.asList(e0(), e1(), e1(), e2()),
        IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: MultisetIteratorTester
 Method: testIteratorKnownOrder
 Body: {
    new IteratorTester<E>(
        4,
        UNMODIFIABLE,
        getSubjectGenerator().order(Arrays.asList(e0(), e1(), e1(), e2())),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: e1=4 ) - Predicate: N/A - Scenario: new IteratorTester<E>(
        4,
        UNMODIFIABLE,
        getSubjectGenerator().order(Arrays.asList(e0(), e1(), e1(), e2())),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: MultisetIteratorTester
 Method: testIteratorUnknownOrder
 Body: {
    new IteratorTester<E>(
        4,
        UNMODIFIABLE,
        Arrays.asList(e0(), e1(), e1(), e2()),
        IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: e1=4 ) - Predicate: N/A - Scenario: new IteratorTester<E>(
        4,
        UNMODIFIABLE,
        Arrays.asList(e0(), e1(), e1(), e2()),
        IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<E> newTargetIterator() {
        return getSubjectGenerator().create(e0(), e1(), e1(), e2()).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testIsEmpty
 Body: {
    create().isEmpty();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testClear
 Body: {
    create().clear();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: clear (Alternative Action: clear=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testHashCode
 Body: {
    create().hashCode();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: hashCode (Alternative Action: hashCode=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testContainsValue
 Body: {
    create().containsValue(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsValue (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testSize
 Body: {
    create().size();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testGet
 Body: {
    create().get(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testRemove
 Body: {
    create().remove(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: remove (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testPut
 Body: {
    create().put(null, null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: put (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testContainsKey
 Body: {
    create().containsKey(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsKey (Alternative Action: containsKey=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedMapTest
 Method: testToString
 Body: {
    create().toString();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: toString (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: EquivalenceTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Equivalence.class);
    new NullPointerTester().testAllPublicInstanceMethods(Equivalence.equals());
    new NullPointerTester().testAllPublicInstanceMethods(Equivalence.identity());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: testAllPublicInstanceMethods=2 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: EquivalenceTest
 Method: testPairwiseEquivalent
 Body: {
    EquivalenceTester.of(Equivalence.equals().<String>pairwise())
        .addEquivalenceGroup(ImmutableList.<String>of())
        .addEquivalenceGroup(ImmutableList.of("a"))
        .addEquivalenceGroup(ImmutableList.of("b"))
        .addEquivalenceGroup(ImmutableList.of("a", "b"), ImmutableList.of("a", "b"))
        .test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: of=6 ) - Predicate: N/A - Scenario: EquivalenceTester.of(Equivalence.equals().<String>pairwise())
        .addEquivalenceGroup(ImmutableList.<String>of())
        .addEquivalenceGroup(ImmutableList.of("a"))
        .addEquivalenceGroup(ImmutableList.of("b"))
        .addEquivalenceGroup(ImmutableList.of("a", "b"), ImmutableList.of("a", "b")) (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testSize
 Body: {
    when(mock.size()).thenReturn(0L);
    forward.size();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: size (Alternative Action: size=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testInvalidate
 Body: {
    forward.invalidate("key");
    verify(mock).invalidate("key");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: invalidate (Alternative Action: invalidate=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testRefresh
 Body: {
    forward.refresh("key");
    verify(mock).refresh("key");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: refresh (Alternative Action: refresh=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testCleanUp
 Body: {
    forward.cleanUp();
    verify(mock).cleanUp();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: cleanUp (Alternative Action: cleanUp=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingLoadingCacheTest
 Method: testInvalidateAll
 Body: {
    forward.invalidateAll();
    verify(mock).invalidateAll();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: invalidateAll (Alternative Action: invalidateAll=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingListeningExecutorServiceTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingListeningExecutorService.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: CreationTests
 Method: testCreation_generic
 Body: {
      List<String> a = ImmutableList.of("a");
      // only verify that there is no compile warning
      ImmutableList<List<String>> unused = ImmutableList.of(a, a);
    }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: of=2 ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: CreationTests
 Method: testToImmutableList
 Body: {
      CollectorTester.of(ImmutableList.<String>toImmutableList())
          .expectCollects(ImmutableList.of("a", "b", "c", "d"), "a", "b", "c", "d");
    }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectCollects (Alternative Action: of=2 ) - Predicate: N/A - Scenario: CollectorTester.of(ImmutableList.<String>toImmutableList()) (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testIsEmpty
 Body: {
    create().isEmpty();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: isEmpty (Alternative Action: isEmpty=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testClear
 Body: {
    create().clear();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: clear (Alternative Action: clear=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testHashCode
 Body: {
    create().hashCode();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: hashCode (Alternative Action: hashCode=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testContainsValue
 Body: {
    create().containsValue(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsValue (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testSize
 Body: {
    create().size();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: size (Alternative Action: size=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testGet
 Body: {
    create().get(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: get (Alternative Action: get=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testRemove
 Body: {
    create().remove(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: remove (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testForcePut
 Body: {
    create().forcePut(null, null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: forcePut (Alternative Action: forcePut=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testPut
 Body: {
    create().put(null, null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: put (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testContainsKey
 Body: {
    create().containsKey(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: containsKey (Alternative Action: containsKey=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: SynchronizedBiMapTest
 Method: testToString
 Body: {
    create().toString();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: toString (Alternative Action: create=1 ) - Predicate: N/A - Scenario: create() (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntegerTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(UnsignedInteger.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: IteratorTesterTest
 Method: testUnknownOrder
 Body: {
    new IteratorTester<Integer>(
        3, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return newArrayList(2, 1).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        3, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.UNKNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return newArrayList(2, 1).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: EventBusTest
 Method: testMissingSubscribe
 Body: {
    bus.register(new Object());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: register (Alternative Action: register=1 ) - Predicate: N/A - Scenario: bus (Alternative Scenario:  )

Project: guava
 Class: VerifyTest
 Method: testVerify_simpleMessage_success
 Body: {
    verify(true, "message");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: verify (Alternative Action: verify=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: VerifyTest
 Method: testVerify_simple_success
 Body: {
    verify(true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: verify (Alternative Action: verify=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: VerifyTest
 Method: testVerify_complexMessage_success
 Body: {
    verify(true, "%s", IGNORE_ME);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: verify (Alternative Action: verify=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testChainingCalls
 Body: {
    tester.testForwarding(
        ChainingCalls.class,
        new Function<ChainingCalls, ChainingCalls>() {
          @Override
          public ChainingCalls apply(ChainingCalls delegate) {
            return new ForwardingChainingCalls(delegate);
          }
        });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testEqualsAndHashCodeForwarded
 Body: {
    tester.includingEquals();
    tester.testForwarding(
        Runnable.class,
        new Function<Runnable, Runnable>() {
          @Override
          public Runnable apply(final Runnable runnable) {
            return new ForwardingRunnable(runnable) {
              @Override
              public boolean equals(Object o) {
                if (o instanceof ForwardingRunnable) {
                  ForwardingRunnable that = (ForwardingRunnable) o;
                  return runnable.equals(that.runnable);
                }
                return false;
              }

              @Override
              public int hashCode() {
                return runnable.hashCode();
              }
            };
          }
        });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: includingEquals (Alternative Action: includingEquals=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario: that=1 )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testGoodForwarder
 Body: {
    tester.testForwarding(
        Arithmetic.class,
        new Function<Arithmetic, Arithmetic>() {
          @Override
          public Arithmetic apply(Arithmetic arithmetic) {
            return new ForwardingArithmetic(arithmetic);
          }
        });
    tester.testForwarding(
        ParameterTypesDifferent.class,
        new Function<ParameterTypesDifferent, ParameterTypesDifferent>() {
          @Override
          public ParameterTypesDifferent apply(ParameterTypesDifferent delegate) {
            return new ParameterTypesDifferentForwarder(delegate);
          }
        });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=2 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testExplicitEqualsAndHashCodeNotDelegatedByDefault
 Body: {
    new ForwardingWrapperTester().testForwarding(Equals.class, NoDelegateToEquals.WRAPPER);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testCovariantReturn
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Sub.class,
            new Function<Sub, Sub>() {
              @Override
              public Sub apply(Sub sub) {
                return new ForwardingSub(sub);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testToStringForwarding
 Body: {
    tester.testForwarding(
        Runnable.class,
        new Function<Runnable, Runnable>() {
          @Override
          public Runnable apply(final Runnable runnable) {
            return new ForwardingRunnable(runnable) {
              @Override
              public String toString() {
                return runnable.toString();
              }
            };
          }
        });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: ForwardingWrapperTesterTest
 Method: testVoidMethodForwarding
 Body: {
    tester.testForwarding(
        Runnable.class,
        new Function<Runnable, Runnable>() {
          @Override
          public Runnable apply(final Runnable runnable) {
            return new ForwardingRunnable(runnable);
          }
        });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new byte[] {}, 0, 0, new byte[] {});
    testSortDescending(new byte[] {1}, 0, 1, new byte[] {1});
    testSortDescending(new byte[] {1, 2}, 0, 2, new byte[] {2, 1});
    testSortDescending(new byte[] {1, 3, 1}, 0, 2, new byte[] {3, 1, 1});
    testSortDescending(new byte[] {1, 3, 1}, 0, 1, new byte[] {1, 3, 1});
    testSortDescending(
        new byte[] {GREATEST - 1, 1, GREATEST - 2, 2},
        1,
        3,
        new byte[] {GREATEST - 1, GREATEST - 2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testSortIndexed
 Body: {
    testSort(new byte[] {}, 0, 0, new byte[] {});
    testSort(new byte[] {2}, 0, 1, new byte[] {2});
    testSort(new byte[] {2, 1, 0}, 0, 2, new byte[] {1, 2, 0});
    testSort(new byte[] {2, GREATEST, 1, LEAST}, 1, 4, new byte[] {2, LEAST, 1, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(UnsignedBytes.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testSort
 Body: {
    testSort(new byte[] {}, new byte[] {});
    testSort(new byte[] {2}, new byte[] {2});
    testSort(new byte[] {2, 1, 0}, new byte[] {0, 1, 2});
    testSort(new byte[] {2, GREATEST, 1, LEAST}, new byte[] {LEAST, 1, 2, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedBytesTest
 Method: testSortDescending
 Body: {
    testSortDescending(new byte[] {}, new byte[] {});
    testSortDescending(new byte[] {1}, new byte[] {1});
    testSortDescending(new byte[] {1, 2}, new byte[] {2, 1});
    testSortDescending(new byte[] {1, 3, 1}, new byte[] {3, 1, 1});
    testSortDescending(
        new byte[] {GREATEST - 1, 1, GREATEST - 2, 2},
        new byte[] {GREATEST - 1, GREATEST - 2, 2, 1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CollectionContainsTester
 Method: testContains_nullNotContainedAndUnsupported
 Body: {
    expectNullMissingWhenNullUnsupported("contains(null) should return false or throw");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectNullMissingWhenNullUnsupported (Alternative Action: expectNullMissingWhenNullUnsupported=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_untimed_interrupted
 Body: {
    runUntimedInterruptsTest(1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runUntimedInterruptsTest (Alternative Action: runUntimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_timed_multiplyInterrupted
 Body: {
    runTimedInterruptsTest(38);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTimedInterruptsTest (Alternative Action: runTimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_untimed_uninterrupted
 Body: {
    runUntimedInterruptsTest(0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runUntimedInterruptsTest (Alternative Action: runUntimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_timed_uninterrupted
 Body: {
    runTimedInterruptsTest(0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTimedInterruptsTest (Alternative Action: runTimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_untimed_multiplyInterrupted
 Body: {
    runUntimedInterruptsTest(38);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runUntimedInterruptsTest (Alternative Action: runUntimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UninterruptibleFutureTest
 Method: testMakeUninterruptible_timed_interrupted
 Body: {
    runTimedInterruptsTest(1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTimedInterruptsTest (Alternative Action: runTimedInterruptsTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HashingTest
 Method: testConsistentHash_ofHashCode
 Body: {
    checkSameResult(HashCode.fromLong(1), 1);
    checkSameResult(HashCode.fromLong(0x9999999999999999L), 0x9999999999999999L);
    checkSameResult(HashCode.fromInt(0x99999999), 0x0000000099999999L);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkSameResult (Alternative Action: checkSameResult=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: EnumBiMapTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(EnumBiMap.class);
    new NullPointerTester()
        .testAllPublicInstanceMethods(
            EnumBiMap.create(ImmutableMap.of(Currency.DOLLAR, Country.CHILE)));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: of=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingSortedMultisetTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            SortedMultiset.class,
            new Function<SortedMultiset, SortedMultiset>() {
              @Override
              public SortedMultiset apply(SortedMultiset delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: TypesTest
 Method: testNewParameterizedType_staticLocalClass
 Body: {
    doTestNewParameterizedType_staticLocalClass();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNewParameterizedType_staticLocalClass (Alternative Action: doTestNewParameterizedType_staticLocalClass=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: TypesTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testStaticMethods(Types.class, Visibility.PACKAGE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testStaticMethods (Alternative Action: testStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingObjectTesterTest
 Method: testSuccessfulForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardToDelegate.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testEmptyArrayToNonEmpty
 Body: {
    checkArrayEquals(new Long[5], ObjectArrays.newArray(new Long[0], 5));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArrayEquals (Alternative Action: checkArrayEquals=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testEmptyArrayToEmpty
 Body: {
    doTestNewArrayEquals(new Object[0], 0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNewArrayEquals (Alternative Action: doTestNewArrayEquals=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testToArrayImpl1
 Body: {
    doTestToArrayImpl1(Lists.<Integer>newArrayList());
    doTestToArrayImpl1(Lists.newArrayList(1));
    doTestToArrayImpl1(Lists.newArrayList(1, null, 3));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestToArrayImpl1 (Alternative Action: newArrayList=3 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testNonEmptyToShorter
 Body: {
    checkArrayEquals(new String[9], ObjectArrays.newArray(new String[10], 9));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArrayEquals (Alternative Action: checkArrayEquals=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testToArrayImpl2
 Body: {
    doTestToArrayImpl2(Lists.<Integer>newArrayList(), new Integer[0], false);
    doTestToArrayImpl2(Lists.<Integer>newArrayList(), new Integer[1], true);

    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[0], false);
    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[1], true);
    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[] {2, 3}, true);

    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[0], false);
    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[2], false);
    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[3], true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestToArrayImpl2 (Alternative Action: newArrayList=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testNonEmptyToSameLength
 Body: {
    doTestNewArrayEquals(new String[10], 10);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNewArrayEquals (Alternative Action: doTestNewArrayEquals=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ObjectArraysTest
 Method: testNonEmptyToLonger
 Body: {
    checkArrayEquals(
        new String[10], ObjectArrays.newArray(new String[] {"a", "b", "c", "d", "e"}, 10));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkArrayEquals (Alternative Action: checkArrayEquals=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ComparatorsTest
 Method: testGreatestCollector
 Body: {
    CollectorTester.of(Comparators.<Integer>greatest(2, Comparator.naturalOrder()))
        .expectCollects(Arrays.asList(6, 5), 1, 2, 3, 4, 5, 6)
        .expectCollects(Arrays.asList(1), 1)
        .expectCollects(Collections.emptyList());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectCollects (Alternative Action: expectCollects=3 ) - Predicate: N/A - Scenario: CollectorTester.of(Comparators.<Integer>greatest(2, Comparator.naturalOrder()))
        .expectCollects(Arrays.asList(6, 5), 1, 2, 3, 4, 5, 6)
        .expectCollects(Arrays.asList(1), 1) (Alternative Scenario:  )

Project: guava
 Class: ComparatorsTest
 Method: testLeastCollector
 Body: {
    CollectorTester.of(Comparators.<Integer>least(2, Comparator.naturalOrder()))
        .expectCollects(Arrays.asList(1, 2), 1, 2, 3, 4, 5, 6)
        .expectCollects(Arrays.asList(1), 1)
        .expectCollects(Collections.emptyList());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectCollects (Alternative Action: expectCollects=3 ) - Predicate: N/A - Scenario: CollectorTester.of(Comparators.<Integer>least(2, Comparator.naturalOrder()))
        .expectCollects(Arrays.asList(1, 2), 1, 2, 3, 4, 5, 6)
        .expectCollects(Arrays.asList(1), 1) (Alternative Scenario:  )

Project: guava
 Class: MultimapsTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Multimaps.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new long[] {}, 0, 0, new long[] {});
    testSortDescending(new long[] {1}, 0, 1, new long[] {1});
    testSortDescending(new long[] {1, 2}, 0, 2, new long[] {2, 1});
    testSortDescending(new long[] {1, 3, 1}, 0, 2, new long[] {3, 1, 1});
    testSortDescending(new long[] {1, 3, 1}, 0, 1, new long[] {1, 3, 1});
    testSortDescending(new long[] {-1, -2, 1, 2}, 1, 3, new long[] {-1, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new long[] {}, new long[] {});
    testSortDescending(new long[] {1}, new long[] {1});
    testSortDescending(new long[] {1, 2}, new long[] {2, 1});
    testSortDescending(new long[] {1, 3, 1}, new long[] {3, 1, 1});
    testSortDescending(new long[] {-1, 1, -2, 2}, new long[] {2, 1, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testReverse
 Body: {
    testReverse(new long[] {}, new long[] {});
    testReverse(new long[] {1}, new long[] {1});
    testReverse(new long[] {1, 2}, new long[] {2, 1});
    testReverse(new long[] {3, 1, 1}, new long[] {1, 1, 3});
    testReverse(new long[] {-1, 1, -2, 2}, new long[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Longs.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: LongsTest
 Method: testReverseIndexed
 Body: {
    testReverse(new long[] {}, 0, 0, new long[] {});
    testReverse(new long[] {1}, 0, 1, new long[] {1});
    testReverse(new long[] {1, 2}, 0, 2, new long[] {2, 1});
    testReverse(new long[] {3, 1, 1}, 0, 2, new long[] {1, 3, 1});
    testReverse(new long[] {3, 1, 1}, 0, 1, new long[] {3, 1, 1});
    testReverse(new long[] {-1, 1, -2, 2}, 1, 3, new long[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: EqualsTesterTest
 Method: testTestEqualsEqualsObjects
 Body: {
    equalsTester.addEqualityGroup(reference, equalObject1, equalObject2);
    equalsTester.testEquals();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: addEqualityGroup (Alternative Action: addEqualityGroup=1 ) - Predicate: N/A - Scenario: equalsTester (Alternative Scenario:  )

Project: guava
 Class: EqualsTesterTest
 Method: testTestEqualsEmptyLists
 Body: {
    equalsTester.addEqualityGroup(reference);
    equalsTester.testEquals();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: addEqualityGroup (Alternative Action: addEqualityGroup=1 ) - Predicate: N/A - Scenario: equalsTester (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testNoMatches
 Body: {
    doTestNoMatches(CharMatcher.none(), "blah");
    doTestNoMatches(is('a'), "bcde");
    doTestNoMatches(isNot('a'), "aaaa");
    doTestNoMatches(anyOf(""), "abcd");
    doTestNoMatches(anyOf("x"), "abcd");
    doTestNoMatches(anyOf("xy"), "abcd");
    doTestNoMatches(anyOf("CharMatcher"), "zxqy");
    doTestNoMatches(noneOf("CharMatcher"), "ChMa");
    doTestNoMatches(inRange('p', 'x'), "mom");
    doTestNoMatches(forPredicate(Predicates.equalTo('c')), "abe");
    doTestNoMatches(inRange('A', 'Z').and(inRange('F', 'K').negate()), "F1a");
    doTestNoMatches(CharMatcher.digit(), "\tAz()");
    doTestNoMatches(CharMatcher.javaDigit(), "\tAz()");
    doTestNoMatches(CharMatcher.digit().and(CharMatcher.ascii()), "\tAz()");
    doTestNoMatches(CharMatcher.singleWidth(), "\u05bf\u3000");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNoMatches (Alternative Action: doTestNoMatches=15 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testAllMatches
 Body: {
    doTestAllMatches(CharMatcher.any(), "blah");
    doTestAllMatches(isNot('a'), "bcde");
    doTestAllMatches(is('a'), "aaaa");
    doTestAllMatches(noneOf("CharMatcher"), "zxqy");
    doTestAllMatches(anyOf("x"), "xxxx");
    doTestAllMatches(anyOf("xy"), "xyyx");
    doTestAllMatches(anyOf("CharMatcher"), "ChMa");
    doTestAllMatches(inRange('m', 'p'), "mom");
    doTestAllMatches(forPredicate(Predicates.equalTo('c')), "ccc");
    doTestAllMatches(CharMatcher.digit(), "0123456789\u0ED0\u1B59");
    doTestAllMatches(CharMatcher.javaDigit(), "0123456789");
    doTestAllMatches(CharMatcher.digit().and(CharMatcher.ascii()), "0123456789");
    doTestAllMatches(CharMatcher.singleWidth(), "\t0123ABCdef~\u00A0\u2111");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestAllMatches (Alternative Action: doTestAllMatches=13 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testTrimAndCollapse
 Body: {
    // collapsing groups of '-' into '_' or '-'
    doTestTrimAndCollapse("", "");
    doTestTrimAndCollapse("x", "x");
    doTestTrimAndCollapse("-", "");
    doTestTrimAndCollapse("x-", "x");
    doTestTrimAndCollapse("-x", "x");
    doTestTrimAndCollapse("--", "");
    doTestTrimAndCollapse("x--", "x");
    doTestTrimAndCollapse("--x", "x");
    doTestTrimAndCollapse("-x-", "x");
    doTestTrimAndCollapse("x-x", "x_x");
    doTestTrimAndCollapse("---", "");
    doTestTrimAndCollapse("--x-", "x");
    doTestTrimAndCollapse("--xx", "xx");
    doTestTrimAndCollapse("-x--", "x");
    doTestTrimAndCollapse("-x-x", "x_x");
    doTestTrimAndCollapse("-xx-", "xx");
    doTestTrimAndCollapse("x--x", "x_x");
    doTestTrimAndCollapse("x-x-", "x_x");
    doTestTrimAndCollapse("x-xx", "x_xx");
    doTestTrimAndCollapse("x-x--xx---x----x", "x_x_xx_x_x");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestTrimAndCollapse (Alternative Action: doTestTrimAndCollapse=20 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testGeneral
 Body: {
    doTestGeneral(is('a'), 'a', 'b');
    doTestGeneral(isNot('a'), 'b', 'a');
    doTestGeneral(anyOf("x"), 'x', 'z');
    doTestGeneral(anyOf("xy"), 'y', 'z');
    doTestGeneral(anyOf("CharMatcher"), 'C', 'z');
    doTestGeneral(noneOf("CharMatcher"), 'z', 'C');
    doTestGeneral(inRange('p', 'x'), 'q', 'z');
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestGeneral (Alternative Action: doTestGeneral=7 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testEmpty
 Body: {
    doTestEmpty(CharMatcher.any());
    doTestEmpty(CharMatcher.none());
    doTestEmpty(is('a'));
    doTestEmpty(isNot('a'));
    doTestEmpty(anyOf(""));
    doTestEmpty(anyOf("x"));
    doTestEmpty(anyOf("xy"));
    doTestEmpty(anyOf("CharMatcher"));
    doTestEmpty(noneOf("CharMatcher"));
    doTestEmpty(inRange('n', 'q'));
    doTestEmpty(forPredicate(Predicates.equalTo('c')));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestEmpty (Alternative Action: doTestEmpty=11 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testCollapse
 Body: {
    // collapsing groups of '-' into '_' or '-'
    doTestCollapse("-", "_");
    doTestCollapse("x-", "x_");
    doTestCollapse("-x", "_x");
    doTestCollapse("--", "_");
    doTestCollapse("x--", "x_");
    doTestCollapse("--x", "_x");
    doTestCollapse("-x-", "_x_");
    doTestCollapse("x-x", "x_x");
    doTestCollapse("---", "_");
    doTestCollapse("--x-", "_x_");
    doTestCollapse("--xx", "_xx");
    doTestCollapse("-x--", "_x_");
    doTestCollapse("-x-x", "_x_x");
    doTestCollapse("-xx-", "_xx_");
    doTestCollapse("x--x", "x_x");
    doTestCollapse("x-x-", "x_x_");
    doTestCollapse("x-xx", "x_xx");
    doTestCollapse("x-x--xx---x----x", "x_x_xx_x_x");

    doTestCollapseWithNoChange("");
    doTestCollapseWithNoChange("x");
    doTestCollapseWithNoChange("xx");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestCollapseWithNoChange (Alternative Action: doTestCollapse=18 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testNull
 Body: {
    doTestNull(CharMatcher.any());
    doTestNull(CharMatcher.none());
    doTestNull(is('a'));
    doTestNull(isNot('a'));
    doTestNull(anyOf(""));
    doTestNull(anyOf("x"));
    doTestNull(anyOf("xy"));
    doTestNull(anyOf("CharMatcher"));
    doTestNull(noneOf("CharMatcher"));
    doTestNull(inRange('n', 'q'));
    doTestNull(forPredicate(Predicates.equalTo('c')));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestNull (Alternative Action: doTestNull=11 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: CharMatcherTest
 Method: testSetBits
 Body: {
    doTestSetBits(CharMatcher.any());
    doTestSetBits(CharMatcher.none());
    doTestSetBits(is('a'));
    doTestSetBits(isNot('a'));
    doTestSetBits(anyOf(""));
    doTestSetBits(anyOf("x"));
    doTestSetBits(anyOf("xy"));
    doTestSetBits(anyOf("CharMatcher"));
    doTestSetBits(noneOf("CharMatcher"));
    doTestSetBits(inRange('n', 'q'));
    doTestSetBits(forPredicate(Predicates.equalTo('c')));
    doTestSetBits(CharMatcher.ascii());
    doTestSetBits(CharMatcher.digit());
    doTestSetBits(CharMatcher.invisible());
    doTestSetBits(CharMatcher.whitespace());
    doTestSetBits(inRange('A', 'Z').and(inRange('F', 'K').negate()));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestSetBits (Alternative Action: doTestSetBits=16 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingSortedSetTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            SortedSet.class,
            new Function<SortedSet, SortedSet>() {
              @Override
              public SortedSet apply(SortedSet delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingMapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Map.class,
            new Function<Map, Map>() {
              @Override
              public Map apply(Map delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: OrderingTest
 Method: testLeastOf_reconcileAgainstSortAndSublist
 Body: {
    runLeastOfComparison(1000, 300, 20);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runLeastOfComparison (Alternative Action: runLeastOfComparison=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: OrderingTest
 Method: testCompound_instance_generics
 Body: {
    Ordering<Object> objects = Ordering.explicit((Object) 1);
    Ordering<Number> numbers = Ordering.explicit((Number) 1);
    Ordering<Integer> integers = Ordering.explicit(1);

    // Like by like equals like
    Ordering<Number> a = numbers.compound(numbers);

    // The compound takes the more specific type of the two, regardless of order

    Ordering<Number> b = numbers.compound(objects);
    Ordering<Number> c = objects.compound(numbers);

    Ordering<Integer> d = numbers.compound(integers);
    Ordering<Integer> e = integers.compound(numbers);

    // This works with three levels too (IDEA falsely reports errors as noted
    // below. Both javac and eclipse handle these cases correctly.)

    Ordering<Number> f = numbers.compound(objects).compound(objects); // bad IDEA
    Ordering<Number> g = objects.compound(numbers).compound(objects);
    Ordering<Number> h = objects.compound(objects).compound(numbers);

    Ordering<Number> i = numbers.compound(objects.compound(objects));
    Ordering<Number> j = objects.compound(numbers.compound(objects)); // bad IDEA
    Ordering<Number> k = objects.compound(objects.compound(numbers));

    // You can also arbitrarily assign a more restricted type - not an intended
    // feature, exactly, but unavoidable (I think) and harmless
    Ordering<Integer> l = objects.compound(numbers);

    // This correctly doesn't work:
    // Ordering<Object> m = numbers.compound(objects);

    // Sadly, the following works in javac 1.6, but at least it fails for
    // eclipse, and is *correctly* highlighted red in IDEA.
    // Ordering<Object> n = objects.compound(numbers);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: compound=18 ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: OrderingTest
 Method: testLeastOf_reconcileAgainstSortAndSublistSmall
 Body: {
    runLeastOfComparison(10, 30, 2);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runLeastOfComparison (Alternative Action: runLeastOfComparison=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: AbstractSequentialIteratorTest
 Method: testDoublerExhaustive
 Body: {
    new IteratorTester<Integer>(
        3, UNMODIFIABLE, ImmutableList.of(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return newDoubler(1, 2);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        3, UNMODIFIABLE, ImmutableList.of(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return newDoubler(1, 2);
      }
    } (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testLogicalKeyEquality_strongKeys
 Body: {
    testLogicalKeyEquality(STRONG);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testLogicalKeyEquality (Alternative Action: testLogicalKeyEquality=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testLogicalKeyEquality_weakKeys
 Body: {
    testLogicalKeyEquality(WEAK);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testLogicalKeyEquality (Alternative Action: testLogicalKeyEquality=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testIdentityKeyEquality_strongKeys
 Body: {
    testIdentityKeyEquality(STRONG);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testIdentityKeyEquality (Alternative Action: testIdentityKeyEquality=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ConcurrentHashMultisetTest
 Method: testIdentityKeyEquality_weakKeys
 Body: {
    testIdentityKeyEquality(WEAK);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testIdentityKeyEquality (Alternative Action: testIdentityKeyEquality=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ImmutableSortedMultisetTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(ImmutableSortedMultiset.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testNot_equalityForNotOfKnownValues
 Body: {
    new EqualsTester()
        .addEqualityGroup(TRUE, Predicates.alwaysTrue())
        .addEqualityGroup(FALSE)
        .addEqualityGroup(Predicates.not(TRUE))
        .testEquals();

    new EqualsTester()
        .addEqualityGroup(FALSE, Predicates.alwaysFalse())
        .addEqualityGroup(TRUE)
        .addEqualityGroup(Predicates.not(FALSE))
        .testEquals();

    new EqualsTester()
        .addEqualityGroup(Predicates.isNull(), Predicates.isNull())
        .addEqualityGroup(Predicates.notNull())
        .addEqualityGroup(Predicates.not(Predicates.isNull()))
        .testEquals();

    new EqualsTester()
        .addEqualityGroup(Predicates.notNull(), Predicates.notNull())
        .addEqualityGroup(Predicates.isNull())
        .addEqualityGroup(Predicates.not(Predicates.notNull()))
        .testEquals();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEquals (Alternative Action: addEqualityGroup=12 ) - Predicate: N/A - Scenario: new EqualsTester()
        .addEqualityGroup(TRUE, Predicates.alwaysTrue())
        .addEqualityGroup(FALSE)
        .addEqualityGroup(Predicates.not(TRUE)) (Alternative Scenario:  )

Project: guava
 Class: PredicatesTest
 Method: testIn_compilesWithExplicitSupertype
 Body: {
    Collection<Number> nums = ImmutableSet.of();
    Predicate<Number> p1 = Predicates.in(nums);
    Predicate<Object> p2 = Predicates.<Object>in(nums);
    // The next two lines are not expected to compile.
    // Predicate<Integer> p3 = Predicates.in(nums);
    // Predicate<Integer> p4 = Predicates.<Integer>in(nums);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: in=2 ) - Predicate: N/A - Scenario: p1 (Alternative Scenario: p1=1 )

Project: guava
 Class: IteratorsTest
 Method: testConcatEmptyAndSingletonAndEmptyYieldsSingleton
 Body: {
    new SingletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(), iterateOver(1), iterateOver());
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=3 ) - Predicate: N/A - Scenario: new SingletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(), iterateOver(1), iterateOver());
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatSingletonAndSingletonYieldsDoubleton
 Body: {
    new DoubletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1), iterateOver(2));
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=2 ) - Predicate: N/A - Scenario: new DoubletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1), iterateOver(2));
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testForArrayUsingTester
 Body: {
    new IteratorTester<Integer>(
        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.forArray(1, 2, 3);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.forArray(1, 2, 3);
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testCycleUsingIteratorTester
 Body: {
    new IteratorTester<Integer>(
        5,
        UNMODIFIABLE,
        asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.cycle(asList(1, 2));
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: asList=2 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5,
        UNMODIFIABLE,
        asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.cycle(asList(1, 2));
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatSingletonYieldsSingleton
 Body: {
    new SingletonIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1));
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=1 ) - Predicate: N/A - Scenario: new SingletonIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1));
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testForArrayWithOffsetUsingTester
 Body: {
    new IteratorTester<Integer>(
        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.forArray(new Integer[] {0, 1, 2, 3, 4}, 1, 3, 0);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.forArray(new Integer[] {0, 1, 2, 3, 4}, 1, 3, 0);
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatNoIteratorsYieldsEmpty
 Body: {
    new EmptyIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: new EmptyIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatUnmodifiable
 Body: {
    new IteratorTester<Integer>(
        5, UNMODIFIABLE, asList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(
            asList(1).iterator(), Arrays.<Integer>asList().iterator(), asList(2).iterator());
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: asList=4 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5, UNMODIFIABLE, asList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(
            asList(1).iterator(), Arrays.<Integer>asList().iterator(), asList(2).iterator());
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatOneEmptyIteratorYieldsEmpty
 Body: {
    new EmptyIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver());
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=1 ) - Predicate: N/A - Scenario: new EmptyIteratorTester() {
      @SuppressWarnings("unchecked")
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver());
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testPaddedPartition_general
 Body: {
    new IteratorTester<List<Integer>>(
        5,
        IteratorFeature.UNMODIFIABLE,
        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7, null, null)),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<List<Integer>> newTargetIterator() {
        Iterator<Integer> source = Iterators.forArray(1, 2, 3, 4, 5, 6, 7);
        return Iterators.paddedPartition(source, 3);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: asList=3 ) - Predicate: N/A - Scenario: new IteratorTester<List<Integer>>(
        5,
        IteratorFeature.UNMODIFIABLE,
        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7, null, null)),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<List<Integer>> newTargetIterator() {
        Iterator<Integer> source = Iterators.forArray(1, 2, 3, 4, 5, 6, 7);
        return Iterators.paddedPartition(source, 3);
      }
    } (Alternative Scenario: source=1 )

Project: guava
 Class: IteratorsTest
 Method: testConcatSingletonAndSingletonWithEmptiesYieldsDoubleton
 Body: {
    new DoubletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1), iterateOver(), iterateOver(), iterateOver(2));
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=4 ) - Predicate: N/A - Scenario: new DoubletonIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(1), iterateOver(), iterateOver(), iterateOver(2));
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testSingletonIterator
 Body: {
    new IteratorTester<Integer>(
        3, UNMODIFIABLE, singleton(1), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.singletonIterator(1);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: singleton=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        3, UNMODIFIABLE, singleton(1), IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.singletonIterator(1);
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testConcatMultipleEmptyIteratorsYieldsEmpty
 Body: {
    new EmptyIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(), iterateOver());
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterateOver=2 ) - Predicate: N/A - Scenario: new EmptyIteratorTester() {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return Iterators.concat(iterateOver(), iterateOver());
      }
    } (Alternative Scenario:  )

Project: guava
 Class: IteratorsTest
 Method: testPartition_general
 Body: {
    new IteratorTester<List<Integer>>(
        5,
        IteratorFeature.UNMODIFIABLE,
        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7)),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<List<Integer>> newTargetIterator() {
        Iterator<Integer> source = Iterators.forArray(1, 2, 3, 4, 5, 6, 7);
        return Iterators.partition(source, 3);
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: asList=3 ) - Predicate: N/A - Scenario: new IteratorTester<List<Integer>>(
        5,
        IteratorFeature.UNMODIFIABLE,
        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7)),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<List<Integer>> newTargetIterator() {
        Iterator<Integer> source = Iterators.forArray(1, 2, 3, 4, 5, 6, 7);
        return Iterators.partition(source, 3);
      }
    } (Alternative Scenario: source=1 )

Project: guava
 Class: MapsTest
 Method: testNullPointerExceptions
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Maps.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: BigIntegerMathTest
 Method: testBinomialSmall
 Body: {
    runBinomialTest(0, 30);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runBinomialTest (Alternative Action: runBinomialTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: BigIntegerMathTest
 Method: testBinomialLarge
 Body: {
    runBinomialTest(31, 100);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runBinomialTest (Alternative Action: runBinomialTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new int[] {}, new int[] {});
    testSortDescending(new int[] {1}, new int[] {1});
    testSortDescending(new int[] {1, 2}, new int[] {2, 1});
    testSortDescending(new int[] {1, 3, 1}, new int[] {3, 1, 1});
    testSortDescending(new int[] {-1, 1, -2, 2}, new int[] {2, 1, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testReverseIndexed
 Body: {
    testReverse(new int[] {}, 0, 0, new int[] {});
    testReverse(new int[] {1}, 0, 1, new int[] {1});
    testReverse(new int[] {1, 2}, 0, 2, new int[] {2, 1});
    testReverse(new int[] {3, 1, 1}, 0, 2, new int[] {1, 3, 1});
    testReverse(new int[] {3, 1, 1}, 0, 1, new int[] {3, 1, 1});
    testReverse(new int[] {-1, 1, -2, 2}, 1, 3, new int[] {-1, -2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testReverse
 Body: {
    testReverse(new int[] {}, new int[] {});
    testReverse(new int[] {1}, new int[] {1});
    testReverse(new int[] {1, 2}, new int[] {2, 1});
    testReverse(new int[] {3, 1, 1}, new int[] {1, 1, 3});
    testReverse(new int[] {-1, 1, -2, 2}, new int[] {2, -2, 1, -1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testReverse (Alternative Action: testReverse=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new int[] {}, 0, 0, new int[] {});
    testSortDescending(new int[] {1}, 0, 1, new int[] {1});
    testSortDescending(new int[] {1, 2}, 0, 2, new int[] {2, 1});
    testSortDescending(new int[] {1, 3, 1}, 0, 2, new int[] {3, 1, 1});
    testSortDescending(new int[] {1, 3, 1}, 0, 1, new int[] {1, 3, 1});
    testSortDescending(new int[] {-1, -2, 1, 2}, 1, 3, new int[] {-1, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: IntsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Ints.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testSortIndexed
 Body: {
    testSort(new int[] {}, 0, 0, new int[] {});
    testSort(new int[] {2}, 0, 1, new int[] {2});
    testSort(new int[] {2, 1, 0}, 0, 2, new int[] {1, 2, 0});
    testSort(new int[] {2, GREATEST, 1, LEAST}, 1, 4, new int[] {2, LEAST, 1, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(UnsignedInts.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testSortDescending
 Body: {
    testSortDescending(new int[] {}, new int[] {});
    testSortDescending(new int[] {1}, new int[] {1});
    testSortDescending(new int[] {1, 2}, new int[] {2, 1});
    testSortDescending(new int[] {1, 3, 1}, new int[] {3, 1, 1});
    testSortDescending(
        new int[] {GREATEST - 1, 1, GREATEST - 2, 2}, new int[] {GREATEST - 1, GREATEST - 2, 2, 1});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testSort
 Body: {
    testSort(new int[] {}, new int[] {});
    testSort(new int[] {2}, new int[] {2});
    testSort(new int[] {2, 1, 0}, new int[] {0, 1, 2});
    testSort(new int[] {2, GREATEST, 1, LEAST}, new int[] {LEAST, 1, 2, GREATEST});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSort (Alternative Action: testSort=4 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: UnsignedIntsTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new int[] {}, 0, 0, new int[] {});
    testSortDescending(new int[] {1}, 0, 1, new int[] {1});
    testSortDescending(new int[] {1, 2}, 0, 2, new int[] {2, 1});
    testSortDescending(new int[] {1, 3, 1}, 0, 2, new int[] {3, 1, 1});
    testSortDescending(new int[] {1, 3, 1}, 0, 1, new int[] {1, 3, 1});
    testSortDescending(
        new int[] {GREATEST - 1, 1, GREATEST - 2, 2},
        1,
        3,
        new int[] {GREATEST - 1, GREATEST - 2, 1, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingFutureTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingFuture.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: MapContainsValueTester
 Method: testContains_nullNotContainedAndUnsupported
 Body: {
    expectNullValueMissingWhenNullValuesUnsupported(
        "containsValue(null) should return false or throw");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectNullValueMissingWhenNullValuesUnsupported (Alternative Action: expectNullValueMissingWhenNullValuesUnsupported=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: GeneralRangeTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(GeneralRange.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingMultimapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Multimap.class,
            new Function<Multimap, Multimap>() {
              @Override
              public Multimap apply(Multimap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ArrayTableTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicInstanceMethods(create());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: create=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ArrayTableTest
 Method: testNullPointerStatic
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(ArrayTable.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: FilesSimplifyPathTest
 Method: testExtensiveNoPrefix
 Body: {
    /*
     * Inputs are <every possible 10-character string of characters "a./">
     *
     * Expected outputs are generated by the code itself, but they've been
     * checked against the inputs under Bash in order to confirm that the two
     * forms are equivalent (though not necessarily minimal, though we hope this
     * to be the case). Thus, this test is more of a regression test.
     *
     * Rough instructions to regenerate the test outputs and verify correctness:
     * - Temporarily change this test:
     * --- Comment out assertEquals.
     * --- System.out.println(input + " " + simplifyPath(input));
     * --- fail(). (If the test were to pass, its output would be hidden.)
     * - Run the test.
     * - Pull the relevant lines of output from the test into a testcases file.
     * - Test the output:
     * --- cat testcases | while read L; do
     *       X=($L)
     *       A=$( cd /b/c && sudo mkdir -p ${X[0]} && cd ${X[0]} && pwd |
     *           sed -e 's#^//*#/#' )
     *       B=$( cd /b/c && cd ${X[1]} && pwd )
     *       cmp -s <(echo $A) <(echo $B) || echo "$X[0] -> $A vs. $B"
     *     done | tee testoutput
     * - Move that testcases file to the appropriate name under testdata.
     *
     * The last test will take hours, and if it passes, the output will be empty.
     */
    doExtensiveTest("testdata/simplifypathnoprefixtests.txt");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doExtensiveTest (Alternative Action: doExtensiveTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: FilesSimplifyPathTest
 Method: testExtensiveWithAbsolutePrefix
 Body: {
    // Inputs are /b/c/<every possible 10-character string of characters "a./">
    // Expected outputs are from realpath -s.
    doExtensiveTest("testdata/simplifypathwithabsoluteprefixtests.txt");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doExtensiveTest (Alternative Action: doExtensiveTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testHashCode_equalsAndSerializable
 Body: {
    sanityTester().testEqualsAndSerializable();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEqualsAndSerializable (Alternative Action: sanityTester=1 ) - Predicate: N/A - Scenario: sanityTester() (Alternative Scenario:  )

Project: guava
 Class: HashCodeTest
 Method: testHashCode_nulls
 Body: {
    sanityTester().testNulls();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testNulls (Alternative Action: testNulls=1 ) - Predicate: N/A - Scenario: sanityTester() (Alternative Scenario:  )

Project: guava
 Class: MapMakerInternalMapTest
 Method: testSetConcurrencyLevel
 Body: {
    // round up to nearest power of two

    checkConcurrencyLevel(1, 1);
    checkConcurrencyLevel(2, 2);
    checkConcurrencyLevel(3, 4);
    checkConcurrencyLevel(4, 4);
    checkConcurrencyLevel(5, 8);
    checkConcurrencyLevel(6, 8);
    checkConcurrencyLevel(7, 8);
    checkConcurrencyLevel(8, 8);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkConcurrencyLevel (Alternative Action: checkConcurrencyLevel=8 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapMakerInternalMapTest
 Method: testSetInitialCapacity
 Body: {
    // share capacity over each segment, then round up to nearest power of two

    checkInitialCapacity(1, 0, 1);
    checkInitialCapacity(1, 1, 1);
    checkInitialCapacity(1, 2, 2);
    checkInitialCapacity(1, 3, 4);
    checkInitialCapacity(1, 4, 4);
    checkInitialCapacity(1, 5, 8);
    checkInitialCapacity(1, 6, 8);
    checkInitialCapacity(1, 7, 8);
    checkInitialCapacity(1, 8, 8);

    checkInitialCapacity(2, 0, 1);
    checkInitialCapacity(2, 1, 1);
    checkInitialCapacity(2, 2, 1);
    checkInitialCapacity(2, 3, 2);
    checkInitialCapacity(2, 4, 2);
    checkInitialCapacity(2, 5, 4);
    checkInitialCapacity(2, 6, 4);
    checkInitialCapacity(2, 7, 4);
    checkInitialCapacity(2, 8, 4);

    checkInitialCapacity(4, 0, 1);
    checkInitialCapacity(4, 1, 1);
    checkInitialCapacity(4, 2, 1);
    checkInitialCapacity(4, 3, 1);
    checkInitialCapacity(4, 4, 1);
    checkInitialCapacity(4, 5, 2);
    checkInitialCapacity(4, 6, 2);
    checkInitialCapacity(4, 7, 2);
    checkInitialCapacity(4, 8, 2);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkInitialCapacity (Alternative Action: checkInitialCapacity=27 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckInRange_success
 Body: {
    MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkInRangeForRoundingInputs (Alternative Action: checkInRangeForRoundingInputs=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckRoundingUnnnecessary_success
 Body: {
    MathPreconditions.checkRoundingUnnecessary(true);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkRoundingUnnecessary (Alternative Action: checkRoundingUnnecessary=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_positiveLong
 Body: {
    MathPreconditions.checkNonNegative("long", 1L);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_positiveBigInteger
 Body: {
    MathPreconditions.checkNonNegative("BigInteger", BigInteger.ONE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_positiveDouble
 Body: {
    MathPreconditions.checkNonNegative("double", 1d);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_maxLong
 Body: {
    MathPreconditions.checkNonNegative("long", Long.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_zeroLong
 Body: {
    MathPreconditions.checkNonNegative("long", 0L);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_minFloat
 Body: {
    MathPreconditions.checkNonNegative("float", Float.MIN_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_zeroDouble
 Body: {
    MathPreconditions.checkNonNegative("double", 0d);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_minDouble
 Body: {
    MathPreconditions.checkNonNegative("double", Double.MIN_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckPositive_postiveBigInteger
 Body: {
    MathPreconditions.checkPositive("BigInteger", BigInteger.ONE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositive (Alternative Action: checkPositive=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_zeroBigInteger
 Body: {
    MathPreconditions.checkNonNegative("BigInteger", BigInteger.ZERO);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_zeroInt
 Body: {
    MathPreconditions.checkNonNegative("int", 0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_zeroFloat
 Body: {
    MathPreconditions.checkNonNegative("float", 0f);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_positiveFloat
 Body: {
    MathPreconditions.checkNonNegative("float", 1f);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckPositive_maxInt
 Body: {
    MathPreconditions.checkPositive("int", Integer.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositive (Alternative Action: checkPositive=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_maxDouble
 Body: {
    MathPreconditions.checkNonNegative("double", Double.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_positiveInt
 Body: {
    MathPreconditions.checkNonNegative("int", 1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckPositive_maxLong
 Body: {
    MathPreconditions.checkPositive("long", Long.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositive (Alternative Action: checkPositive=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckPositive_positiveInt
 Body: {
    MathPreconditions.checkPositive("int", 1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositive (Alternative Action: checkPositive=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckPositive_positiveLong
 Body: {
    MathPreconditions.checkPositive("long", 1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkPositive (Alternative Action: checkPositive=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNoOverflow_success
 Body: {
    MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNoOverflow (Alternative Action: checkNoOverflow=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_maxInt
 Body: {
    MathPreconditions.checkNonNegative("int", Integer.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: MathPreconditionsTest
 Method: testCheckNonNegative_maxFloat
 Body: {
    MathPreconditions.checkNonNegative("float", Float.MAX_VALUE);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: checkNonNegative (Alternative Action: checkNonNegative=1 ) - Predicate: N/A - Scenario: MathPreconditions (Alternative Scenario:  )

Project: guava
 Class: ListRemoveAtIndexTester
 Method: testRemoveAtIndex_last
 Body: {
    runRemoveTest(getNumElements() - 1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runRemoveTest (Alternative Action: runRemoveTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ListRemoveAtIndexTester
 Method: testRemoveAtIndex_middle
 Body: {
    runRemoveTest(getNumElements() / 2);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runRemoveTest (Alternative Action: runRemoveTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ListRemoveAtIndexTester
 Method: testRemoveAtIndex_first
 Body: {
    runRemoveTest(0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runRemoveTest (Alternative Action: runRemoveTest=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: EquivalenceTesterTest
 Method: testTest_NoData
 Body: {
    tester.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: test=1 ) - Predicate: N/A - Scenario: tester (Alternative Scenario:  )

Project: guava
 Class: MapCreationTester
 Method: testCreateWithNullKeySupported
 Body: {
    initMapWithNullKey();
    expectContents(createArrayWithNullKey());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: expectContents=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: MapCreationTester
 Method: testCreateWithNullValueSupported
 Body: {
    initMapWithNullValue();
    expectContents(createArrayWithNullValue());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: expectContents (Alternative Action: createArrayWithNullValue=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingListTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            List.class,
            new Function<List, List>() {
              @Override
              public List apply(List delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testOf_gwtArraycopyBug
 Body: {
    /*
     * The test requires:
     *
     * 1) An interface I extending Comparable<I> so that the created array is of
     * an interface type. 2) An instance of a class implementing that interface
     * so that we can pass non-null instances of the interface.
     *
     * (Currently it's safe to pass instances for which compareTo() always
     * returns 0, but if we had a SingletonImmutableSortedSet, this might no
     * longer be the case.)
     *
     * javax.naming.Name and java.util.concurrent.Delayed might work, but
     * they're fairly obscure, we've invented our own interface and class.
     */
    Interface a = new Impl();
    Interface b = new Impl();
    ImmutableSortedSet<Interface> set = ImmutableSortedSet.of(a, b);
    Object[] unused1 = set.toArray();
    Object[] unused2 = set.toArray(new Object[2]);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: toArray=2 ) - Predicate: N/A - Scenario: a (Alternative Scenario: a=1 )

Project: guava
 Class: ImmutableSortedSetTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(ImmutableSortedSet.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingBlockingQueueTest
 Method: testForwarding
 Body: {
    ForwardingObjectTester.testForwardingObject(ForwardingBlockingQueue.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwardingObject (Alternative Action: testForwardingObject=1 ) - Predicate: N/A - Scenario: ForwardingObjectTester (Alternative Scenario:  )

Project: guava
 Class: TypeParameterTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(TypeParameter.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testInvalidateAllIterable
 Body: {
    forward.invalidateAll(ImmutableList.of("key"));
    verify(mock).invalidateAll(ImmutableList.of("key"));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: invalidateAll (Alternative Action: invalidateAll=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testInvalidateAll
 Body: {
    forward.invalidateAll();
    verify(mock).invalidateAll();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: invalidateAll (Alternative Action: invalidateAll=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testCleanUp
 Body: {
    forward.cleanUp();
    verify(mock).cleanUp();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: cleanUp (Alternative Action: cleanUp=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingCacheTest
 Method: testInvalidate
 Body: {
    forward.invalidate("key");
    verify(mock).invalidate("key");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: invalidate (Alternative Action: invalidate=2 ) - Predicate: N/A - Scenario: forward (Alternative Scenario:  )

Project: guava
 Class: ForwardingSortedSetMultimapTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            SortedSetMultimap.class,
            new Function<SortedSetMultimap, SortedSetMultimap>() {
              @Override
              public SortedSetMultimap apply(SortedSetMultimap delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare0
 Body: {
    runTestFuzzyCompare(0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare6
 Body: {
    runTestFuzzyCompare(6);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare2
 Body: {
    runTestFuzzyCompare(2);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare1
 Body: {
    runTestFuzzyCompare(1);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare5
 Body: {
    runTestFuzzyCompare(5);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare4
 Body: {
    runTestFuzzyCompare(4);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: DoubleMathTest
 Method: testFuzzyCompare3
 Body: {
    runTestFuzzyCompare(3);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: runTestFuzzyCompare (Alternative Action: runTestFuzzyCompare=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testSortDescending
 Body: {
    testSortDescending(new byte[] {}, new byte[] {});
    testSortDescending(new byte[] {1}, new byte[] {1});
    testSortDescending(new byte[] {1, 2}, new byte[] {2, 1});
    testSortDescending(new byte[] {1, 3, 1}, new byte[] {3, 1, 1});
    testSortDescending(new byte[] {-1, 1, -2, 2}, new byte[] {2, 1, -1, -2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testSortDescendingIndexed
 Body: {
    testSortDescending(new byte[] {}, 0, 0, new byte[] {});
    testSortDescending(new byte[] {1}, 0, 1, new byte[] {1});
    testSortDescending(new byte[] {1, 2}, 0, 2, new byte[] {2, 1});
    testSortDescending(new byte[] {1, 3, 1}, 0, 2, new byte[] {3, 1, 1});
    testSortDescending(new byte[] {1, 3, 1}, 0, 1, new byte[] {1, 3, 1});
    testSortDescending(new byte[] {-1, -2, 1, 2}, 1, 3, new byte[] {-1, 1, -2, 2});
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testSortDescending (Alternative Action: testSortDescending=6 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: SignedBytesTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(SignedBytes.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ReflectionTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Reflection.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: InvokableTest
 Method: testStaticAnonymousClassDefaultConstructor
 Body: {
    doTestStaticAnonymousClassDefaultConstructor();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: doTestStaticAnonymousClassDefaultConstructor (Alternative Action: doTestStaticAnonymousClassDefaultConstructor=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: InvokableTest
 Method: testNulls
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Invokable.class);
    new NullPointerTester().testAllPublicInstanceMethods(Prepender.method("staticMethod"));
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicInstanceMethods (Alternative Action: method=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Throwables.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testPropageIfInstanceOf_null
 Body: {
    Throwables.propagateIfInstanceOf(null, SomeCheckedException.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: propagateIfInstanceOf (Alternative Action: propagateIfInstanceOf=1 ) - Predicate: N/A - Scenario: Throwables (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testThrowIfInstanceOf_Unchecked
 Body: {
    throwIfInstanceOf(new SomeUncheckedException(), SomeCheckedException.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: throwIfInstanceOf (Alternative Action: throwIfInstanceOf=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testPropageIfPossible_OneDeclared_null
 Body: {
    Throwables.propagateIfPossible(null, SomeCheckedException.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: propagateIfPossible (Alternative Action: propagateIfPossible=1 ) - Predicate: N/A - Scenario: Throwables (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testPropageIfPossible_TwoDeclared_null
 Body: {
    Throwables.propagateIfPossible(null, SomeCheckedException.class, SomeUncheckedException.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: propagateIfPossible (Alternative Action: propagateIfPossible=1 ) - Predicate: N/A - Scenario: Throwables (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testThrowIfInstanceOf_CheckedDifferent
 Body: {
    throwIfInstanceOf(new SomeOtherCheckedException(), SomeCheckedException.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: throwIfInstanceOf (Alternative Action: throwIfInstanceOf=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testPropageIfPossible_null
 Body: {
    Throwables.propagateIfPossible(null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: propagateIfPossible (Alternative Action: propagateIfPossible=1 ) - Predicate: N/A - Scenario: Throwables (Alternative Scenario:  )

Project: guava
 Class: ThrowablesTest
 Method: testThrowIfUnchecked_Checked
 Body: {
    throwIfUnchecked(new SomeCheckedException());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: throwIfUnchecked (Alternative Action: throwIfUnchecked=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ForwardingMultisetTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            Multiset.class,
            new Function<Multiset, Multiset>() {
              @Override
              public Multiset apply(Multiset delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: MultisetsTest
 Method: testNullPointers
 Body: {
    new NullPointerTester().testAllPublicStaticMethods(Multisets.class);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testAllPublicStaticMethods (Alternative Action: testAllPublicStaticMethods=1 ) - Predicate: N/A - Scenario: new NullPointerTester() (Alternative Scenario:  )

Project: guava
 Class: ForwardingListIteratorTest
 Method: testForwarding
 Body: {
    new ForwardingWrapperTester()
        .testForwarding(
            ListIterator.class,
            new Function<ListIterator, ListIterator>() {
              @Override
              public ListIterator apply(ListIterator delegate) {
                return wrap(delegate);
              }
            });
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testForwarding (Alternative Action: testForwarding=1 ) - Predicate: N/A - Scenario: new ForwardingWrapperTester() (Alternative Scenario:  )

Project: guava
 Class: Utf8Test
 Method: testIsWellFormed_3Bytes
 Body: {
    testBytes(3, EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testBytes (Alternative Action: testBytes=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: Utf8Test
 Method: testIsWellFormed_2Bytes
 Body: {
    testBytes(2, EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testBytes (Alternative Action: testBytes=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: Utf8Test
 Method: testEncodedLength_invalidStrings
 Body: {
    testEncodedLengthFails(newString(MIN_HIGH_SURROGATE), 0);
    testEncodedLengthFails("foobar" + newString(MIN_HIGH_SURROGATE), 6);
    testEncodedLengthFails(newString(MIN_LOW_SURROGATE), 0);
    testEncodedLengthFails("foobar" + newString(MIN_LOW_SURROGATE), 6);
    testEncodedLengthFails(newString(MIN_HIGH_SURROGATE, MIN_HIGH_SURROGATE), 0);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testEncodedLengthFails (Alternative Action: testEncodedLengthFails=5 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: Utf8Test
 Method: testIsWellFormed_1Byte
 Body: {
    testBytes(1, EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testBytes (Alternative Action: testBytes=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ListAddAtIndexTester
 Method: testAddAtIndex_end
 Body: {
    getList().add(getNumElements(), e3());
    expectAdded(getNumElements(), e3());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: getNumElements=2 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: ListAddAtIndexTester
 Method: testAddAtIndex_middle
 Body: {
    getList().add(getNumElements() / 2, e3());
    expectAdded(getNumElements() / 2, e3());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: getNumElements=2 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: ListAddAtIndexTester
 Method: testAddAtIndex_supportedNotPresent
 Body: {
    getList().add(0, e3());
    expectAdded(0, e3());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: e3=2 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: ListAddAtIndexTester
 Method: testAddAtIndex_supportedPresent
 Body: {
    getList().add(0, e0());
    expectAdded(0, e0());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: e0=2 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: ListAddAtIndexTester
 Method: testAddAtIndex_nullSupported
 Body: {
    getList().add(0, null);
    expectAdded(0, (E) null);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: add (Alternative Action: add=1 ) - Predicate: N/A - Scenario: getList() (Alternative Scenario:  )

Project: guava
 Class: HelpersTest
 Method: testNullsBeforeB
 Body: {
    testComparator(NullsBeforeB.INSTANCE, "a", "azzzzzz", null, "b", "c");
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: testComparator (Alternative Action: testComparator=1 ) - Predicate: N/A - Scenario: (N/A)-1 (Alternative Scenario:  )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testBuilderGenerics_SuperComparable
 Body: {
    ImmutableSortedMap.Builder<SuperComparableExample, Object> natural =
        ImmutableSortedMap.naturalOrder();

    ImmutableSortedMap.Builder<SuperComparableExample, Object> reverse =
        ImmutableSortedMap.reverseOrder();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: naturalOrder=1 ) - Predicate: N/A - Scenario: natural (Alternative Scenario: natural=1 )

Project: guava
 Class: ImmutableSortedMapTest
 Method: testBuilderGenerics_SelfComparable
 Body: {
    ImmutableSortedMap.Builder<SelfComparableExample, Object> natural =
        ImmutableSortedMap.naturalOrder();

    ImmutableSortedMap.Builder<SelfComparableExample, Object> reverse =
        ImmutableSortedMap.reverseOrder();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: naturalOrder=1 ) - Predicate: N/A - Scenario: natural (Alternative Scenario: natural=1 )

Project: guava
 Class: FluentIterableTest
 Method: testTransformAndConcat_wildcardFunctionGenerics
 Body: {
    List<Integer> input = asList(1, 2, 3);
    FluentIterable<String> unused =
        FluentIterable.from(input).transformAndConcat(new RepeatedStringValueOfWildcardFunction());
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: transformAndConcat=1 ) - Predicate: N/A - Scenario: input (Alternative Scenario: input=1 )

Project: guava
 Class: FluentIterableTest
 Method: testConcatIntersectionType
 Body: {
    Iterable<A> aIterable = ImmutableList.of();
    Iterable<B> bIterable = ImmutableList.of();

    Predicate<X> xPredicate = Predicates.alwaysTrue();
    Predicate<Y> yPredicate = Predicates.alwaysTrue();

    FluentIterable<?> unused =
        FluentIterable.concat(aIterable, bIterable).filter(xPredicate).filter(yPredicate);

    /* The following fails to compile:
     *
     * The method append(Iterable<? extends FluentIterableTest.A>) in the type
     * FluentIterable<FluentIterableTest.A> is not applicable for the arguments
     * (Iterable<FluentIterableTest.B>)
     */
    // FluentIterable.from(aIterable).append(bIterable);

    /* The following fails to compile:
     *
     * The method filter(Predicate<? super Object>) in the type FluentIterable<Object> is not
     * applicable for the arguments (Predicate<FluentIterableTest.X>)
     */
    // FluentIterable.of().append(aIterable).append(bIterable).filter(xPredicate);
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllDeclarations) - Action: N/A (Alternative Action: filter=2 ) - Predicate: N/A - Scenario: yPredicate (Alternative Scenario: yPredicate=1 )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_iteratorList
 Body: {
    new IteratorTester<Integer>(
        5,
        IteratorFeature.MODIFIABLE,
        Lists.newArrayList(2, 3),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return FluentIterable.from(Lists.newArrayList(1, 2, 3)).skip(1).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: newArrayList=2 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5,
        IteratorFeature.MODIFIABLE,
        Lists.newArrayList(2, 3),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        return FluentIterable.from(Lists.newArrayList(1, 2, 3)).skip(1).iterator();
      }
    } (Alternative Scenario:  )

Project: guava
 Class: FluentIterableTest
 Method: testSkip_iterator
 Body: {
    new IteratorTester<Integer>(
        5,
        IteratorFeature.MODIFIABLE,
        Lists.newArrayList(2, 3),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        Collection<Integer> collection = Sets.newLinkedHashSet();
        Collections.addAll(collection, 1, 2, 3);
        return FluentIterable.from(collection).skip(1).iterator();
      }
    }.test();
  }
 Pattern Name: AllDecs_AllMCs_Pattern(AllMethodCalls) - Action: test (Alternative Action: iterator=1 ) - Predicate: N/A - Scenario: new IteratorTester<Integer>(
        5,
        IteratorFeature.MODIFIABLE,
        Lists.newArrayList(2, 3),
        IteratorTester.KnownOrder.KNOWN_ORDER) {
      @Override
      protected Iterator<Integer> newTargetIterator() {
        Collection<Integer> collection = Sets.newLinkedHashSet();
        Collections.addAll(collection, 1, 2, 3);
        return FluentIterable.from(collection).skip(1).iterator();
      }
    } (Alternative Scenario: collection=1 )

